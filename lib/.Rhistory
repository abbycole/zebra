comment = "",
header = TRUE)
short_otu <- read.table("Documents/Projects/HFD Mouse Fungal/raw data/Embalmer ITS output/short_fungal_tax.txt",
sep = "\t",
comment = "")
View(short_otu)
short_otu <- read.table("Documents/Projects/HFD Mouse Fungal/raw data/Embalmer ITS output/short_fungal_tax.txt",
sep = "\t",
comment = "",
header = TRUE)
View(short_otu)
library(dplyr)
data.frame(
var1=rep(rep(c('AA.1', 'AA.2', 'AA.3', 'BB.1', 'BB.2', 'BB.3'), each=3), 2),
var2=rep(c('X', 'Y'), each=18),
var3=sample(20:40, 36, replace=TRUE)
)
short_otu <- read.table("Documents/Projects/HFD Mouse Fungal/raw data/Embalmer ITS output/short_fungal_tax.txt",
comment = "",
sep = "\t",
header = TRUE)
View(short_otu)
short_otu.t <- t(short_otu)
View(short_otu.t)
short_otu <- read.table("Documents/Projects/HFD Mouse Fungal/raw data/Embalmer ITS output/short_fungal_tax.txt",
comment = "",
sep = "\t",
header = TRUE,
row.names = 1)
View(short_otu)
short_otu.t <- t(short_otu)
View(short_otu.t)
library(dplyr)
View(short_otu.t)
library(tibble)
short_otu.t <- rownames_to_column(short_otu.t, var = "taxa")
s
s
s
s
short_otu <- read.table("Documents/Projects/HFD Mouse Fungal/raw data/Embalmer ITS output/short_fungal_tax.txt",
comment = "",
sep = "\t",
header = TRUE,
row.names = 1)
short_otu.t <- as.data.frame(t(short_otu))
short_otu.t <- rownames_to_column(short_otu.t, var = "taxa")
View(short_otu.t)
short_otu <- read.table("Documents/Projects/HFD Mouse Fungal/raw data/Embalmer ITS output/short_fungal_tax.txt",
comment = "",
sep = "\t",
header = TRUE,
row.names = 1)
short_otu.t <- as.data.frame(t(short_otu))
short_otu.t <- rownames_to_column(short_otu.t, var = "SampleID")
View(short_otu.t)
df <-  data.frame(
asihckhdoydk = sample(LETTERS[1:3], 100, replace=TRUE),
a30mvxigxkgh = sample(LETTERS[1:3], 100, replace=TRUE),
value = rnorm(100)
)
View(df)
grp_cols <- names(df)[-3]
dots <- lapply(grp_cols, as.symbol)
df %>%
group_by_(.dots=dots) %>%
summarise(n = n())
View(short_otu.t)
mutate(ID = substring("SampleID", 1, 6))
short_grouped <- short_otu.t %>%
mutate(ID = substring("SampleID", 1, 6))
short_grouped$ID
short_grouped <- short_otu.t %>%
mutate(ID = SampleID)
short_otu.t$ID <- short_otu.t$SampleID
short_otu.t$ID
short_otu <- read.table("Documents/Projects/HFD Mouse Fungal/raw data/Embalmer ITS output/short_fungal_tax.txt",
comment = "",
sep = "\t",
header = TRUE,
row.names = 1)
short_otu.t <- as.data.frame(t(short_otu))
short_otu.t <- rownames_to_column(short_otu.t, var = "SampleID")
short_otu.t$ID <- substr(short_otu.t$SampleID,1,nchar(short_otu.t)-2)
short_otu.t$ID
short_otu.t$ID <- substr(short_otu.t$SampleID,1,nchar(short_otu.t$SampleID)-2)
short_otu.t$ID <- substr(short_otu.t$SampleID,1,nchar(short_otu.t$SampleID)-2)
short_otu.t$ID
grouped <- short_otu.t %>% group_by(ID) %>% summarise(funs(sum))
grouped <- short_otu.t %>% group_by(ID) %>% summarize(funs(sum))
grouped <- short_otu.t %>% group_by(ID)
View(grouped)
grouped <- short_otu.t %>% group_by(ID) %>% summarize_each(funs(sum))
short_otu.t <- select(SampleID, ID, everything())
short_otu <- read.table("Documents/Projects/HFD Mouse Fungal/raw data/Embalmer ITS output/short_fungal_tax.txt",
comment = "",
sep = "\t",
header = TRUE,
row.names = 1)
short_otu.t <- as.data.frame(t(short_otu))
short_otu.t <- rownames_to_column(short_otu.t, var = "SampleID")
short_otu.t$ID <- substr(short_otu.t$SampleID,1,nchar(short_otu.t$SampleID)-2)
short_otu.t <- select(SampleID, ID, everything())
short_otu.t <- short_otu.t %>% select(SampleID, ID, everything())
rm(short_grouped)
rm(grouped)
by_sample <- short_otu.t %>% group_by(ID) %>% select(-1,-2) %>% summarize_each(funs(sum))
View(by_sample)
for_export <- as.data.frame(t(by_sample))
View(for_export)
for_export <- column_to_rownames(by_sample, var = "OTUID")
for_export <- as.data.frame(t(by_sample))
for_export <- column_to_rownames(by_sample, var = "ID")
for_export <- as.data.frame(t(by_sample))
View(for_export)
short_otu <- read.table("Documents/Projects/HFD Mouse Fungal/raw data/Embalmer ITS output/short_fungal_tax.txt",
comment = "",
sep = "\t",
header = TRUE,
row.names = 1)
short_otu.t <- as.data.frame(t(short_otu))
short_otu.t <- rownames_to_column(short_otu.t, var = "SampleID")
short_otu.t$ID <- substr(short_otu.t$SampleID,1,nchar(short_otu.t$SampleID)-2)
short_otu.t <- short_otu.t %>% select(SampleID, ID, everything())
by_sample <- short_otu.t %>% group_by(ID) %>% select(-1,-2) %>% summarize_each(funs(sum))
for_export <- column_to_rownames(by_sample, var = "ID")
for_export <- as.data.frame(t(by_sample))
View(for_export)
View(by_sample)
short_otu <- read.table("Documents/Projects/HFD Mouse Fungal/raw data/Embalmer ITS output/short_fungal_tax.txt",
comment = "",
sep = "\t",
header = TRUE,
row.names = 1)
short_otu.t <- as.data.frame(t(short_otu))
short_otu.t <- rownames_to_column(short_otu.t, var = "SampleID")
short_otu.t$ID <- substr(short_otu.t$SampleID,1,nchar(short_otu.t$SampleID)-2)
short_otu.t <- short_otu.t %>% select(SampleID, ID, everything())
by_sample <- short_otu.t %>% group_by(ID) %>% select(-1,-2) %>% summarize_each(funs(sum))
for_export <- column_to_rownames(by_sample, var = "ID")
View(for_export)
export <- as.data.frame(t(for_export)
export <- as.data.frame(t(for_export))
View(export)
export <- rownames_to_column(export, var = "#OTUID")
write.table(by_sample, file = "Documents/Projects/HFD Mouse Fungal/Data/ITS/short_ITS_grouped_tax.txt",
sep = "/t",
row.names = )
View(export)
write.table(by_sample, file = "Documents/Projects/HFD Mouse Fungal/Data/ITS/short_ITS_grouped_tax.txt",
sep = "/t",
row.names = FALSE,
header = TRUE)
write.table(by_sample, file = "Documents/Projects/HFD Mouse Fungal/Data/ITS/short_ITS_grouped_tax.txt",
sep = "/t",
row.names = FALSE,
col.names = TRUE)
write.table(by_sample, file = "Documents/Projects/HFD Mouse Fungal/Data/ITS/short_ITS_grouped_tax.txt",
sep = "\t",
quote = ""
row.names = FALSE,
col.names = TRUE)
write.table(export, file = "Documents/Projects/HFD Mouse Fungal/Data/ITS/short_ITS_grouped_tax.txt",
sep = "\t",
quote = ""
row.names = FALSE,
col.names = TRUE)
write.table(export, file = "Documents/Projects/HFD Mouse Fungal/Data/ITS/short_ITS_grouped_tax.txt",
sep = "\t",
quote = "",
row.names = FALSE,
col.names = TRUE)
write.table(export, file = "Documents/Projects/HFD Mouse Fungal/Data/ITS/short_ITS_grouped_tax.txt",
sep = "\t",
comment = "",
row.names = FALSE,
col.names = TRUE)
write.table(export, file = "Documents/Projects/HFD Mouse Fungal/Data/ITS/short_ITS_grouped_tax.txt",
sep = "\t",
row.names = FALSE,
col.names = TRUE)
write.table(export, file = "Documents/Projects/HFD Mouse Fungal/Data/ITS/short_ITS_grouped_tax.txt",
sep = "\t",
quote = FALSE,
row.names = FALSE,
col.names = TRUE)
write.table(export, file = "Documents/Projects/HFD Mouse Fungal/raw data/Embalmer ITS output/grouped_short_otu_tax.txt",
sep = "\t",
quote = FALSE,
row.names = FALSE,
col.names = TRUE)
27+21
48/12
48/24
48/36
48000/3
16000/12
map <- read.table("Documents/Projects/MCTs/Data/For use in class/class_map_blinded1_nutr.txt",
sep = "\t",
header = TRUE)
View(map)
map <- read.table("Documents/Projects/MCTs/Data/For use in class/class_map_blinded1_nutr.txt",
sep = "\t",
header = TRUE,
comment= "")
View(map)
map$Kstatus <- ifelse(map$Gender=="F"|map$VK <= 90, "low", map$VK)
View(map)
map$Kstatus
map$Kstatus <- ifelse(map$Gender=="F"& map$VK < 90 | map$Gender=="M"|map$VK < 120, "low",  map$VK)
map <- read.table("Documents/Projects/MCTs/Data/For use in class/class_map_blinded1_nutr.txt",
sep = "\t",
header = TRUE,
comment= "")
map$Kstatus <- ifelse(map$Gender=="F"& map$VK < 90 | map$Gender=="M"|map$VK < 120, "low",  map$VK)
map$Kstatus
map$Kstatus <- ifelse(map$Gender=="F"& map$VK < 90 | map$Gender=="M"|map$VK < 120, "low", "normal")
map$Kstatus
map <- read.table("Documents/Projects/MCTs/Data/For use in class/class_map_blinded1_nutr.txt",
sep = "\t",
header = TRUE,
comment= "")
map$Kstatus <- ifelse(map$Gender=="F"& map$VK < 90 | map$Gender=="M"|map$VK < 120, "low", "normal")
map$Kstatus
map$Folatestatus <- ifelse(map$FOLA < 400, "low", "normal")
map$Folatestatus
map$Cholstatus <- ifelse(map$Gender=="F"& map$CHOLN < 425 | map$Gender=="M"|map$CHOLN < 450, "low", "normal")
map$Cholstatus
map <- read.table("Documents/Projects/MCTs/Class/Mapping from Grace/map-subset-no-transition.txt",
sep = "\t",
header = TRUE,
comment= "")
View(map)
map$Kstatus <- ifelse(map$Gender=="F"& map$VK < 90 | map$Gender=="M"|map$VK < 120, "low", "normal")
# folate < 400
map$Folatestatus <- ifelse(map$FOLA < 400, "low", "normal")
# if female choline < 425
# if male choline < 450
map$Cholstatus <- ifelse(map$Gender=="F"& map$CHOLN < 425 | map$Gender=="M"|map$CHOLN < 450, "low", "normal")
write.table(map, "Documents/Projects/MCTs/Class/Mapping from Grace/map-with-vit-status.txt", sep = "/t")
write.table(map, "Documents/Projects/MCTs/Class/Mapping from Grace/map-with-vit-status.txt", sep = "/t", header = TRUE)
write.table(map, "Documents/Projects/MCTs/Class/Mapping from Grace/map-with-vit-status.txt", sep = "/t", col.names = TRUE, row.names = FALSE)
write.table(map, "Documents/Projects/MCTs/Class/Mapping from Grace/map-with-vit-status.txt",
sep = "/t",
quote = FALSE,
col.names = TRUE,
row.names = FALSE)
write.table(map, "Documents/Projects/MCTs/Class/Mapping from Grace/map-with-vit-status.txt",
sep = "\t",
quote = FALSE,
col.names = TRUE,
row.names = FALSE)
library(vegan)
taxa <- as.matrix(biom_data(read_biom(biom_file = "/Users/abby/Documents/Projects/MCTs/Data/Prediction/otutable-subset-n50000-s10-norm-no-soylent-collapse-UserName.biom)))
food <- as.matrix(biom_data(read_biom(biom_file = "/Users/abby/Documents/Projects/MCTs/Data/5992/foodtable_for_taxonomy-subset-collapse-UserName_L3-json.biom")))
otu <- as.matrix(biom_data(read_biom(biom_file = "/Users/abby/Documents/Projects/MCTs/Data/Prediction/otutable-subset-n50000-s10-norm-no-soylent-collapse-UserName.biom))
food <- as.matrix(biom_data(read_biom(biom_file = "/Users/abby/Documents/Projects/MCTs/Data/5992/foodtable_for_taxonomy-subset-collapse-UserName_L3-json.biom")))
library(biom)
otu <- as.matrix(biom_data(read_biom(biom_file = "/Users/abby/Documents/Projects/MCTs/Data/Prediction/otutable-subset-n50000-s10-norm-no-soylent-collapse-UserName.biom))
food <- as.matrix(biom_data(read_biom(biom_file = "/Users/abby/Documents/Projects/MCTs/Data/5992/foodtable_for_taxonomy-subset-collapse-UserName_L3-json.biom")))
otu <- as.matrix(biom_data(read_biom(biom_file = "/Users/abby/Documents/Projects/MCTs/Data/Prediction/otutable-subset-n50000-s10-norm-no-soylent-collapse-UserName.biom")))
otu <- as.matrix(biom_data(read_biom(biom_file = "/Users/abby/Documents/Projects/MCTs/Data/Prediction/otutable-subset-n50000-s10-norm-no-soylent-collapse-UserName-json.biom")))
food <- as.matrix(biom_data(read_biom(biom_file = "/Users/abby/Documents/Projects/MCTs/Data/Prediction/foodtable_for_phylogenetics-subset-no-soylent-collapse-UserName-json.biom
food <- as.matrix(biom_data(read_biom(biom_file = "/Users/abby/Documents/Projects/MCTs/Data/Prediction/foodtable_for_phylogenetics-subset-no-soylent-collapse-UserName-json.biom")))
food <- as.matrix(biom_data(read_biom(biom_file = "/Users/abby/Documents/Projects/MCTs/Data/Prediction/foodtable_for_phylogenetics-subset-no-soylent-collapse-UserName-json.biom")))
food <- as.matrix(biom_data(read_biom(biom_file = "/Users/abby/Documents/Projects/MCTs/Data/Prediction/foodtable_for_phylogenetics-subset-no-soylent-collapse-UserName-json.biom")))
otu <- t(as.matrix(biom_data(read_biom(biom_file = "/Users/abby/Documents/Projects/MCTs/Data/Prediction/otutable-subset-n50000-s10-norm-no-soylent-collapse-UserName-json.biom"))))
food <- t(as.matrix(biom_data(read_biom(biom_file = "/Users/abby/Documents/Projects/MCTs/Data/Prediction/foodtable_for_phylogenetics-subset-no-soylent-collapse-UserName-json.biom"))))
my.ca <- cca(otu)
dim(my.ca$CA$u)
plot(my.ca$CA$u[,1], my.ca$CA$u[,2])
beta <- as.matrix(dist(my.ca$CA$u))
dim(beta)
rownames(beta)
dim(food)
rownames(beta) == rownames(food)
foodhat <- food
for(i in 1:nrow(beta)){foodhat[i,] <- food[order(beta[i])[2],]}
cor(food, foodhat)
cor(as.numeric(food), as.numeric(foodhat))
foodhat[1:10,1:10]
food[1:10,1:10]
for(i in 1:nrow(beta)){foodhat[i,] <- food[order(beta[i,])[2],]}
foodhat[1:10,1:10]
cor(as.numeric(food), as.numeric(foodhat))
foodhat.mc <- food
for(i in 1:nrow(beta)){foodhat.mc[i,] <- food[sample((1:nrow(food))[-i])[1],]}
cor(as.numeric(food), as.numeric(foodhat.mc))
for(i in 1:nrow(beta)){foodhat.mc[i,] <- food[sample((1:nrow(food))[-i])[1],]}
cor(as.numeric(food), as.numeric(foodhat.mc))
for(i in 1:nrow(beta)){foodhat.mc[i,] <- food[sample((1:nrow(food))[-i])[1],]}
cor(as.numeric(food), as.numeric(foodhat.mc))
for(i in 1:nrow(beta)){foodhat.mc[i,] <- food[sample((1:nrow(food))[-i])[1],]}
cor(as.numeric(food), as.numeric(foodhat.mc))
for(i in 1:nrow(beta)){foodhat.mc[i,] <- food[sample((1:nrow(food))[-i])[1],]}
cor(as.numeric(food), as.numeric(foodhat.mc))
for(i in 1:nrow(beta)){foodhat.mc[i,] <- food[sample((1:nrow(food))[-i])[1],]}
cor(as.numeric(food), as.numeric(foodhat.mc))
food[1:10,1:10]
?cca()
?dist()
plot(my.ca$CA$u[,1], my.ca$CA$u[,2])
my.ca <- cca(otu)
dim(my.ca$CA$u)
plot(my.ca$CA$u[,1], my.ca$CA$u[,2])
View(my.ca$CA$u)
plot(my.ca$CA$u[,1], my.ca$CA$u[,2])
beta <- as.matrix(dist(my.ca$CA$u))
dim(beta)
View(beta)
rownames(beta)
dim(food)
rownames(beta) == rownames(food)
View(beta)
view(my.ca$CA$u)
View(my.ca$CA$u)
View(dist(my.ca$CA$u))
View(as.matrix(dist(my.ca$CA$u)))
d.chisq <- as.matrix(dist(my.ca$CA$u[,1:2]))
beta <- as.matrix(dist(my.ca$CA$u[,1:2]))
dim(beta)
View(beta)
rownames(beta)
dim(food)
rownames(beta) == rownames(food)
foodhat <- food
cor(food,foodhat)
cor(as.numeric(food), as.numeric(foodhat))
foodhat[1:10,1:10]
food[1:10,1:10]
for(i in 1:nrow(beta)){foodhat[i,] <- food[order(beta[i,])[2],]}
foodhat[1:10,1:10]
cor(as.numeric(food), as.numeric(foodhat))
foodhat.mc <- food
for(i in 1:nrow(beta)){foodhat.mc[i,] <- food[sample((1:nrow(food))[-i])[1],]}
cor(as.numeric(food), as.numeric(foodhat.mc))
for(i in 1:nrow(beta)){foodhat.mc[i,] <- food[sample((1:nrow(food))[-i])[1],]}
cor(as.numeric(food), as.numeric(foodhat.mc))
for(i in 1:nrow(beta)){foodhat[i,] <- food[order(beta[i,])[2],]}
foodhat[1:10,1:10]
cor(as.numeric(food), as.numeric(foodhat))
beta <- as.matrix(dist(my.ca$CA$u[,1:10])) # updated this based on the code in Dan's course browser
dim(beta)
rownames(beta)
dim(food)
rownames(beta) == rownames(food)
foodhat <- food
cor(food,foodhat)
cor(as.numeric(food), as.numeric(foodhat))
foodhat[1:10,1:10]
food[1:10,1:10]
for(i in 1:nrow(beta)){foodhat[i,] <- food[order(beta[i,])[2],]}
foodhat[1:10,1:10]
cor(as.numeric(food), as.numeric(foodhat))
foodhat.mc <- food
for(i in 1:nrow(beta)){foodhat.mc[i,] <- food[sample((1:nrow(food))[-i])[1],]}
cor(as.numeric(food), as.numeric(foodhat.mc))
beta <- as.matrix(dist(my.ca$CA$u[,1:15])) # updated this based on the code in Dan's course browser
dim(beta)
rownames(beta)
View(beta)
beta <- as.matrix(dist(my.ca$CA$u)) # updated this based on the code in Dan's course browser
dim(beta)
rownames(beta)
dim(food)
rownames(beta) == rownames(food)
foodhat <- food
cor(as.numeric(food), as.numeric(foodhat))
foodhat[1:10,1:10]
food[1:10,1:10]
for(i in 1:nrow(beta)){foodhat[i,] <- food[order(beta[i,])[2],]}
foodhat[1:10,1:10]
cor(as.numeric(food), as.numeric(foodhat))
foodhat.mc <- food
for(i in 1:nrow(beta)){foodhat.mc[i,] <- food[sample((1:nrow(food))[-i])[1],]}
cor(as.numeric(food), as.numeric(foodhat.mc))
View(food)
View(otu)
sum(otu[1])
sum(otu[,1])
sum(otu[1,])
otu[1,]
View(food)
?sweep()
norm.food <- sweep(food, 1, rowSums(food), "/")
sum(norm.food[1,])
dim(norm.food)
rownames(beta) == rownames(norm.food)
foodhat <- norm.food
cor(as.numeric(norm.food), as.numeric(foodhat))
foodhat[1:10,1:10]
food[1:10,1:10]
foodhat <- norm.food
View(foodhat)
View(norm.food)
cor(as.numeric(norm.food), as.numeric(foodhat))
foodhat[1:10,1:10]
for(i in 1:nrow(beta)){
foodhat[i,] <- norm.food[order(beta[i,])[2],]
}
foodhat[1:10,1:10]
cor(as.numeric(norm.food), as.numeric(foodhat))
foodhat.mc <- food
foodhat.mc <- norm.food
for(i in 1:nrow(beta)){foodhat.mc[i,] <- norm.food[sample((1:nrow(norm.food))[-i])[1],]}
cor(as.numeric(food), as.numeric(foodhat.mc))
foodhat[1,]
order(beta[1,])[2]
order(beta[2,])[2]
order(beta)
ord.food <- norm.food[order(beta)]
View(ord.food)
as.data.frame(ord.food)
ord.food <- as.data.frame(ord.food)
rm(ord.food)
rm(d.chisq)
dim(beta)
View(beta)
View(oder(beta))
View(order(beta))
?sort()
?order()
View(beta[1])
beta <- as.matrix(dist(my.ca$CA$u))
author: "Abby"
---
title: "Data analysis and cleaning of MCT Study"
author: "Abby"
date: "April 20, 2017"
output: html_document
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
---
title: "Data analysis and cleaning of MCT Study"
author: "Abby"
date: "April 20, 2017"
output: pdf_document
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
## R Markdown
This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r cars}
summary(cars)
```
## Including Plots
You can also embed plots, for example:
```{r pressure, echo=FALSE}
plot(pressure)
```
Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
summary(cars)
plot(pressure)
plot(pressure)
mean(subgroup$PROT)
library(rmarkdown)
library(knitr)
library(ggplot2)
setwd("/Users/abby/Documents/Projects/zebra/raw/") # set to zebra directory
map <- read.table("new_map_with_treatment.txt", sep = "\t", header = TRUE, comment = "") #load mapping file
setwd("/Users/abby/Documents/Projects/zebra/lib")
for (id in unique(map$UserName)){
subgroup <- map[map$UserName == id,]
render("MCTS_pdf.rmd",output_file = paste0('report.', id, '.pdf'),"pdf_document")
}
ggplot(subgroup, aes(x=factor(StudyDayNo), y=PROT)) + stat_summary(fun.y="mean", geom="bar")
ggplot(subgroup, aes(x=factor(StudyDayNo), y=PROT)) + stat_summary(fun.y="mean", geom="bar")
plot(subgroup$StudyDayNo,subgroup$PROT,type = "b", col = "red", xlab = "Day", ylab = "Prot Amount",main = "Protein Intake")
ggplot(subgroup, aes(x=factor(StudyDayNo), y=PROT)) + stat_summary(fun.y="mean", geom="bar")
# Chunk 1
mean(subgroup$PROT)
# Chunk 2
mean(subgroup$TFAT)
# Chunk 3
mean(subgroup$KCAL)
# Chunk 4
mean(subgroup$CARB)
plot(subgroup$StudyDayNo,subgroup$PROT,type = "b", col = "red", xlab = "Day", ylab = "Prot Amount",main = "Protein Intake")
ggplot(subgroup, aes(x=factor(StudyDayNo), y=PROT)) + stat_summary(fun.y="mean", geom="bar")
plot(subgroup$StudyDayNo,subgroup$PROT,type = "b", col = "red", xlab = "Day", ylab = "Prot Amount",main = "Protein Intake")
ggplot(subgroup, aes(x=factor(StudyDayNo), y=PROT)) + stat_summary(fun.y="mean", geom="bar")
library(knitr)
ggplot(subgroup, aes(x=factor(StudyDayNo), y=PROT)) + stat_summary(fun.y="mean", geom="bar")
ggplot(subgroup, aes(x=factor(StudyDayNo), y=PROT)) + stat_summary(fun.y="mean", geom="bar")
plot(subgroup$StudyDayNo,subgroup$PROT,type = "b", col = "red", xlab = "Day", ylab = "Prot Amount",main = "Protein Intake")
ggplot(subgroup, aes(x=factor(StudyDayNo), y=PROT)) + stat_summary(fun.y="mean", geom="bar")
fig.show = "hold"
ggplot(subgroup, aes(x=factor(StudyDayNo), y=PROT)) + stat_summary(fun.y="mean", geom="bar")
ggplot(subgroup, aes(x=factor(StudyDayNo), y=PROT)) + stat_summary(fun.y="mean", geom="bar") + fig.show = hold
ggplot(subgroup, aes(x=factor(StudyDayNo), y=PROT)) + stat_summary(fun.y="mean", geom="bar") + fig.show = "hold""
ggplot(subgroup, aes(x=factor(StudyDayNo), y=PROT)) + stat_summary(fun.y="mean", geom="bar") + fig.show = "hold""
ggplot(subgroup, aes(x=factor(StudyDayNo), y=PROT)) + stat_summary(fun.y="mean", geom="bar")
fig.show = "hold"
fig.show = "hold"
ggplot(subgroup, aes(x=factor(StudyDayNo), y=PROT)) + stat_summary(fun.y="mean", geom="bar")
library(rmarkdown)
library(knitr)
library(ggplot2)
setwd("/Users/abby/Documents/Projects/zebra/raw/") # set to zebra directory
map <- read.table("new_map_with_treatment.txt", sep = "\t", header = TRUE, comment = "") #load mapping file
setwd("/Users/abby/Documents/Projects/zebra/lib")
for (id in unique(map$UserName)){
subgroup <- map[map$UserName == id,]
render("MCTS_pdf.rmd",output_file = paste0('report.', id, '.pdf'),"pdf_document")
}
for (id in unique(map$UserName)){
subgroup <- map[map$UserName == id,]
render("MCTS_pdf.md",output_file = paste0('report.', id, '.pdf'),"pdf_document")
}
