colpal <- sample(colpal(length(unique(merge_food$rn))))
tick_label <- seq(1:17)
ggplot(merge_food, aes(x = StudyDayNo, y = value, fill = rn)) +
geom_bar(stat = "identity") +
scale_x_discrete(drop = FALSE,labels=c(tick_label)) +
scale_fill_manual(values =colpal)+
theme_classic(base_family = "Helvetica") +
theme(strip.text.y = element_text(angle = 0, size = 8, face = "italic", family = "Helvetica"),
axis.text.x = element_text( hjust = 1, family = "Helvetica"),
plot.title =  element_text(hjust = 0.5, family = "Helvetica"),
strip.background = element_rect(color = "grey")) +
guides(fill = guide_legend(reverse = FALSE,
keywidth = 1,
keyheight = 1,
ncol = 1,
title= "Food Group")) +
labs(y="Relative Abundance",x="Study Day Number")+
ggtitle("Main foods within your gut per day")
# make ggplot bar chart of top 10 most abundant species per day
#melt subtaxasp to get our dataframe in the long format for future usage
meltdf<- melt(subtaxasp)
#merge to get access to Day var
mergedf<- merge(x=meltdf, y=map, by.x = "variable", by.y= "X.SampleID", all.x=TRUE)
#convert our dataframe species (rn) column to a character
mergedf$rn <- as.character(mergedf$rn)
#series of gsub commands meant to neaten and clarify legend content
mergedf$rn <- gsub(".*s__", "", mergedf$rn)
mergedf$rn <- gsub("\\[", "",mergedf$rn)
mergedf$rn <- gsub("\\]", "",mergedf$rn)
mergedf$rn <- gsub("_", " ",mergedf$rn)
#create small abundance category
mergedf$rn[mergedf$value < 0.025] <- "<2.5% abundance"
mergedf <- mergedf %>% group_by(StudyDayNo, rn) %>% summarise(newvalue = sum(value))
#instantiate color brewer and axes tick mark amount
colpal<- colorRampPalette(brewer.pal(8,"Set3"))
colpal<- sample(colpal(length(unique(mergedf$rn))))
tick_label <- seq(1:17)
ggplot(mergedf, aes(x = StudyDayNo, y = newvalue, fill = rn)) +
geom_bar(stat = "identity") +
scale_x_discrete(drop = FALSE,labels=c(tick_label)) +
scale_fill_manual(values =colpal)+
theme_classic(base_family = "Helvetica") +
theme(strip.text.y = element_text(angle = 0, size = 8, face = "italic", family = "Helvetica"),
axis.text.x = element_text( hjust = 1, family = "Helvetica"),
plot.title =  element_text(hjust = 0.5, family = "Helvetica"),
strip.background = element_rect(color = "grey")) +
guides(fill = guide_legend(reverse = FALSE,
keywidth = 1,
keyheight = 1,
ncol = 1,
title= "Bacterial Species")) +
labs(y="Relative Abundance",x="Study Day Number")+
ggtitle("Main species within your gut per day")
source('~/Documents/Projects/zebra/bin/pc_version.R', echo=TRUE)
source('~/Documents/Projects/zebra/bin/pc_version.R', echo=TRUE)
source('~/Documents/Projects/zebra/bin/pc_version.R', echo=TRUE)
source('~/Documents/Projects/zebra/bin/pc_version.R', echo=TRUE)
source('~/Documents/Projects/zebra/bin/pc_version.R', echo=TRUE)
source('~/Documents/Projects/zebra/bin/pc_version.R', echo=TRUE)
source('~/Documents/Projects/zebra/bin/pc_version.R', echo=TRUE)
source('~/Documents/Projects/zebra/bin/pc_version.R', echo=TRUE)
source('~/Documents/Projects/zebra/bin/pc_version.R', echo=TRUE)
source('~/Documents/Projects/zebra/bin/pc_version.R', echo=TRUE)
source('~/Documents/Projects/zebra/bin/pc_version.R', echo=TRUE)
source('~/Documents/Projects/zebra/bin/pc_version.R', echo=TRUE)
source('~/Documents/Projects/zebra/bin/pc_version.R', echo=TRUE)
submap$UserName
id
source('~/Documents/Projects/zebra/bin/pc_version.R', echo=TRUE)
ggplot(long_plot, aes(x = X.SampleID, y = KCAL*PCT, fill = Macro)) +
geom_bar(stat = "identity") +
theme_classic() +
scale_fill_manual(values=colpal)+
#scale_fill_brewer(palette = colpal) +
scale_x_discrete(labels=c(tick_label))+
labs(fill = "% Macronutrient", y = "Daily reported intake (Kcal)", x = "Study Day Number") +
theme(
#axis.title.x =element_text(family = "Helvetica"), axis.title.y =element_text(family = "Helvetica"),
plot.title = element_text(hjust = 0.5))+
ggtitle("Daily macronutrient distributrion as percentage of calorie intake")
ggplot(long_plot, aes(x = X.SampleID, y = KCAL*PCT, fill = Macro)) +
geom_bar(stat = "identity") +
theme_classic() +
scale_fill_manual(values=colpal)+
#scale_fill_brewer(palette = colpal) +
scale_x_discrete(labels=c(tick_label))+
labs(fill = "% Macronutrient", y = "Daily reported intake (Kcal)", x = "Study Day Number") +
theme(
#axis.title.x =element_text(family = "Helvetica"), axis.title.y =element_text(family = "Helvetica"),
plot.title = element_text(hjust = 0.5))+
ggtitle("Daily macronutrient distributrion as percentage of calorie intake")
mean(submap$KCAL)
mean(submap$KCAL)/1000
14*mean(submap$KCAL)/1000
round(14*mean(submap$KCAL)/1000)
fiber_rec <- round(14*mean(submap$KCAL)/1000)
#instantiate color brewer and axis tick mark amounts
colpal<- colorRampPalette(brewer.pal(9,"Set3"))(37)
colpal<- sample(colpal,37, replace = FALSE)
tick_label <- seq(1:17)
#Study average for individual's fiber intake
fiber_average <-round(mean(submap$FIBE),2)
fiber_rec <- round(14*mean(submap$KCAL)/1000)
p <- ggplot(submap,aes(x = StudyDayNo,y = FIBE)) +
geom_bar(aes(fill = colpal[1]),stat = "identity",position = "dodge") + scale_x_discrete(labels = abbreviate)+
geom_hline(size=.75,col="red",yintercept = fiber_rec) + #Recommended fiber level
geom_hline(size=.75,col="gold",yintercept = fiber_average)  #Recommended fiber level
#fill = studydayno
p+guides(fill=F) +
theme_classic(base_family = "Helvetica")+
theme(plot.title = element_text(hjust = 0.5)) +
scale_x_discrete(labels=c(tick_label))+
scale_fill_manual(values = colpal)+
labs(x="Study Day Number", y= "Fiber levels in grams")+
ggtitle("Daily Fiber Intake")
ggplot(merge_food, aes(x = StudyDayNo, y = value, fill = rn)) +
geom_bar(stat = "identity") +
scale_x_discrete(drop = FALSE,labels=c(tick_label)) +
scale_fill_manual(values =colpal)+
theme_classic(base_family = "Helvetica") +
theme(axis.text.x = element_text( hjust = 0.5, family = "Helvetica"),
plot.title =  element_text(hjust = 0.5, family = "Helvetica"),
strip.background = element_rect(color = "grey")) +
guides(fill = guide_legend(reverse = FALSE,
keywidth = 1,
keyheight = 1,
ncol = 1,
title= "Food Group")) +
labs(y="Relative Abundance",x="Study Day Number")+
ggtitle("Food groups consumed each day")
# make ggplot bar chart of top 10 most abundant species per day
#melt subtaxasp to get our dataframe in the long format for future usage
meltdf<- melt(subtaxasp)
#merge to get access to Day var
mergedf<- merge(x=meltdf, y=map, by.x = "variable", by.y= "X.SampleID", all.x=TRUE)
#convert our dataframe species (rn) column to a character
mergedf$rn <- as.character(mergedf$rn)
#series of gsub commands meant to neaten and clarify legend content
mergedf$rn <- gsub(".*s__", "", mergedf$rn)
mergedf$rn <- gsub("\\[", "",mergedf$rn)
mergedf$rn <- gsub("\\]", "",mergedf$rn)
mergedf$rn <- gsub("_", " ",mergedf$rn)
#create small abundance category
mergedf$rn[mergedf$value < 0.025] <- "<2.5% abundance"
mergedf <- mergedf %>% group_by(StudyDayNo, rn) %>% summarise(newvalue = sum(value))
#instantiate color brewer and axes tick mark amount
colpal<- colorRampPalette(brewer.pal(8,"Set3"))
colpal<- sample(colpal(length(unique(mergedf$rn))))
tick_label <- seq(1:17)
ggplot(mergedf, aes(x = StudyDayNo, y = newvalue, fill = rn)) +
geom_bar(stat = "identity") +
scale_x_discrete(drop = FALSE,labels=c(tick_label)) +
scale_fill_manual(values =colpal)+
theme_classic(base_family = "Helvetica") +
theme(axis.text.x = element_text( hjust = 0.5, family = "Helvetica"),
plot.title =  element_text(hjust = 0.5, family = "Helvetica"),
strip.background = element_rect(color = "grey")) +
guides(fill = guide_legend(reverse = FALSE,
keywidth = 1,
keyheight = 1,
ncol = 1,
title= "Bacterial Species")) +
labs(y="Relative Abundance",x="Study Day Number")+
ggtitle("Bacterial species in your gut each day")
ggplot(PCOA) +
geom_point(aes(x=PC1,y=PC2, col=UserName, shape=UserName,
size=ifelse(PCOA$UserName %in% id == TRUE,15,5),
fill=ifelse(PCOA$UserName %in% id == TRUE,color = "black")),
alpha=.060,
stroke=3) + #gives axes and item of focus
#stat_ellipse(alpha = 0.3, geom="polygon", linetype=2, aes(x = PC1, y = PC2, fill = PCOA$UserName %in% id))+
labs(title=paste0("Beta diversity of your gut microbiome - PCOA -  ", id) ) +
guides(colour = guide_legend(override.aes = list(size=5,alpha=1))) +
scale_shape_manual(values=shape_pal3) +
scale_color_manual(values=colpal)+
theme_classic(base_family = "Helvetica") +
theme(legend.position = "bottom",
plot.title = element_text(size = 18, hjust = 0.5))
ggplot(PCOA) +
geom_point(aes(x=PC1,y=PC2, col=UserName, shape=UserName,
size=ifelse(PCOA$UserName %in% id == TRUE,15,5),
fill=ifelse(PCOA$UserName %in% id == TRUE, UserName), color = "black")),
ggplot(PCOA) +
geom_point(aes(x=PC1,y=PC2, col=UserName, shape=UserName,
size=ifelse(PCOA$UserName %in% id == TRUE,15,5),
fill=ifelse(PCOA$UserName %in% id == TRUE, UserName, NULL), color = "black")),
ggplot(PCOA) +
geom_point(aes(x=PC1,y=PC2, col=UserName, shape=UserName,
size=ifelse(PCOA$UserName %in% id == TRUE,15,5),
fill=ifelse(PCOA$UserName %in% id == TRUE, UserName, NULL), color = "black"),
alpha=.060,
stroke=3) + #gives axes and item of focus
#stat_ellipse(alpha = 0.3, geom="polygon", linetype=2, aes(x = PC1, y = PC2, fill = PCOA$UserName %in% id))+
labs(title=paste0("Beta diversity of your gut microbiome - PCOA -  ", id) ) +
guides(colour = guide_legend(override.aes = list(size=5,alpha=1))) +
scale_shape_manual(values=shape_pal3) +
scale_color_manual(values=colpal)+
theme_classic(base_family = "Helvetica") +
theme(legend.position = "bottom",
plot.title = element_text(size = 18, hjust = 0.5))
ggplot(PCOA) +
geom_point(aes(x=PC1,y=PC2, col=UserName, shape=UserName,
size=ifelse(PCOA$UserName %in% id == TRUE,15,5),
fill=UserName, color = "black"),
alpha=.060,
stroke=3) + #gives axes and item of focus
#stat_ellipse(alpha = 0.3, geom="polygon", linetype=2, aes(x = PC1, y = PC2, fill = PCOA$UserName %in% id))+
labs(title=paste0("Beta diversity of your gut microbiome - PCOA -  ", id) ) +
guides(colour = guide_legend(override.aes = list(size=5,alpha=1))) +
scale_shape_manual(values=shape_pal3) +
scale_color_manual(values=colpal)+
theme_classic(base_family = "Helvetica") +
theme(legend.position = "bottom",
plot.title = element_text(size = 18, hjust = 0.5))
ggplot(PCOA) +
geom_point(aes(x=PC1,y=PC2, col=UserName, shape=UserName,
size=ifelse(PCOA$UserName %in% id == TRUE,15,5),
fill=UserName),
alpha=.060,
stroke=3) + #gives axes and item of focus
#stat_ellipse(alpha = 0.3, geom="polygon", linetype=2, aes(x = PC1, y = PC2, fill = PCOA$UserName %in% id))+
labs(title=paste0("Beta diversity of your gut microbiome - PCOA -  ", id) ) +
guides(colour = guide_legend(override.aes = list(size=5,alpha=1))) +
scale_shape_manual(values=shape_pal3) +
scale_color_manual(values=colpal)+
theme_classic(base_family = "Helvetica") +
theme(legend.position = "bottom",
plot.title = element_text(size = 18, hjust = 0.5))
ggplot(PCOA) +
geom_point(aes(x=PC1,y=PC2, col=UserName, shape=UserName,
size=ifelse(PCOA$UserName %in% id == TRUE,15,5)),
alpha=.060,
stroke=3) + #gives axes and item of focus
#stat_ellipse(alpha = 0.3, geom="polygon", linetype=2, aes(x = PC1, y = PC2, fill = PCOA$UserName %in% id))+
labs(title=paste0("Beta diversity of your gut microbiome - PCOA -  ", id) ) +
guides(colour = guide_legend(override.aes = list(size=5,alpha=1))) +
scale_shape_manual(values=shape_pal3) +
scale_color_manual(values=colpal)+
theme_classic(base_family = "Helvetica") +
theme(legend.position = "bottom",
plot.title = element_text(size = 18, hjust = 0.5))
#create PCOA plot of beta diversities of pertinent subjects
betad<-vegdist(betataxa, method="bray", binary=FALSE, diag=FALSE, upper=FALSE,
na.rm = FALSE)
#betad as matrix
betad <- as.matrix(dist(betad))
#column name is "IDs"
IDs <-colnames(betad)
# Run the pcoa() function on the beta diversity table, and store the vectors generated as a dataframe
PCOA <- data.frame(pcoa(betad)$vectors)
#create vector with placeholders
new_names <- rep("",ncol(PCOA))
#create for loop which gives column names (currently named "axis") the name of PC1, PC2, PC3.. so forth
#Each column for the PCOA matrix is a new PC (number).
for(i in 1:ncol(PCOA)){
new_names[i] <- paste("PC",i,sep="")
}
#code above uses a for loop - from the range of 1 to the number of columns in the PCOA
#matrix, the for loop accesses the new name variable and names it PC + i (which is 1,2,3  depending on column
#as indicated by for loop - for loop increases in increments of 1 (i goes up by 1) and goes thru columns)
#new_names (PC1, PC2, etc..) replace the current colnames
names(PCOA) <- new_names
#creates column that is sampleID
PCOA$X.SampleID <- IDs
#merge map and PCOA by SampleID - select both lines and run together - won't work otherwise
PCOA <- merge(PCOA, map, by = 'X.SampleID')
PCOA <- merge(PCOA, map, by = 'UserName')
#### Plot PCOA ####
#instantiate shape and color palettes
shape_pal <- c(1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8)
shape_pal2 <- c(1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3)
shape_pal3 <- c(15,19,17,18,15,19,17,18,15,19,17,18,15,19,17,18,15,19,17,18,15,19,17,18,15,19,17,18,15,19,17,18,15,19,17,18,15,19,17,18)
colpal<- colorRampPalette(brewer.pal(9,"Set3"))(37)
id <- gsub("_", " ",id)
# PCOA[PCOA$UserName %in% id,]
#dt[dt$fct %in% vc,]
#PCOA1<- PCOA[PCOA$UserName %in% id,]
#dubloon %>% filter(value==TRUE)
#filter(PCOA, UserName %in% id)
#use ggplot to plot
ggplot(PCOA) +
geom_point(aes(x=PC1,y=PC2, col=UserName, shape=UserName,
size=ifelse(PCOA$UserName %in% id == TRUE,15,5)),
alpha=.060,
stroke=3) + #gives axes and item of focus
#stat_ellipse(alpha = 0.3, geom="polygon", linetype=2, aes(x = PC1, y = PC2, fill = PCOA$UserName %in% id))+
labs(title=paste0("Beta diversity of your gut microbiome - PCOA -  ", id) ) +
guides(colour = guide_legend(override.aes = list(size=5,alpha=1))) +
scale_shape_manual(values=shape_pal3) +
scale_color_manual(values=colpal)+
theme_classic(base_family = "Helvetica") +
theme(legend.position = "bottom",
plot.title = element_text(size = 18, hjust = 0.5))
# geom_point(aes(x=PC1,y=PC2, col=ifelse(PCOA$UserName %in% id == TRUE,"black", ifelse(PCOA$UserName %in% id ==FALSE,      UserName)), shape=UserName), alpha=.060, stroke=2) +#gives axes and item of focus
#values= colpal, col = username
#col=ifelse(PCOA$UserName %in% id == TRUE,"black",UserName)
#ifelse(PCOA$UserName %in% id == TRUE, stroke=4,stroke=1)
ggplot(PCOA) +
geom_point(aes(x=PC1,y=PC2, col=UserName, shape=UserName,
size=ifelse(PCOA$UserName %in% id == TRUE,15,5), fill = UserName),
alpha=.060,
stroke=3) + #gives axes and item of focus
#stat_ellipse(alpha = 0.3, geom="polygon", linetype=2, aes(x = PC1, y = PC2, fill = PCOA$UserName %in% id))+
labs(title=paste0("Beta diversity of your gut microbiome - PCOA -  ", id) ) +
guides(colour = guide_legend(override.aes = list(size=5,alpha=1))) +
scale_shape_manual(values=shape_pal3) +
scale_color_manual(values=colpal)+
theme_classic(base_family = "Helvetica") +
theme(legend.position = "bottom",
plot.title = element_text(size = 18, hjust = 0.5))
ggplot(PCOA) +
geom_point(aes(x=PC1,y=PC2, col=UserName, shape=UserName,
size=ifelse(PCOA$UserName %in% id == TRUE,15,5)),
alpha=.060,
stroke=3) + #gives axes and item of focus
#stat_ellipse(alpha = 0.3, geom="polygon", linetype=2, aes(x = PC1, y = PC2, fill = PCOA$UserName %in% id))+
labs(title=paste0("Beta diversity of your gut microbiome - PCOA -  ", id) ) +
guides(colour = guide_legend(override.aes = list(size=5,alpha=1))) +
scale_shape_manual(values=shape_pal3) +
scale_color_manual(values=colpal)+
theme_classic(base_family = "Helvetica") +
theme(legend.position = "bottom",
plot.title = element_text(size = 18, hjust = 0.5))
ggplot(PCOA, aes(x = PC1, y = PC2)) +
geom_point(aes(col=UserName, shape=UserName,size=ifelse(PCOA$UserName %in% id == TRUE,15,5)),alpha=.060, stroke=3) +
geom_point(aes(color = "black") +
labs(title=paste0("Beta diversity of your gut microbiome - PCOA -  ", id) ) +
guides(colour = guide_legend(override.aes = list(size=5,alpha=1))) +
scale_shape_manual(values=shape_pal3) +
scale_color_manual(values=colpal)+
theme_classic(base_family = "Helvetica") +
theme(legend.position = "bottom",
plot.title = element_text(size = 18, hjust = 0.5))
# geom_point(aes(x=PC1,y=PC2, col=ifelse(PCOA$UserName %in% id == TRUE,"black", ifelse(PCOA$UserName %in% id ==FALSE,      UserName)), shape=UserName), alpha=.060, stroke=2) +#gives axes and item of focus
#values= colpal, col = username
#col=ifelse(PCOA$UserName %in% id == TRUE,"black",UserName)
#ifelse(PCOA$UserName %in% id == TRUE, stroke=4,stroke=1)
ggplot(PCOA, aes(x = PC1, y = PC2)) +
ggplot(data = PCOA, aes(x = PC1, y = PC2)) +
geom_point(aes(col=UserName, shape=UserName,size=ifelse(PCOA$UserName %in% id == TRUE,15,5)),alpha=.060, stroke=3) +
geom_point(aes(color = "black")) +
labs(title=paste0("Beta diversity of your gut microbiome - PCOA -  ", id) ) +
guides(colour = guide_legend(override.aes = list(size=5,alpha=1))) +
scale_shape_manual(values=shape_pal3) +
scale_color_manual(values=colpal)+
theme_classic(base_family = "Helvetica") +
theme(legend.position = "bottom",
plot.title = element_text(size = 18, hjust = 0.5))
ggplot(data = PCOA, aes(x = PC1, y = PC2)) +
geom_point(aes(col=UserName, shape=UserName,size=ifelse(PCOA$UserName %in% id == TRUE,15,5)),alpha=.060, stroke=3) +
geom_point(aes(color = "black")) +
labs(title=paste0("Beta diversity of your gut microbiome - PCOA -  ", id)))
ggplot(data = PCOA, aes(x = PC1, y = PC2)) +
geom_point(aes(col=UserName, shape=UserName,size=ifelse(PCOA$UserName %in% id == TRUE,15,5)),alpha=.060, stroke=3) +
geom_point(aes(color = "black")))
ggplot(data = PCOA, aes(x = PC1, y = PC2)) +
geom_point(aes(col=UserName, shape=UserName,size=ifelse(PCOA$UserName %in% id == TRUE,15,5)),alpha=.060, stroke=3) +
geom_point(aes(color = "black"))
ggplot(PCOA) +
geom_point(aes(x=PC1,y=PC2, col=UserName, shape=UserName,
size=ifelse(PCOA$UserName %in% id == TRUE,15,5)),
alpha=.060,
stroke=3))
ggplot(PCOA) +
geom_point(aes(x=PC1,y=PC2, col=UserName, shape=UserName,
size=ifelse(PCOA$UserName %in% id == TRUE,15,5)),
alpha=.060,
stroke=3)
ggplot(PCOA) +
geom_point(aes(x=PC1,y=PC2, col=UserName, shape=ifelse(PCOA$UserName %in% id == TRUE, 1,2),
size=ifelse(PCOA$UserName %in% id == TRUE,15,5)),
alpha=.060,
stroke=3)
PCOA$UserName
PCOA$UserName==id
ggplot(PCOA) +
geom_point(aes(x=PC1,y=PC2, col=UserName, shape=ifelse(PCOA$UserName %in% id == TRUE, 1 ,2),
size=ifelse(PCOA$UserName %in% id == TRUE,15,5)),
alpha=.060,
stroke=3) + #gives axes and item of focus
#stat_ellipse(alpha = 0.3, geom="polygon", linetype=2, aes(x = PC1, y = PC2, fill = PCOA$UserName %in% id))+
labs(title=paste0("Beta diversity of your gut microbiome - PCOA -  ", id) ) +
guides(colour = guide_legend(override.aes = list(size=5,alpha=1))) +
scale_shape_manual(values=shape_pal3) +
scale_color_manual(values=colpal)+
theme_classic(base_family = "Helvetica") +
theme(legend.position = "bottom",
plot.title = element_text(size = 18, hjust = 0.5))
ggplot(PCOA) +
geom_point(aes(x=PC1,y=PC2, col=UserName, shape=UserName,
size=ifelse(PCOA$UserName %in% id == TRUE,15,5)),
alpha=.060,
stroke=3) + #gives axes and item of focus
#stat_ellipse(alpha = 0.3, geom="polygon", linetype=2, aes(x = PC1, y = PC2, fill = PCOA$UserName %in% id))+
labs(title=paste0("Beta diversity of your gut microbiome - PCOA -  ", id) ) +
guides(colour = guide_legend(override.aes = list(size=5,alpha=1))) +
scale_shape_manual(values=shape_pal3) +
scale_color_manual(values=colpal)+
theme_classic(base_family = "Helvetica") +
theme(legend.position = "bottom",
plot.title = element_text(size = 18, hjust = 0.5))
source('~/Documents/Projects/zebra/bin/pc_version.R', echo=TRUE)
source('~/Documents/Projects/zebra/bin/pc_version.R', echo=TRUE)
#Load packages required for the project
library(rmarkdown)
library(knitr)
library(ggplot2)
library(reshape2)
library(tibble)
library(data.table)
library(vegan)
library(ape)
library(RColorBrewer)
library(dplyr)
#library(extrafont)
####Pre Processing####
#set to working directory to project zebra directory
setwd("/Users/abby/Documents/Projects/zebra/")
#setwd("C:/Users/arzan/Desktop/Bioinformatics/MCT/GIT/zebra")
#Read in sampleID and nutrition files and assign them to pertinent variables
nutrition_table <- read.table("raw/Totals_to_use.txt", sep = "\t", header = TRUE, comment = "")
SampleID_map <- read.table("raw/SampleID_map.txt", sep = "\t", header = TRUE, comment = "")
#merge the two to create the mapping file
map <-  merge(x=nutrition_table, y=SampleID_map, by= "X.SampleID")
#read in the food table and assign it to pertinent variable
food_map <-  read.table("raw/mct.food.otu.txt", sep = "\t", header = TRUE, comment = "")
# read in the food taxonomy mapping file
food_taxa <- read.table("raw/mct.taxonomy.txt", sep = "\t", header = TRUE, comment = "")
# remove water from the food_map df
# find descriptions of water
water <- food_taxa %>% filter(FoodID != "92410110" &
FoodID != "92410210"&
FoodID != "92410250"&
FoodID != "94000100"&
FoodID != "94100100"&
FoodID != "94100200" &
FoodID != "94100300" &
FoodID != "94210100" &
FoodID != "94210200" &
FoodID != "94210300" &
FoodID != "94220200" &
FoodID != "94300100")
#remove water
food_taxa <- food_taxa %>% filter(taxonomy %in% water$taxonomy)
# subset to remove water from the food table
food_map <- food_map[food_map$X.FOODID %in% food_taxa$Main.food.description,]
# clean up environment
rm(water)
#set the row names of the food map file to the taxonomy strings
rownames(food_map) <- food_map$taxonomy
#remove the taxonomy string column and the food names column (redundant)
food_map$taxonomy <- NULL #removing taxa string column
food_map$X.FOODID <- NULL #removing food names column
# collapse by food level
# Summarizing at different levels - makes changes to everything downstream
split <- strsplit(rownames(food_map),";")             # Split and rejoin on lv7 to get species level
foodStrings <- sapply(split,function(x) paste(x[1:1],collapse=";"))
food_map <- rowsum(food_map,foodStrings)
# make food relative abundance
food_map <- sweep(food_map, 2, colSums(food_map), "/")
#Bring food taxa strings from row names to first column using setDT. Food_map is now analagous to subtaxasp
#food_map <- setDT(food_map, keep.rownames = TRUE)
#melt food_map to create a data drame called melted_food to merge by SampleIDs
melted_food<- melt(food_map)
#merge melted_food and map by variable (SampleID -- called variable in melted food file - so we use by.x)
merged_food<- merge(x=melted_food, y=map, by.x = "variable", by.y= "X.SampleID", all.x=TRUE)
colnames(merged_food)[3] <- "UserName" #Change col name from UserName.x to UserName - compatibility purposes
colnames(merged_food)[4] <- "StudyDayNo" #Change col name from StudyDayNo.x to StudyDayNo - compatibility purposes
#### Read in taxa table ####
taxa <- read.delim("raw/youbet.txt", row =1)
#### Summarizing ####
split <- strsplit(rownames(taxa),";")                               # Split and rejoin on lv7
taxaStrings <- sapply(split,function(x) paste(x[1:7],collapse=";")) # level 7 is species, 8 is strain
taxa <- rowsum(taxa,taxaStrings)                                    # Collapse by taxonomy name
#### Manicure the samplenames, grab latest (mct study only and only when re-running things from a new taxa table)
#colnames(taxa) = gsub(".S[0-9]+.R1.001","",colnames(taxa));      # Clean old plate IDs
#taxa = taxa[,order(colnames(taxa))];              # Sort nicely by sample ID
#taxa = taxa[,-(grep("L0",colnames(taxa))-1)];     # Keep new runs only
#colnames(taxa) = gsub(".S[0-9]+.L001.R1.001","",colnames(taxa)); # Clean new plate IDs
#### Massaging ####
taxa = taxa[,colSums(taxa)>=20000]                  #use taxa var to create OTU table (counts)
staxa = taxa                                         #staxa is utilized for relative abundances, taxa for counts
staxa = sweep(staxa,2,colSums(staxa),'/');           # Normalize
staxa = staxa[order(rowMeans(staxa),decreasing=F),]; # Sort by avg. abundance
staxa = staxa[rowMeans(staxa) >= 0.0001,];            # Drop rare taxa (abundance)
staxa = staxa[rowSums(staxa > 0) > 10,];             # Drop rare taxa (prevalence)
###Instantiate Plots###
colnames(map)[2] <- "UserName" #Change col name from UserName.x to UserName - compatibility purposes
colnames(map)[3] <- "StudyDayNo" #Change col name from StudyDayNo.x to StudyDayNo - compatibility purposes
id in unique(map$UserName)
for (id in unique(map$UserName)){
#microbiome iteration
submap <- map[map$UserName == id,] #create submap variable we can use to iterate through
subtaxa <- staxa[(colnames(staxa) %in% submap[,"X.SampleID"])] #create subtaxa variable - looks at each subject individually
# sort the subtaxa df by abundance
subtaxa <- subtaxa[order(rowMeans(subtaxa), decreasing = TRUE),]
subtaxasp <- setDT(subtaxa, keep.rownames=TRUE) #make rownames first column of frame
#food iteration
macro_totals <-  round(mean(submap$PROT),2) +  round(mean(submap$TFAT),2) + round(mean(submap$CARB),2)
sub_foodmap <- merged_food[merged_food$UserName == id,] #sub food variable allows us to access one subject at a time (like submap)
sub_food <- food_map[(colnames(food_map) %in% sub_foodmap[,"variable"])]#sub food variable looks at each subject individually
sub_foodsp <- setDT(sub_food, keep.rownames = TRUE) #make rownames first column of frame
#alpha diversity iteration
subtaxaalpha <- taxa[(colnames(taxa) %in% submap[,"X.SampleID"])] #subtaxa variable used for alpha diversity
#beta diversity iteration
betataxa<- staxa[(colnames(staxa) %in% map[,"X.SampleID"])] #Create table with just taxa and subjects
betataxa <- t(betataxa) #transpose
#rendering
render(input = "lib/MCTS_pdf_mcb_7_3.Rmd",output_file = paste0('report.', id, '.pdf'),"pdf_document",
output_dir = "output/output")
}
source('~/Documents/Projects/zebra/bin/pc_version.R', echo=TRUE)
