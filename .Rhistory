names(vect)
vect2 <- c(11,2,Na)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo", "bar", "norf"
)
identical(vect1,vect2)
identical(vect,vect2)
vect["bar"]
vect[c("foo"),"bar"]
vect[c("foo", "bar")]
library(swirl)
swirl()
info()
main()
ls
swirl
swirl()
sswirl())
swirl()
library(swirl)
swirl()
library(rmarkdown)
library(knitr)
library(ggplot2)
library(reshape2)
library(tibble)
library(data.table)
library(vegan)
library(ape)
library(RColorBrewer)
library(dplyr)
library(extrafont)
setwd("C:/Users/arzan/Desktop/Bioinformatics/MCT/GIT/zebra")
nutrition_table <- read.table("raw/Totals_to_use.txt", sep = "\t", header = TRUE, comment = "")
SampleID_map <- read.table("raw/SampleID_map.txt", sep = "\t", header = TRUE, comment = "")
map <-  merge(x=nutrition_table, y=SampleID_map, by= "X.SampleID")
split <- strsplit(rownames(taxa),";")                               # Split and rejoin on lv7
taxaStrings <- sapply(split,function(x) paste(x[1:7],collapse=";")) # level 7 is species, 8 is strain
taxa <- rowsum(taxa,taxaStrings)                                    # Collapse by taxonomy name
taxa <- read.delim("raw/youbet.txt", row =1)
#### Summarizing ####
split <- strsplit(rownames(taxa),";")                               # Split and rejoin on lv7
taxaStrings <- sapply(split,function(x) paste(x[1:7],collapse=";")) # level 7 is species, 8 is strain
taxa <- read.delim("raw/youbet.txt", row =1)
#### Summarizing ####
split <- strsplit(rownames(taxa),";")                               # Split and rejoin on lv7
taxaStrings <- sapply(split,function(x) paste(x[1:7],collapse=";")) # level 7 is species, 8 is strain
taxa <- rowsum(taxa,taxaStrings)                                    # Collapse by taxonomy name
taxa = taxa[,colSums(taxa)>=20000]                  #use taxa var to create OTU table (counts)
staxa = taxa                                         #staxa is utilized for relative abundances, taxa for counts
staxa = sweep(staxa,2,colSums(staxa),'/');           # Normalize
staxa = staxa[order(rowMeans(staxa),decreasing=F),]; # Sort by avg. abundance
staxa = staxa[rowMeans(staxa) >= 0.0001,];            # Drop rare taxa (abundance)
staxa = staxa[rowSums(staxa > 0) > 10,];             # Drop rare taxa (prevalence)
###Instantiate Plots###
for (id in unique(map$UserName)){
submap <- map[map$UserName == id,] #create submap variable we can use to iterate through
subtaxa <- staxa[(colnames(staxa) %in% submap[,"X.SampleID"])] #create subtaxa variable - looks at each subject individually
subtaxasp <- setDT(subtaxa, keep.rownames=TRUE)
subtaxaalpha <- taxa[(colnames(taxa) %in% submap[,"X.SampleID"])] #subtaxa variable used for alpha diversity
betataxa<- staxa[(colnames(staxa) %in% map[,"X.SampleID"])] #Create table with just taxa and subjects
betataxa <- t(betataxa) #transpose
render(input = "lib/MCTS_pdf_mcb_7_3.Rmd",output_file = paste0('report.', id, '.pdf'),"pdf_document",
output_dir = "output/7.18.new.output")
}
for (id in unique(map$UserName)){
submap <- map[map$UserName == id,] #create submap variable we can use to iterate through
subtaxa <- staxa[(colnames(staxa) %in% submap[,"X.SampleID"])] #create subtaxa variable - looks at each subject individually
subtaxasp <- setDT(subtaxa, keep.rownames=TRUE)
subtaxaalpha <- taxa[(colnames(taxa) %in% submap[,"X.SampleID"])] #subtaxa variable used for alpha diversity
betataxa<- staxa[(colnames(staxa) %in% map[,"X.SampleID"])] #Create table with just taxa and subjects
betataxa <- t(betataxa) #transpose
render(input = "lib/MCTS_pdf_mcb_7_3.Rmd",output_file = paste0('report.', id, '.pdf'),"pdf_document",
output_dir = "output/7.18.new.output")
}
map$UserName.x
View(map)
setwd("C:/Users/arzan/Desktop/Bioinformatics/MCT/GIT/zebra")
#### Read in mapping file ####
map <- read.table("raw/new_map_with_treatment.txt", sep = "\t", header = TRUE, comment = "")
#### Read in taxa table ####
taxa <- read.delim("raw/youbet.txt", row =1)
#### Summarizing ####
split <- strsplit(rownames(taxa),";")                               # Split and rejoin on lv7
taxaStrings <- sapply(split,function(x) paste(x[1:7],collapse=";")) # level 7 is species, 8 is strain
taxa <- rowsum(taxa,taxaStrings)                                    # Collapse by taxonomy name
#### Manicure the samplenames, grab latest (mct study only and only when re-running things from a new taxa table)
#colnames(taxa) = gsub(".S[0-9]+.R1.001","",colnames(taxa));      # Clean old plate IDs
#taxa = taxa[,order(colnames(taxa))];              # Sort nicely by sample ID
#taxa = taxa[,-(grep("L0",colnames(taxa))-1)];     # Keep new runs only
#colnames(taxa) = gsub(".S[0-9]+.L001.R1.001","",colnames(taxa)); # Clean new plate IDs
#### Massaging ####
taxa = taxa[,colSums(taxa)>=20000]                  #use taxa var to create OTU table (counts)
staxa = taxa                                         #staxa is utilized for relative abundances, taxa for counts
staxa = sweep(staxa,2,colSums(staxa),'/');           # Normalize
staxa = staxa[order(rowMeans(staxa),decreasing=F),]; # Sort by avg. abundance
staxa = staxa[rowSums(staxa > 0) > 10,];             # Drop rare taxa (prevalence)
staxa = staxa[rowMeans(staxa) >= 0.0001,];            # Drop rare taxa (abundance)
View(map)
setwd("C:/Users/arzan/Desktop/Bioinformatics/MCT/GIT/zebra")
nutrition_table <- read.table("raw/Totals_to_use.txt", sep = "\t", header = TRUE, comment = "")
SampleID_map <- read.table("raw/SampleID_map.txt", sep = "\t", header = TRUE, comment = "")
map <-  merge(x=nutrition_table, y=SampleID_map, by= "X.SampleID")
#### Read in mapping file ####
#map <- read.table("raw/new_map_with_treatment.txt", sep = "\t", header = TRUE, comment = "")
#### Read in taxa table ####
taxa <- read.delim("raw/youbet.txt", row =1)
#### Summarizing ####
split <- strsplit(rownames(taxa),";")                               # Split and rejoin on lv7
taxaStrings <- sapply(split,function(x) paste(x[1:7],collapse=";")) # level 7 is species, 8 is strain
taxa <- rowsum(taxa,taxaStrings)                                    # Collapse by taxonomy name
#### Manicure the samplenames, grab latest (mct study only and only when re-running things from a new taxa table)
#colnames(taxa) = gsub(".S[0-9]+.R1.001","",colnames(taxa));      # Clean old plate IDs
#taxa = taxa[,order(colnames(taxa))];              # Sort nicely by sample ID
#taxa = taxa[,-(grep("L0",colnames(taxa))-1)];     # Keep new runs only
#colnames(taxa) = gsub(".S[0-9]+.L001.R1.001","",colnames(taxa)); # Clean new plate IDs
#### Massaging ####
taxa = taxa[,colSums(taxa)>=20000]                  #use taxa var to create OTU table (counts)
staxa = taxa                                         #staxa is utilized for relative abundances, taxa for counts
staxa = sweep(staxa,2,colSums(staxa),'/');           # Normalize
staxa = staxa[order(rowMeans(staxa),decreasing=F),]; # Sort by avg. abundance
staxa = staxa[rowMeans(staxa) >= 0.0001,];            # Drop rare taxa (abundance)
staxa = staxa[rowSums(staxa > 0) > 10,];             # Drop rare taxa (prevalence)
###Instantiate Plots###
View(map)
colnames(map)[2]
colnames(map)[2] <- "UserName"
colnames(map)[2]
for (id in unique(map$UserName)){
submap <- map[map$UserName == id,] #create submap variable we can use to iterate through
subtaxa <- staxa[(colnames(staxa) %in% submap[,"X.SampleID"])] #create subtaxa variable - looks at each subject individually
subtaxasp <- setDT(subtaxa, keep.rownames=TRUE)
subtaxaalpha <- taxa[(colnames(taxa) %in% submap[,"X.SampleID"])] #subtaxa variable used for alpha diversity
betataxa<- staxa[(colnames(staxa) %in% map[,"X.SampleID"])] #Create table with just taxa and subjects
betataxa <- t(betataxa) #transpose
render(input = "lib/MCTS_pdf_mcb_7_3.Rmd",output_file = paste0('report.', id, '.pdf'),"pdf_document",
output_dir = "output/7.18.new.output")
}
for (id in unique(map$UserName)){
submap <- map[map$UserName == id,] #create submap variable we can use to iterate through
subtaxa <- staxa[(colnames(staxa) %in% submap[,"X.SampleID"])] #create subtaxa variable - looks at each subject individually
subtaxasp <- setDT(subtaxa, keep.rownames=TRUE)
subtaxaalpha <- taxa[(colnames(taxa) %in% submap[,"X.SampleID"])] #subtaxa variable used for alpha diversity
betataxa<- staxa[(colnames(staxa) %in% map[,"X.SampleID"])] #Create table with just taxa and subjects
betataxa <- t(betataxa) #transpose
render(input = "lib/MCTS_pdf_mcb_7_3.Rmd",output_file = paste0('report.', id, '.pdf'),"pdf_document",
output_dir = "output/7.18.new.output")
}
for (id in unique(map$UserName)){
submap <- map[map$UserName == id,] #create submap variable we can use to iterate through
subtaxa <- staxa[(colnames(staxa) %in% submap[,"X.SampleID"])] #create subtaxa variable - looks at each subject individually
subtaxasp <- setDT(subtaxa, keep.rownames=TRUE)
subtaxaalpha <- taxa[(colnames(taxa) %in% submap[,"X.SampleID"])] #subtaxa variable used for alpha diversity
betataxa<- staxa[(colnames(staxa) %in% map[,"X.SampleID"])] #Create table with just taxa and subjects
betataxa <- t(betataxa) #transpose
render(input = "lib/MCTS_pdf_mcb_7_3.Rmd",output_file = paste0('report.', id, '.pdf'),"pdf_document",
output_dir = "output/7.18.new.output")
}
colnames(map)[3] <- "StudyDayNo" #Change col name from StudyDayNo.x to UserName - compatibility purposes
for (id in unique(map$UserName)){
submap <- map[map$UserName == id,] #create submap variable we can use to iterate through
subtaxa <- staxa[(colnames(staxa) %in% submap[,"X.SampleID"])] #create subtaxa variable - looks at each subject individually
subtaxasp <- setDT(subtaxa, keep.rownames=TRUE)
subtaxaalpha <- taxa[(colnames(taxa) %in% submap[,"X.SampleID"])] #subtaxa variable used for alpha diversity
betataxa<- staxa[(colnames(staxa) %in% map[,"X.SampleID"])] #Create table with just taxa and subjects
betataxa <- t(betataxa) #transpose
render(input = "lib/MCTS_pdf_mcb_7_3.Rmd",output_file = paste0('report.', id, '.pdf'),"pdf_document",
output_dir = "output/7.18.new.output")
}
for (id in unique(map$UserName)){
submap <- map[map$UserName == id,] #create submap variable we can use to iterate through
subtaxa <- staxa[(colnames(staxa) %in% submap[,"X.SampleID"])] #create subtaxa variable - looks at each subject individually
subtaxasp <- setDT(subtaxa, keep.rownames=TRUE)
subtaxaalpha <- taxa[(colnames(taxa) %in% submap[,"X.SampleID"])] #subtaxa variable used for alpha diversity
betataxa<- staxa[(colnames(staxa) %in% map[,"X.SampleID"])] #Create table with just taxa and subjects
betataxa <- t(betataxa) #transpose
render(input = "lib/MCTS_pdf_mcb_7_3.Rmd",output_file = paste0('report.', id, '.pdf'),"pdf_document",
output_dir = "output/7.18.new.output")
}
for (id in unique(map$UserName)){
submap <- map[map$UserName == id,] #create submap variable we can use to iterate through
subtaxa <- staxa[(colnames(staxa) %in% submap[,"X.SampleID"])] #create subtaxa variable - looks at each subject individually
subtaxasp <- setDT(subtaxa, keep.rownames=TRUE)
subtaxaalpha <- taxa[(colnames(taxa) %in% submap[,"X.SampleID"])] #subtaxa variable used for alpha diversity
betataxa<- staxa[(colnames(staxa) %in% map[,"X.SampleID"])] #Create table with just taxa and subjects
betataxa <- t(betataxa) #transpose
render(input = "lib/MCTS_pdf_mcb_7_3.Rmd",output_file = paste0('report.', id, '.pdf'),"pdf_document",
output_dir = "output/7.18.new.output")
}
for (id in unique(map$UserName)){
submap <- map[map$UserName == id,] #create submap variable we can use to iterate through
subtaxa <- staxa[(colnames(staxa) %in% submap[,"X.SampleID"])] #create subtaxa variable - looks at each subject individually
subtaxasp <- setDT(subtaxa, keep.rownames=TRUE)
subtaxaalpha <- taxa[(colnames(taxa) %in% submap[,"X.SampleID"])] #subtaxa variable used for alpha diversity
betataxa<- staxa[(colnames(staxa) %in% map[,"X.SampleID"])] #Create table with just taxa and subjects
betataxa <- t(betataxa) #transpose
render(input = "lib/MCTS_pdf_mcb_7_3.Rmd",output_file = paste0('report.', id, '.pdf'),"pdf_document",
output_dir = "output/7.18.new.output")
}
for (id in unique(map$UserName)){
submap <- map[map$UserName == id,] #create submap variable we can use to iterate through
subtaxa <- staxa[(colnames(staxa) %in% submap[,"X.SampleID"])] #create subtaxa variable - looks at each subject individually
subtaxasp <- setDT(subtaxa, keep.rownames=TRUE)
subtaxaalpha <- taxa[(colnames(taxa) %in% submap[,"X.SampleID"])] #subtaxa variable used for alpha diversity
betataxa<- staxa[(colnames(staxa) %in% map[,"X.SampleID"])] #Create table with just taxa and subjects
betataxa <- t(betataxa) #transpose
render(input = "lib/MCTS_pdf_mcb_7_3.Rmd",output_file = paste0('report.', id, '.pdf'),"pdf_document",
output_dir = "output/7.18.new.output")
}
for (id in unique(map$UserName)){
submap <- map[map$UserName == id,] #create submap variable we can use to iterate through
subtaxa <- staxa[(colnames(staxa) %in% submap[,"X.SampleID"])] #create subtaxa variable - looks at each subject individually
subtaxasp <- setDT(subtaxa, keep.rownames=TRUE)
subtaxaalpha <- taxa[(colnames(taxa) %in% submap[,"X.SampleID"])] #subtaxa variable used for alpha diversity
betataxa<- staxa[(colnames(staxa) %in% map[,"X.SampleID"])] #Create table with just taxa and subjects
betataxa <- t(betataxa) #transpose
render(input = "lib/MCTS_pdf_mcb_7_3.Rmd",output_file = paste0('report.', id, '.pdf'),"pdf_document",
output_dir = "output/7.18.new.output")
}
for (id in unique(map$UserName)){
submap <- map[map$UserName == id,] #create submap variable we can use to iterate through
subtaxa <- staxa[(colnames(staxa) %in% submap[,"X.SampleID"])] #create subtaxa variable - looks at each subject individually
subtaxasp <- setDT(subtaxa, keep.rownames=TRUE)
subtaxaalpha <- taxa[(colnames(taxa) %in% submap[,"X.SampleID"])] #subtaxa variable used for alpha diversity
betataxa<- staxa[(colnames(staxa) %in% map[,"X.SampleID"])] #Create table with just taxa and subjects
betataxa <- t(betataxa) #transpose
render(input = "lib/MCTS_pdf_mcb_7_3.Rmd",output_file = paste0('report.', id, '.pdf'),"pdf_document",
output_dir = "output/7.18.new.output")
}
library(dplyr)
for (id in unique(map$UserName)){
submap <- map[map$UserName == id,] #create submap variable we can use to iterate through
subtaxa <- staxa[(colnames(staxa) %in% submap[,"X.SampleID"])] #create subtaxa variable - looks at each subject individually
subtaxasp <- setDT(subtaxa, keep.rownames=TRUE)
subtaxaalpha <- taxa[(colnames(taxa) %in% submap[,"X.SampleID"])] #subtaxa variable used for alpha diversity
betataxa<- staxa[(colnames(staxa) %in% map[,"X.SampleID"])] #Create table with just taxa and subjects
betataxa <- t(betataxa) #transpose
render(input = "lib/MCTS_pdf_mcb_7_3.Rmd",output_file = paste0('report.', id, '.pdf'),"pdf_document",
output_dir = "output/7.18.new.output")
}
sample(colpal,37)
colpal<- colorRampPalette(brewer.pal(9,"Set3"))(37)
colpal
sample(colpal,37)
colpal <- colorRampPalette(brewer.pal(9,"Set3"))(37)
colpal
colpal <- sample(colpal,37)
colpal
colpal[1]
for (id in unique(map$UserName)){
submap <- map[map$UserName == id,] #create submap variable we can use to iterate through
subtaxa <- staxa[(colnames(staxa) %in% submap[,"X.SampleID"])] #create subtaxa variable - looks at each subject individually
subtaxasp <- setDT(subtaxa, keep.rownames=TRUE)
subtaxaalpha <- taxa[(colnames(taxa) %in% submap[,"X.SampleID"])] #subtaxa variable used for alpha diversity
betataxa<- staxa[(colnames(staxa) %in% map[,"X.SampleID"])] #Create table with just taxa and subjects
betataxa <- t(betataxa) #transpose
render(input = "lib/MCTS_pdf_mcb_7_3.Rmd",output_file = paste0('report.', id, '.pdf'),"pdf_document",
output_dir = "output/7.18.new.output")
}
for (id in unique(map$UserName)){
submap <- map[map$UserName == id,] #create submap variable we can use to iterate through
subtaxa <- staxa[(colnames(staxa) %in% submap[,"X.SampleID"])] #create subtaxa variable - looks at each subject individually
subtaxasp <- setDT(subtaxa, keep.rownames=TRUE)
subtaxaalpha <- taxa[(colnames(taxa) %in% submap[,"X.SampleID"])] #subtaxa variable used for alpha diversity
betataxa<- staxa[(colnames(staxa) %in% map[,"X.SampleID"])] #Create table with just taxa and subjects
betataxa <- t(betataxa) #transpose
render(input = "lib/MCTS_pdf_mcb_7_3.Rmd",output_file = paste0('report.', id, '.pdf'),"pdf_document",
output_dir = "output/7.18.new.output")
}
for (id in unique(map$UserName)){
submap <- map[map$UserName == id,] #create submap variable we can use to iterate through
subtaxa <- staxa[(colnames(staxa) %in% submap[,"X.SampleID"])] #create subtaxa variable - looks at each subject individually
subtaxasp <- setDT(subtaxa, keep.rownames=TRUE)
subtaxaalpha <- taxa[(colnames(taxa) %in% submap[,"X.SampleID"])] #subtaxa variable used for alpha diversity
betataxa<- staxa[(colnames(staxa) %in% map[,"X.SampleID"])] #Create table with just taxa and subjects
betataxa <- t(betataxa) #transpose
render(input = "lib/MCTS_pdf_mcb_7_3.Rmd",output_file = paste0('report.', id, '.pdf'),"pdf_document",
output_dir = "output/7.18.new.output")
}
subtaxaalpha <- t(subtaxaalpha)
#calculate alpha diversity and assign to variable alphad
alphad <- diversity(subtaxaalpha, index = "shannon", MARGIN = 1, base = exp(1))
alphad <- as.data.frame(alphad)
alphad <- rownames_to_column(alphad, var = "X.SampleID")
#merge melted df with map to get access to StudyDay variable
merged_alpha<- merge(x=alphad, y=map, all.x=TRUE)
colpal<- colorRampPalette(brewer.pal(9,"Set3"))(37)
#make gg plot line graph of subject alpha diversity per day
ggplot(merged_alpha, aes(x=StudyDayNo, y=alphad, group = UserName)) +
geom_point() +
theme_classic(base_family = "Helvetica") +
theme(axis.title.x =element_text(family = "Helvetica"), axis.title.y =element_text(family = "Helvetica"),
plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))+
geom_smooth() +
scale_color_manual(values=colpal)+
labs(x= "Study Day Number",y="Alpha Diversity (Shannon)")+
ggtitle(" Day-to-Day Variation in Alpha Diversity of the Gut Microbiome")
subtaxaalpha <- t(subtaxaalpha)
#calculate alpha diversity and assign to variable alphad
alphad <- diversity(subtaxaalpha, index = "shannon", MARGIN = 1, base = exp(1))
alphad <- as.data.frame(alphad)
alphad <- rownames_to_column(alphad, var = "X.SampleID")
#merge melted df with map to get access to StudyDay variable
merged_alpha<- merge(x=alphad, y=map, all.x=TRUE)
colpal<- colorRampPalette(brewer.pal(9,"Set3"))(37)
#make gg plot line graph of subject alpha diversity per day
ggplot(merged_alpha, aes(x=StudyDayNo, y=alphad, group = UserName)) +
geom_point() +
theme_classic(base_family = "Helvetica") +
theme(axis.title.x =element_text(family = "Helvetica"), axis.title.y =element_text(family = "Helvetica"),
plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))+
geom_smooth() +
scale_color_manual(values=colpal)+
labs(x= "Study Day Number",y="Alpha Diversity (Shannon)")+
ggtitle(" Day-to-Day Variation in Alpha Diversity of the Gut Microbiome")
subtaxaalpha <- t(subtaxaalpha)
#calculate alpha diversity and assign to variable alphad
alphad <- diversity(subtaxaalpha, index = "shannon", MARGIN = 1, base = exp(1))
alphad <- as.data.frame(alphad)
alphad <- rownames_to_column(alphad, var = "X.SampleID")
#merge melted df with map to get access to StudyDay variable
merged_alpha<- merge(x=alphad, y=map, all.x=TRUE)
colpal<- colorRampPalette(brewer.pal(9,"Set3"))(37)
#make gg plot line graph of subject alpha diversity per day
ggplot(merged_alpha, aes(x=StudyDayNo, y=alphad, group = UserName)) +
geom_point() +
theme_classic(base_family = "Helvetica") +
theme(axis.title.x =element_text(family = "Helvetica"), axis.title.y =element_text(family = "Helvetica"),
plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))+
geom_smooth() +
scale_color_manual(values="#CC6666")+
labs(x= "Study Day Number",y="Alpha Diversity (Shannon)")+
ggtitle(" Day-to-Day Variation in Alpha Diversity of the Gut Microbiome")
subtaxaalpha <- t(subtaxaalpha)
#calculate alpha diversity and assign to variable alphad
alphad <- diversity(subtaxaalpha, index = "shannon", MARGIN = 1, base = exp(1))
alphad <- as.data.frame(alphad)
alphad <- rownames_to_column(alphad, var = "X.SampleID")
#merge melted df with map to get access to StudyDay variable
merged_alpha<- merge(x=alphad, y=map, all.x=TRUE)
colpal<- colorRampPalette(brewer.pal(9,"Set3"))(37)
#make gg plot line graph of subject alpha diversity per day
ggplot(merged_alpha, aes(x=StudyDayNo, y=alphad, group = UserName)) +
geom_point() +
theme_classic(base_family = "Helvetica") +
theme(axis.title.x =element_text(family = "Helvetica"), axis.title.y =element_text(family = "Helvetica"),
plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))+
geom_smooth() +
scale_color_manual(values="#CC6666")+
labs(x= "Study Day Number",y="Alpha Diversity (Shannon)")+
ggtitle(" Day-to-Day Variation in Alpha Diversity of the Gut Microbiome")
ggplot(merged_alpha, aes(x=StudyDayNo, y=alphad, group = UserName)) +
geom_point(aes(color=red)) +
theme_classic(base_family = "Helvetica") +
theme(axis.title.x =element_text(family = "Helvetica"), axis.title.y =element_text(family = "Helvetica"),
plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))+
geom_smooth() +
scale_color_manual(values="#CC6666")+
labs(x= "Study Day Number",y="Alpha Diversity (Shannon)")+
ggtitle(" Day-to-Day Variation in Alpha Diversity of the Gut Microbiome")
ggplot(merged_alpha, aes(x=StudyDayNo, y=alphad, group = UserName)) +
geom_point()) +
theme_classic(base_family = "Helvetica") +
theme(axis.title.x =element_text(family = "Helvetica"), axis.title.y =element_text(family = "Helvetica"),
plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))+
geom_smooth() +
scale_color_manual(values="#CC6666")+
labs(x= "Study Day Number",y="Alpha Diversity (Shannon)")+
ggtitle(" Day-to-Day Variation in Alpha Diversity of the Gut Microbiome")
ggplot(merged_alpha, aes(x=StudyDayNo, y=alphad, group = UserName)) +
geom_point() +
theme_classic(base_family = "Helvetica") +
theme(axis.title.x =element_text(family = "Helvetica"), axis.title.y =element_text(family = "Helvetica"),
plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))+
geom_smooth() +
scale_color_manual(values="#CC6666")+
labs(x= "Study Day Number",y="Alpha Diversity (Shannon)")+
ggtitle(" Day-to-Day Variation in Alpha Diversity of the Gut Microbiome")
ggplot(merged_alpha, aes(x=StudyDayNo, y=alphad, group = UserName)) +
geom_point() +
theme_classic(base_family = "Helvetica") +
theme(axis.title.x =element_text(family = "Helvetica"), axis.title.y =element_text(family = "Helvetica"),
plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))+
geom_smooth(aes(fill=colpal[1])) +
scale_color_manual(values="#CC6666")+
labs(x= "Study Day Number",y="Alpha Diversity (Shannon)")+
ggtitle(" Day-to-Day Variation in Alpha Diversity of the Gut Microbiome")
ggplot(merged_alpha, aes(x=StudyDayNo, y=alphad, group = UserName)) +
geom_point() +
theme_classic(base_family = "Helvetica") +
theme(axis.title.x =element_text(family = "Helvetica"), axis.title.y =element_text(family = "Helvetica"),
plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))+
geom_smooth(aes(fill=colpal[1],color=red)) +
scale_color_manual(values="#CC6666")+
labs(x= "Study Day Number",y="Alpha Diversity (Shannon)")+
ggtitle(" Day-to-Day Variation in Alpha Diversity of the Gut Microbiome")
ggplot(merged_alpha, aes(x=StudyDayNo, y=alphad, group = UserName)) +
geom_point() +
theme_classic(base_family = "Helvetica") +
theme(axis.title.x =element_text(family = "Helvetica"), axis.title.y =element_text(family = "Helvetica"),
plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))+
geom_smooth(aes(fill=colpal[1],color="#CC6666")) +
scale_color_manual(values="#CC6666")+
labs(x= "Study Day Number",y="Alpha Diversity (Shannon)")+
ggtitle(" Day-to-Day Variation in Alpha Diversity of the Gut Microbiome")
colpal<- colorRampPalette(brewer.pal(9,"Set3"))(37)
ggplot(merged_alpha, aes(x=StudyDayNo, y=alphad, group = UserName)) +
geom_point() +
theme_classic(base_family = "Helvetica") +
theme(axis.title.x =element_text(family = "Helvetica"), axis.title.y =element_text(family = "Helvetica"),
plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))+
geom_smooth(aes(fill=colpal[1],color="#CC6666")) +
scale_color_manual(values="#CC6666")+
labs(x= "Study Day Number",y="Alpha Diversity (Shannon)")+
ggtitle(" Day-to-Day Variation in Alpha Diversity of the Gut Microbiome")
ggplot(merged_alpha, aes(x=StudyDayNo, y=alphad, group = UserName)) +
geom_point() +
theme_classic(base_family = "Helvetica") +
theme(axis.title.x =element_text(family = "Helvetica"), axis.title.y =element_text(family = "Helvetica"),
plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))+
geom_smooth(aes(fill=colpal[1],color="#CC6666")) +
scale_color_manual(values="#CC6666")+
labs(x= "Study Day Number",y="Alpha Diversity (Shannon)")+
ggtitle(" Day-to-Day Variation in Alpha Diversity of the Gut Microbiome")
ggplot(merged_alpha, aes(x=StudyDayNo, y=alphad, group = UserName)) +
geom_point() +
theme_classic(base_family = "Helvetica") +
theme(axis.title.x =element_text(family = "Helvetica"), axis.title.y =element_text(family = "Helvetica"),
plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))+
geom_smooth(aes(fill=colpal[1],color="#CC6666")) +
scale_color_manual(values="#CC6666")+
labs(x= "Study Day Number",y="Alpha Diversity (Shannon)")+
ggtitle(" Day-to-Day Variation in Alpha Diversity of the Gut Microbiome")
ggplot(merged_alpha, aes(x=StudyDayNo, y=alphad, group = UserName)) +
geom_point() +
theme_classic(base_family = "Helvetica") +
theme(axis.title.x =element_text(family = "Helvetica"), axis.title.y =element_text(family = "Helvetica"),
plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))+
geom_smooth(aes(fill=colpal[1],color="#CC6666")) +
labs(x= "Study Day Number",y="Alpha Diversity (Shannon)")+
ggtitle(" Day-to-Day Variation in Alpha Diversity of the Gut Microbiome")
warnings()
ggplot(merged_alpha, aes(x=StudyDayNo, y=alphad, group = UserName)) +
geom_point() +
theme_classic(base_family = "Helvetica") +
theme(
plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))+
geom_smooth(aes(fill=colpal[1],color="#CC6666")) +
labs(x= "Study Day Number",y="Alpha Diversity (Shannon)")+
ggtitle(" Day-to-Day Variation in Alpha Diversity of the Gut Microbiome")
warnings()
ggplot(merged_alpha, aes(x=StudyDayNo, y=alphad, group = UserName)) +
geom_point() +
theme(
plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))+
geom_smooth(aes(fill=colpal[1],color="#CC6666")) +
labs(x= "Study Day Number",y="Alpha Diversity (Shannon)")+
ggtitle(" Day-to-Day Variation in Alpha Diversity of the Gut Microbiome")
ggplot(merged_alpha, aes(x=StudyDayNo, y=alphad, group = UserName)) +
geom_point() +
theme(
plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))+
geom_smooth(aes(fill=colpal[1])) +
labs(x= "Study Day Number",y="Alpha Diversity (Shannon)")+
ggtitle(" Day-to-Day Variation in Alpha Diversity of the Gut Microbiome")
for (id in unique(map$UserName)){
submap <- map[map$UserName == id,] #create submap variable we can use to iterate through
subtaxa <- staxa[(colnames(staxa) %in% submap[,"X.SampleID"])] #create subtaxa variable - looks at each subject individually
subtaxasp <- setDT(subtaxa, keep.rownames=TRUE)
subtaxaalpha <- taxa[(colnames(taxa) %in% submap[,"X.SampleID"])] #subtaxa variable used for alpha diversity
betataxa<- staxa[(colnames(staxa) %in% map[,"X.SampleID"])] #Create table with just taxa and subjects
betataxa <- t(betataxa) #transpose
render(input = "lib/MCTS_pdf_mcb_7_3.Rmd",output_file = paste0('report.', id, '.pdf'),"pdf_document",
output_dir = "output/7.18.new.output")
}
for (id in unique(map$UserName)){
submap <- map[map$UserName == id,] #create submap variable we can use to iterate through
subtaxa <- staxa[(colnames(staxa) %in% submap[,"X.SampleID"])] #create subtaxa variable - looks at each subject individually
subtaxasp <- setDT(subtaxa, keep.rownames=TRUE)
subtaxaalpha <- taxa[(colnames(taxa) %in% submap[,"X.SampleID"])] #subtaxa variable used for alpha diversity
betataxa<- staxa[(colnames(staxa) %in% map[,"X.SampleID"])] #Create table with just taxa and subjects
betataxa <- t(betataxa) #transpose
render(input = "lib/MCTS_pdf_mcb_7_3.Rmd",output_file = paste0('report.', id, '.pdf'),"pdf_document",
output_dir = "output/7.18.new.output")
}
for (id in unique(map$UserName)){
submap <- map[map$UserName == id,] #create submap variable we can use to iterate through
subtaxa <- staxa[(colnames(staxa) %in% submap[,"X.SampleID"])] #create subtaxa variable - looks at each subject individually
subtaxasp <- setDT(subtaxa, keep.rownames=TRUE)
subtaxaalpha <- taxa[(colnames(taxa) %in% submap[,"X.SampleID"])] #subtaxa variable used for alpha diversity
betataxa<- staxa[(colnames(staxa) %in% map[,"X.SampleID"])] #Create table with just taxa and subjects
betataxa <- t(betataxa) #transpose
render(input = "lib/MCTS_pdf_mcb_7_3.Rmd",output_file = paste0('report.', id, '.pdf'),"pdf_document",
output_dir = "output/7.18.new.output")
}
