install.packages("swirl")
library("swirl", lib.loc="~/R/win-library/3.2")
swirl()
1
1
1
2
3
1
2
3
4
4
4
4
5
5
50
0
1
5 + 7
x <- 5 + 7
x
y <- x - 3
y
z(1.1, 9, 3.14)
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z * 2 + 100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div < z/my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1, 2, 3, 4) + c(0, 10, 100 )
z * 2 + 1000
my_div
swirl()
swirl()
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >- 6
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
c(my_char, Arzang)
my_name <- c(my_char, "Arzang")
my_name
paste(my_name, collapse = " ")
("Hello", "world!", sep = " ")
c("Hello", "world!", sep = " ")
paste("Hello", "world!", sep = " ")
paste("1:3", c("X", "Y", "Z"), sep = " ")
paste(1:3, c("X", "Y", "Z"), sep = " ")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, sep = "-")
paste(LETTERS, 1:4, sep = "-")
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class*my_vector
class(my_vector)
my_matrix <- my_vector
matrix()?
?
esc
matrix?
s
?
matrix()
?"matrix"
?matrix
play()
27/30
nxt()
my_matrix2 <- matrix(data= 1:20, nrow=4, ncol=5, byrow = FALSE, dimnames = NULL)
identical(my_matrix,my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(vector, my_matrix)
cbind(patients, my_matrix)
my_data(patients, my_matrix)
my_data <- (patients, my_matrix)
my_data <- (patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(cnames, my_data)
colnames()
colnames(cnames)
colnames(my_data) <- cnames
my_data
install.packages("rafalib")
library("rafalib")
install.packages("swirl")
library("swirl")
version
swirl()
5+7
x <- 5+ 7
x
y <- x-3
y
c(1.1,9,3.14)
z <- c(1.1,9,3.14)
?
end
?c
z
x <- (z,555,z)
x <- c(z,555,z)
c(z,555,z)
z * 2 + 100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1,2,3,4) + c(0,10,100)
z * 2 + 100
z * 2 + 1000
my_div
1:20
pi:10
15:1
?:
:?
"`"
?':'
seq(1,20)
seq(0,10,by=0.5)
seq(5,10,length=30)
my_seq <- seq(5,10,length=30)
length()
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0,1,2), times = 10)
rep(c(0,1,2), each = 10)
num_vect <- c(0.5,55,-10,6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- "My", "name", "is"
my_char <- c("My","name","is")
my_char
paste(my_char, collapse = " ")
my_name(c(my_char, "Arzang"))
my_name<- c(my_char, "Arzang")
my_name
paste(my_char, collapse = " ")
paste(my_name, collapse = " ")
paste("Hello","world", sep=" ")
paste("Hello","world!", sep=" ")
paste(1:3, c("x"."y","z"), sep="")
paste(c(1:3), c("x"."y","z"), sep="")
paste(1:3, c("x""y","z"), sep="")
paste(1:3, c("x","y","z"), sep="")
paste(1:3, c("x", "y", "z"), sep = "")
(1:3, c("X", "Y", "Z"), sep = "")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep ="-")
x <- c(44,NA,5,NA)
x * 3
y <- rnorm(1000)
z <- rep(NA,1000)
my_data <- sample(c(y,z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum==1
s
s
?
quit
info()
sum(my_na==1)
sum(my_na)
my_data
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x > 0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo =11, bar =2, norf =NA)
vect
names(vect)
vect2 <- c(11,2,Na)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo", "bar", "norf"
)
identical(vect1,vect2)
identical(vect,vect2)
vect["bar"]
vect[c("foo"),"bar"]
vect[c("foo", "bar")]
library(swirl)
swirl()
info()
main()
ls
swirl
swirl()
sswirl())
swirl()
library(swirl)
swirl()
install.package("rmarkdown")
library(rmarkdown)
library(knitr)
library(ggplot2)
library(reshape2)
library(tibble)
library(data.table)
library(vegan)
library(ape)
library(RColorBrewer)
library(dplyr)
library(cowplot)
install.packages("rmarkdown")
install.packages("rmarkdown")
install.packages("knitr")
install.packages("ggplot2")
install.packages("reshape2")
install.packages("tibble")
install.packages("data.table")
install.packages("vegan")
install.packages("ape")
install.packages("RColorBrewer")
install.packages("dplyr")
install.packages("cowplot")
installr()
version
updateR()
user_map <- opt$user_map
suppressPackageStartupMessages(require(optparse))
suppressPackageStartupMessages(require(dplyr))
suppressPackageStartupMessages(require(cowplot))
suppressPackageStartupMessages(require(installr))
suppressPackageStartupMessages(require(ggplot2))
suppressPackageStartupMessages(require(RColorBrewer))
suppressPackageStartupMessages(require(reshape2))
suppressPackageStartupMessages(require(vegan))
suppressPackageStartupMessages(require(ape))
suppressPackageStartupMessages(require(data.table))
suppressPackageStartupMessages(require(knitr))
suppressPackageStartupMessages(require(rmarkdown))
suppressPackageStartupMessages(require(tibble))
infile <- opt$input
opt <- parse_args(OptionParser(usage=usage, option_list=option_list))
usage = '\n Welcome to the zebrascript, more coming!'
option_list = list(
make_option(c('-i', '--input'),
help='REQUIRED: Input is the mapping file, a long-form tab-delimited table
prefiltered for missing values',
default=NA, type = 'character'),
make_option(c('-t', '--taxa_table'),
help='Provide taxa table for analysis involving bacterial taxa.',
default=NA, type = 'character'),
make_option(c('-n', '--nutr_table'),
help='REQUIRED: Input is the nutrition table, a long-form tab-delimited table
prefiltered for missing values',
default=NA, type = 'character'),
make_option(c('-u', '--user_map'),
help='REQUIRED: Input is the username mapping file, a long-form tab-delimited table
prefiltered for missing values',
default=NA, type = 'character'),
make_option(c('-f', '--food_map'),
help='REQUIRED: Input is the food map, a long-form tab-delimited table
prefiltered for missing values',
default=NA, type = 'character'),
add_option(c('-am', '--alpha_metric')),
type = 'choice',
options = c('shannon','chao1'),
default = 'shannon',
help = 'Choose alpha diversity metric - shannon, chao1')
opt <- parse_args(OptionParser(usage=usage, option_list=option_list))
option_list = list(
make_option(c('-i', '--input'),
help='REQUIRED: Input is the mapping file, a long-form tab-delimited table
prefiltered for missing values',
default=NA, type = 'character'),
make_option(c('-t', '--taxa_table'),
help='Provide taxa table for analysis involving bacterial taxa.',
default=NA, type = 'character'),
make_option(c('-n', '--nutr_table'),
help='REQUIRED: Input is the nutrition table, a long-form tab-delimited table
prefiltered for missing values',
default=NA, type = 'character'),
make_option(c('-u', '--user_map'),
help='REQUIRED: Input is the username mapping file, a long-form tab-delimited table
prefiltered for missing values',
default=NA, type = 'character'),
make_option(c('-f', '--food_map'),
help='REQUIRED: Input is the food map, a long-form tab-delimited table
prefiltered for missing values',
default=NA, type = 'character'),
add_option(c('-am', '--alpha_metric')),
type = 'choice',
options = c('shannon','chao1'),
default = 'shannon',
help = 'Choose alpha diversity metric - shannon, chao1')
option_list = list(
make_option(c('-i', '--input'),
help='REQUIRED: Input is the mapping file, a long-form tab-delimited table
prefiltered for missing values',
default=NA, type = 'character'),
make_option(c('-t', '--taxa_table'),
help='Provide taxa table for analysis involving bacterial taxa.',
default=NA, type = 'character'),
make_option(c('-n', '--nutr_table'),
help='REQUIRED: Input is the nutrition table, a long-form tab-delimited table
prefiltered for missing values',
default=NA, type = 'character'),
make_option(c('-u', '--user_map'),
help='REQUIRED: Input is the username mapping file, a long-form tab-delimited table
prefiltered for missing values',
default=NA, type = 'character'),
make_option(c('-f', '--food_map'),
help='REQUIRED: Input is the food map, a long-form tab-delimited table
prefiltered for missing values',
default=NA, type = 'character')) #,
opt <- parse_args(OptionParser(usage=usage, option_list=option_list))
if (is.na(opt$input)) {
stop('Missing required parameters. See usage and options (--help)')
}
infile <- opt$input
taxa_table <- opt$taxa_table
nutrition_table <- opt$nutr_table
user_map <- opt$user_map
food_map <- opt$food_map
alpa_metric <- opt$alpha_metric
food_map
is.na(food_map)
if(is.na(food_map)== "TRUE"){
print("hi")
}
food_map = "a"
if(is.na(food_map)== "TRUE"){
print("hi")
}
if(is.na(food_map)== "TRUE"){
print("hi")
}
food_map = NA
if(is.na(food_map)== "TRUE"){
print("hi")
}
food_map <- NA
if(is.na(food_map)== "TRUE"){
food_eval <- FALSE #if var food_map is not instantiated (thus NA), we set the eval to false
} else {
food_eval <- TRUE
}
food_eval
food_map <- "aaa"
if(is.na(food_map)== "TRUE"){
food_eval <- FALSE #if var food_map is not instantiated (thus NA), we set the eval to false
} else {
food_eval <- TRUE
}
food_eval
food_map <-  read.table(file=food_map, sep = "\t", header = TRUE, comment = "")
usage = '\n Welcome to the zebrascript, more coming!'
option_list = list(
make_option(c('-i', '--input'),
help='REQUIRED: Input is the mapping file, a long-form tab-delimited table
prefiltered for missing values',
default=NA, type = 'character'),
make_option(c('-t', '--taxa_table'),
help='Provide taxa table for analysis involving bacterial taxa.',
default=NA, type = 'character'),
make_option(c('-n', '--nutr_table'),
help='REQUIRED: Input is the nutrition table, a long-form tab-delimited table
prefiltered for missing values',
default=NA, type = 'character'),
make_option(c('-u', '--user_map'),
help='REQUIRED: Input is the username mapping file, a long-form tab-delimited table
prefiltered for missing values',
default=NA, type = 'character'),
make_option(c('-f', '--food_map'),
help='REQUIRED: Input is the food map, a long-form tab-delimited table
prefiltered for missing values',
default=NA, type = 'character')) #,
#add_option(c('-am', '--alpha_metric')),
# type = 'choice',
#options = c('shannon','chao1'),
#default = 'shannon',
#help = 'Choose alpha diversity metric - shannon, chao1')
opt <- parse_args(OptionParser(usage=usage, option_list=option_list))
if (is.na(opt$input)) {
stop('Missing required parameters. See usage and options (--help)')
}
opt$food_map
food_map <-  read.table(file=food_map, sep = "\t", header = TRUE, comment = "")
library(shiny); runApp('C:/Users/arzan/Desktop/Bioinformatics/MCT/GIT/zebra/bin/app_UF_legacy.R')
runApp('C:/Users/arzan/Desktop/Bioinformatics/MCT/GIT/zebra/bin/app_UF_legacy.R')
runApp('C:/Users/arzan/Desktop/Bioinformatics/MCT/GIT/zebra/bin/app_UF_legacy.R')
runApp('C:/Users/arzan/Desktop/Bioinformatics/MCT/GIT/zebra/bin/app_UF_legacy.R')
runApp('C:/Users/arzan/Desktop/Bioinformatics/MCT/GIT/zebra/bin/app_UF_legacy.R')
`fc1`
ytyyuuuuuuuuuuuuuuuuuuuuuuthe wfirir
runApp('C:/Users/arzan/Desktop/Bioinformatics/MCT/GIT/zebra/bin/zebra_app.R')
runApp('C:/Users/arzan/Desktop/Bioinformatics/MCT/GIT/zebra/bin/zebra_app.R')
runApp('C:/Users/arzan/Desktop/Bioinformatics/MCT/GIT/zebra/bin/zebra_app.R')
setwd("C:/Users/arzan/Desktop/Bioinformatics/MCT/GIT/zebra")
runApp('bin/zebra_app.R')
runApp('bin/zebra_app.R')
runApp('bin/zebra_app.R')
runApp('bin/zebra_app.R')
