my_name <- c(my_char, "Arzang")
my_name
paste(my_name, collapse = " ")
("Hello", "world!", sep = " ")
c("Hello", "world!", sep = " ")
paste("Hello", "world!", sep = " ")
paste("1:3", c("X", "Y", "Z"), sep = " ")
paste(1:3, c("X", "Y", "Z"), sep = " ")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, sep = "-")
paste(LETTERS, 1:4, sep = "-")
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class*my_vector
class(my_vector)
my_matrix <- my_vector
matrix()?
?
esc
matrix?
s
?
matrix()
?"matrix"
?matrix
play()
27/30
nxt()
my_matrix2 <- matrix(data= 1:20, nrow=4, ncol=5, byrow = FALSE, dimnames = NULL)
identical(my_matrix,my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(vector, my_matrix)
cbind(patients, my_matrix)
my_data(patients, my_matrix)
my_data <- (patients, my_matrix)
my_data <- (patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(cnames, my_data)
colnames()
colnames(cnames)
colnames(my_data) <- cnames
my_data
install.packages("rafalib")
library("rafalib")
install.packages("swirl")
library("swirl")
version
swirl()
5+7
x <- 5+ 7
x
y <- x-3
y
c(1.1,9,3.14)
z <- c(1.1,9,3.14)
?
end
?c
z
x <- (z,555,z)
x <- c(z,555,z)
c(z,555,z)
z * 2 + 100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1,2,3,4) + c(0,10,100)
z * 2 + 100
z * 2 + 1000
my_div
1:20
pi:10
15:1
?:
:?
"`"
?':'
seq(1,20)
seq(0,10,by=0.5)
seq(5,10,length=30)
my_seq <- seq(5,10,length=30)
length()
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0,1,2), times = 10)
rep(c(0,1,2), each = 10)
num_vect <- c(0.5,55,-10,6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- "My", "name", "is"
my_char <- c("My","name","is")
my_char
paste(my_char, collapse = " ")
my_name(c(my_char, "Arzang"))
my_name<- c(my_char, "Arzang")
my_name
paste(my_char, collapse = " ")
paste(my_name, collapse = " ")
paste("Hello","world", sep=" ")
paste("Hello","world!", sep=" ")
paste(1:3, c("x"."y","z"), sep="")
paste(c(1:3), c("x"."y","z"), sep="")
paste(1:3, c("x""y","z"), sep="")
paste(1:3, c("x","y","z"), sep="")
paste(1:3, c("x", "y", "z"), sep = "")
(1:3, c("X", "Y", "Z"), sep = "")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep ="-")
x <- c(44,NA,5,NA)
x * 3
y <- rnorm(1000)
z <- rep(NA,1000)
my_data <- sample(c(y,z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum==1
s
s
?
quit
info()
sum(my_na==1)
sum(my_na)
my_data
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x > 0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo =11, bar =2, norf =NA)
vect
names(vect)
vect2 <- c(11,2,Na)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo", "bar", "norf"
)
identical(vect1,vect2)
identical(vect,vect2)
vect["bar"]
vect[c("foo"),"bar"]
vect[c("foo", "bar")]
library(swirl)
swirl()
info()
main()
ls
swirl
swirl()
sswirl())
swirl()
library(swirl)
swirl()
library(rmarkdown)
library(knitr)
library(ggplot2)
library(reshape2)
library(tibble)
library(data.table)
library(vegan)
library(ape)
library(RColorBrewer)
library(dplyr)
library(extrafont)
setwd("C:/Users/arzan/Desktop/Bioinformatics/MCT/GIT/zebra")
#Read in sampleID and nutrition files and assign them to pertinent variables
nutrition_table <- read.table("raw/Totals_to_use.txt", sep = "\t", header = TRUE, comment = "")
SampleID_map <- read.table("raw/SampleID_map.txt", sep = "\t", header = TRUE, comment = "")
#merge the two to create the mapping file
map <-  merge(x=nutrition_table, y=SampleID_map, by= "X.SampleID")
#read in the food table and assign it to pertinent variable
food_map <-  read.table("raw/mct.food.otu.txt", sep = "\t", header = TRUE, comment = "")
#set the row names of the food map file to the taxonomy strings
rownames(food_map) <- food_map$taxonomy
#remove the taxonomy string column and the food names column (redundant)
food_map$taxonomy <- NULL #removing taxa string column
food_map$X.FOODID <- NULL #removing food names column
#Bring food taxa strings from row names to first column using setDT. Food_map is now analagous to subtaxasp
#food_map <- setDT(food_map, keep.rownames = TRUE)
#melt food_map to create a data drame called melted_food to merge by SampleIDs
melted_food<- melt(food_map)
#merge melted_food and map by variable (SampleID -- called variable in melted food file - so we use by.x)
merged_food<- merge(x=melted_food, y=map, by.x = "variable", by.y= "X.SampleID", all.x=TRUE)
#### Read in taxa table ####
taxa <- read.delim("raw/youbet.txt", row =1)
z
z
q
q
q
q`
!
+
for (id in unique(map$UserName)){
#microbiome iteration
submap <- map[map$UserName == id,] #create submap variable we can use to iterate through
subtaxa <- staxa[(colnames(staxa) %in% submap[,"X.SampleID"])] #create subtaxa variable - looks at each subject individually
subtaxasp <- setDT(subtaxa, keep.rownames=TRUE) #make rownames first column of frame
#food iteration
sub_foodmap <- merged_food[merged_food$UserName == id,] #sub food variable allows us to access one subject at a time (like submap)
sub_food <- food_map[(colnames(food_map) %in% sub_foodmap[,"variable"])]#sub food variable looks at each subject individually
sub_foodsp <- setDT(sub_food, keep.rownames = TRUE) #make rownames first column of frame
#alpha diversity iteration
subtaxaalpha <- taxa[(colnames(taxa) %in% submap[,"X.SampleID"])] #subtaxa variable used for alpha diversity
#beta diversity iteration
betataxa<- staxa[(colnames(staxa) %in% map[,"X.SampleID"])] #Create table with just taxa and subjects
betataxa <- t(betataxa) #transpose
#rendering
render(input = "lib/MCTS_pdf_mcb_7_3.Rmd",output_file = paste0('report.', id, '.pdf'),"pdf_document",
output_dir = "output/7.20.output")
}
render(input = "lib/MCTS_pdf_mcb_7_3.Rmd",output_file = paste0('report.', id, '.pdf'),"pdf_document",
output_dir = "output/7.20.output")
}
render(input = "lib/MCTS_pdf_mcb_7_3.Rmd",output_file = paste0('report.', id, '.pdf'),"pdf_document",
output_dir = "output/7.20.output")
}
render(input = "lib/MCTS_pdf_mcb_7_3.Rmd",output_file = paste0('report.', id, '.pdf'),"pdf_document",
output_dir = "output/7.20.output")
}
render(input = "lib/MCTS_pdf_mcb_7_3.Rmd",output_file = paste0('report.', id, '.pdf'),"pdf_document",
output_dir = "output/7.20.output")
}
render(input = "lib/MCTS_pdf_mcb_7_3.Rmd",output_file = paste0('report.', id, '.pdf'),"pdf_document",
output_dir = "output/7.20.output")
}
render(input = "lib/MCTS_pdf_mcb_7_3.Rmd",output_file = paste0('report.', id, '.pdf'),"pdf_document",
output_dir = "output/7.20.output")
}
render(input = "lib/MCTS_pdf_mcb_7_3.Rmd",output_file = paste0('report.', id, '.pdf'),"pdf_document",
output_dir = "output/7.20.output")
}
render(input = "lib/MCTS_pdf_mcb_7_3.Rmd",output_file = paste0('report.', id, '.pdf'),"pdf_document",
output_dir = "output/7.20.output")
render(input = "lib/MCTS_pdf_mcb_7_3.Rmd",output_file = paste0('report.', id, '.pdf'),"pdf_document",
output_dir = "output/7.20.output")
render(input = "lib/MCTS_pdf_mcb_7_3.Rmd",output_file = paste0('report.', id, '.pdf'),"pdf_document",
output_dir = "output/7.20.output")
render(input = "lib/MCTS_pdf_mcb_7_3.Rmd",output_file = paste0('report.', id, '.pdf'),"pdf_document",
output_dir = "output/7.20.output")
submap <- map[map$UserName == id,] #create submap variable we can use to iterate through
subtaxa <- staxa[(colnames(staxa) %in% submap[,"X.SampleID"])] #create subtaxa variable - looks at each subject individually
subtaxasp <- setDT(subtaxa, keep.rownames=TRUE) #make rownames first column of frame
#food iteration
sub_foodmap <- merged_food[merged_food$UserName == id,] #sub food variable allows us to access one subject at a time (like submap)
sub_food <- food_map[(colnames(food_map) %in% sub_foodmap[,"variable"])]#sub food variable looks at each subject individually
sub_foodsp <- setDT(sub_food, keep.rownames = TRUE) #make rownames first column of frame
#alpha diversity iteration
subtaxaalpha <- taxa[(colnames(taxa) %in% submap[,"X.SampleID"])] #subtaxa variable used for alpha diversity
#beta diversity iteration
betataxa<- staxa[(colnames(staxa) %in% map[,"X.SampleID"])] #Create table with just taxa and subjects
betataxa <- t(betataxa) #transpose
taxa = taxa[,colSums(taxa)>=20000]                  #use taxa var to create OTU table (counts)
taxa <- read.delim("raw/youbet.txt", row =1)
#### Summarizing ####
split <- strsplit(rownames(taxa),";")                               # Split and rejoin on lv7
taxaStrings <- sapply(split,function(x) paste(x[1:7],collapse=";")) # level 7 is species, 8 is strain
taxa <- rowsum(taxa,taxaStrings)                                    # Collapse by taxonomy name
#### Manicure the samplenames, grab latest (mct study only and only when re-running things from a new taxa table)
#colnames(taxa) = gsub(".S[0-9]+.R1.001","",colnames(taxa));      # Clean old plate IDs
#taxa = taxa[,order(colnames(taxa))];              # Sort nicely by sample ID
#taxa = taxa[,-(grep("L0",colnames(taxa))-1)];     # Keep new runs only
#colnames(taxa) = gsub(".S[0-9]+.L001.R1.001","",colnames(taxa)); # Clean new plate IDs
#### Massaging ####
taxa = taxa[,colSums(taxa)>=20000]                  #use taxa var to create OTU table (counts)
staxa = taxa                                         #staxa is utilized for relative abundances, taxa for counts
staxa = sweep(staxa,2,colSums(staxa),'/');           # Normalize
staxa = staxa[order(rowMeans(staxa),decreasing=F),]; # Sort by avg. abundance
staxa = staxa[rowMeans(staxa) >= 0.0001,];            # Drop rare taxa (abundance)
staxa = staxa[rowSums(staxa > 0) > 10,];             # Drop rare taxa (prevalence)
###Instantiate Plots###
colnames(map)[2] <- "UserName" #Change col name from UserName.x to UserName - compatibility purposes
colnames(map)[3] <- "StudyDayNo" #Change col name from StudyDayNo.x to StudyDayNo - compatibility purposes
for (id in unique(map$UserName)){
#microbiome iteration
submap <- map[map$UserName == id,] #create submap variable we can use to iterate through
subtaxa <- staxa[(colnames(staxa) %in% submap[,"X.SampleID"])] #create subtaxa variable - looks at each subject individually
subtaxasp <- setDT(subtaxa, keep.rownames=TRUE) #make rownames first column of frame
#food iteration
sub_foodmap <- merged_food[merged_food$UserName == id,] #sub food variable allows us to access one subject at a time (like submap)
sub_food <- food_map[(colnames(food_map) %in% sub_foodmap[,"variable"])]#sub food variable looks at each subject individually
sub_foodsp <- setDT(sub_food, keep.rownames = TRUE) #make rownames first column of frame
#alpha diversity iteration
subtaxaalpha <- taxa[(colnames(taxa) %in% submap[,"X.SampleID"])] #subtaxa variable used for alpha diversity
#beta diversity iteration
betataxa<- staxa[(colnames(staxa) %in% map[,"X.SampleID"])] #Create table with just taxa and subjects
betataxa <- t(betataxa) #transpose
#rendering
render(input = "lib/MCTS_pdf_mcb_7_3.Rmd",output_file = paste0('report.', id, '.pdf'),"pdf_document",
output_dir = "output/7.20.output")
}
setwd("C:/Users/arzan/Desktop/Bioinformatics/MCT/GIT/zebra")
nutrition_table <- read.table("raw/Totals_to_use.txt", sep = "\t", header = TRUE, comment = "")
SampleID_map <- read.table("raw/SampleID_map.txt", sep = "\t", header = TRUE, comment = "")
map <-  merge(x=nutrition_table, y=SampleID_map, by= "X.SampleID")
food_map <-  read.table("raw/mct.food.otu.txt", sep = "\t", header = TRUE, comment = "")
rownames(food_map) <- food_map$taxonomy
food_map$taxonomy <- NULL #removing taxa string column
food_map$X.FOODID <- NULL #removing food names column
melted_food<- melt(food_map)
merged_food<- merge(x=melted_food, y=map, by.x = "variable", by.y= "X.SampleID", all.x=TRUE)
taxa <- read.delim("raw/youbet.txt", row =1)
split <- strsplit(rownames(taxa),";")                               # Split and rejoin on lv7
taxaStrings <- sapply(split,function(x) paste(x[1:7],collapse=";")) # level 7 is species, 8 is strain
taxa <- rowsum(taxa,taxaStrings)                                    # Collapse by taxonomy name
taxa = taxa[,colSums(taxa)>=20000]                  #use taxa var to create OTU table (counts)
staxa = taxa                                         #staxa is utilized for relative abundances, taxa for counts
staxa = sweep(staxa,2,colSums(staxa),'/');           # Normalize
staxa = staxa[order(rowMeans(staxa),decreasing=F),]; # Sort by avg. abundance
staxa = staxa[rowMeans(staxa) >= 0.0001,];            # Drop rare taxa (abundance)
staxa = staxa[rowSums(staxa > 0) > 10,];             # Drop rare taxa (prevalence)
colnames(map)[2] <- "UserName" #Change col name from UserName.x to UserName - compatibility purposes
colnames(map)[3] <- "StudyDayNo" #Change col name from StudyDayNo.x to StudyDayNo - compatibility purposes
for (id in unique(map$UserName)){
#microbiome iteration
submap <- map[map$UserName == id,] #create submap variable we can use to iterate through
subtaxa <- staxa[(colnames(staxa) %in% submap[,"X.SampleID"])] #create subtaxa variable - looks at each subject individually
subtaxasp <- setDT(subtaxa, keep.rownames=TRUE) #make rownames first column of frame
#food iteration
sub_foodmap <- merged_food[merged_food$UserName == id,] #sub food variable allows us to access one subject at a time (like submap)
sub_food <- food_map[(colnames(food_map) %in% sub_foodmap[,"variable"])]#sub food variable looks at each subject individually
sub_foodsp <- setDT(sub_food, keep.rownames = TRUE) #make rownames first column of frame
#alpha diversity iteration
subtaxaalpha <- taxa[(colnames(taxa) %in% submap[,"X.SampleID"])] #subtaxa variable used for alpha diversity
#beta diversity iteration
betataxa<- staxa[(colnames(staxa) %in% map[,"X.SampleID"])] #Create table with just taxa and subjects
betataxa <- t(betataxa) #transpose
#rendering
render(input = "lib/MCTS_pdf_mcb_7_3.Rmd",output_file = paste0('report.', id, '.pdf'),"pdf_document",
output_dir = "output/7.20.output")
}
submap <- map[map$UserName == id,] #create submap variable we can use to iterate through
subtaxa <- staxa[(colnames(staxa) %in% submap[,"X.SampleID"])] #create subtaxa variable - looks at each subject individually
subtaxasp <- setDT(subtaxa, keep.rownames=TRUE) #make rownames first column of frame
sub_foodmap <- merged_food[merged_food$UserName == id,] #sub food variable allows us to access one subject at a time (like submap)
sub_food <- food_map[(colnames(food_map) %in% sub_foodmap[,"variable"])]#sub food variable looks at each subject individually
sub_foodsp <- setDT(sub_food, keep.rownames = TRUE) #make rownames first column of frame
View(sub_food)
sub_foodmap <- merged_food[merged_food$UserName == id,] #sub food variable allows us to access one subject at a time (like submap)
View(sub_foodmap)
View(nutrition_table)
View(merged_food)
sub_foodmap <- merged_food[merged_food$UserName == id,] #sub food variable allows us to access one subject at a time (like submap)
View(sub_foodmap)
colnames(merged_food)[5]
colnames(merged_food)[4]
colnames(merged_food)[3]
colnames(merged_food)[3] <- "UserName" #Change col name from UserName.x to UserName - compatibility purposes
colnames(merged_food)[4] <- "StudyDayNo" #Change col name from StudyDayNo.x to StudyDayNo - compatibility purposes
for (id in unique(map$UserName)){
#microbiome iteration
submap <- map[map$UserName == id,] #create submap variable we can use to iterate through
subtaxa <- staxa[(colnames(staxa) %in% submap[,"X.SampleID"])] #create subtaxa variable - looks at each subject individually
subtaxasp <- setDT(subtaxa, keep.rownames=TRUE) #make rownames first column of frame
#food iteration
sub_foodmap <- merged_food[merged_food$UserName == id,] #sub food variable allows us to access one subject at a time (like submap)
sub_food <- food_map[(colnames(food_map) %in% sub_foodmap[,"variable"])]#sub food variable looks at each subject individually
sub_foodsp <- setDT(sub_food, keep.rownames = TRUE) #make rownames first column of frame
#alpha diversity iteration
subtaxaalpha <- taxa[(colnames(taxa) %in% submap[,"X.SampleID"])] #subtaxa variable used for alpha diversity
#beta diversity iteration
betataxa<- staxa[(colnames(staxa) %in% map[,"X.SampleID"])] #Create table with just taxa and subjects
betataxa <- t(betataxa) #transpose
#rendering
render(input = "lib/MCTS_pdf_mcb_7_3.Rmd",output_file = paste0('report.', id, '.pdf'),"pdf_document",
output_dir = "output/7.20.output")
}
for (id in unique(map$UserName)){
#microbiome iteration
submap <- map[map$UserName == id,] #create submap variable we can use to iterate through
subtaxa <- staxa[(colnames(staxa) %in% submap[,"X.SampleID"])] #create subtaxa variable - looks at each subject individually
subtaxasp <- setDT(subtaxa, keep.rownames=TRUE) #make rownames first column of frame
#food iteration
sub_foodmap <- merged_food[merged_food$UserName == id,] #sub food variable allows us to access one subject at a time (like submap)
sub_food <- food_map[(colnames(food_map) %in% sub_foodmap[,"variable"])]#sub food variable looks at each subject individually
sub_foodsp <- setDT(sub_food, keep.rownames = TRUE) #make rownames first column of frame
#alpha diversity iteration
subtaxaalpha <- taxa[(colnames(taxa) %in% submap[,"X.SampleID"])] #subtaxa variable used for alpha diversity
#beta diversity iteration
betataxa<- staxa[(colnames(staxa) %in% map[,"X.SampleID"])] #Create table with just taxa and subjects
betataxa <- t(betataxa) #transpose
#rendering
render(input = "lib/MCTS_pdf_mcb_7_3.Rmd",output_file = paste0('report.', id, '.pdf'),"pdf_document",
output_dir = "output/7.20.output")
}
for (id in unique(map$UserName)){
#microbiome iteration
submap <- map[map$UserName == id,] #create submap variable we can use to iterate through
subtaxa <- staxa[(colnames(staxa) %in% submap[,"X.SampleID"])] #create subtaxa variable - looks at each subject individually
subtaxasp <- setDT(subtaxa, keep.rownames=TRUE) #make rownames first column of frame
#food iteration
sub_foodmap <- merged_food[merged_food$UserName == id,] #sub food variable allows us to access one subject at a time (like submap)
sub_food <- food_map[(colnames(food_map) %in% sub_foodmap[,"variable"])]#sub food variable looks at each subject individually
sub_foodsp <- setDT(sub_food, keep.rownames = TRUE) #make rownames first column of frame
#alpha diversity iteration
subtaxaalpha <- taxa[(colnames(taxa) %in% submap[,"X.SampleID"])] #subtaxa variable used for alpha diversity
#beta diversity iteration
betataxa<- staxa[(colnames(staxa) %in% map[,"X.SampleID"])] #Create table with just taxa and subjects
betataxa <- t(betataxa) #transpose
#rendering
render(input = "lib/MCTS_pdf_mcb_7_3.Rmd",output_file = paste0('report.', id, '.pdf'),"pdf_document",
output_dir = "output/7.20.output")
}
for (id in unique(map$UserName)){
#microbiome iteration
submap <- map[map$UserName == id,] #create submap variable we can use to iterate through
subtaxa <- staxa[(colnames(staxa) %in% submap[,"X.SampleID"])] #create subtaxa variable - looks at each subject individually
subtaxasp <- setDT(subtaxa, keep.rownames=TRUE) #make rownames first column of frame
#food iteration
sub_foodmap <- merged_food[merged_food$UserName == id,] #sub food variable allows us to access one subject at a time (like submap)
sub_food <- food_map[(colnames(food_map) %in% sub_foodmap[,"variable"])]#sub food variable looks at each subject individually
sub_foodsp <- setDT(sub_food, keep.rownames = TRUE) #make rownames first column of frame
#alpha diversity iteration
subtaxaalpha <- taxa[(colnames(taxa) %in% submap[,"X.SampleID"])] #subtaxa variable used for alpha diversity
#beta diversity iteration
betataxa<- staxa[(colnames(staxa) %in% map[,"X.SampleID"])] #Create table with just taxa and subjects
betataxa <- t(betataxa) #transpose
#rendering
render(input = "lib/MCTS_pdf_mcb_7_3.Rmd",output_file = paste0('report.', id, '.pdf'),"pdf_document",
output_dir = "output/7.20.output")
}
for (id in unique(map$UserName)){
#microbiome iteration
submap <- map[map$UserName == id,] #create submap variable we can use to iterate through
subtaxa <- staxa[(colnames(staxa) %in% submap[,"X.SampleID"])] #create subtaxa variable - looks at each subject individually
subtaxasp <- setDT(subtaxa, keep.rownames=TRUE) #make rownames first column of frame
#food iteration
sub_foodmap <- merged_food[merged_food$UserName == id,] #sub food variable allows us to access one subject at a time (like submap)
sub_food <- food_map[(colnames(food_map) %in% sub_foodmap[,"variable"])]#sub food variable looks at each subject individually
sub_foodsp <- setDT(sub_food, keep.rownames = TRUE) #make rownames first column of frame
#alpha diversity iteration
subtaxaalpha <- taxa[(colnames(taxa) %in% submap[,"X.SampleID"])] #subtaxa variable used for alpha diversity
#beta diversity iteration
betataxa<- staxa[(colnames(staxa) %in% map[,"X.SampleID"])] #Create table with just taxa and subjects
betataxa <- t(betataxa) #transpose
#rendering
render(input = "lib/MCTS_pdf_mcb_7_3.Rmd",output_file = paste0('report.', id, '.pdf'),"pdf_document",
output_dir = "output/7.20.output")
}
ggplot(merge_food, aes(x = StudyDayNo, y = value, fill = rn)) +
geom_bar(stat = "identity") +
scale_x_discrete(drop = FALSE,labels=c(tick_label)) +
scale_fill_manual(values =colpal)+
theme_classic(base_family = "Helvetica") +
theme(strip.text.y = element_text(angle = 0, size = 8, face = "italic", family = "Helvetica"),
axis.text.x = element_text( hjust = 1, family = "Helvetica"),
plot.title =  element_text(hjust = 0.5, family = "Helvetica"),
strip.background = element_rect(color = "grey")) +
guides(fill = guide_legend(reverse = TRUE,
keywidth = 1,
keyheight = 1,
ncol = 1,
title= "Bacterial Species")) +
labs(y="Relative Abundance",x="Study Day Number")+
ggtitle("Main foods within your gut per day")
merge_food$rn[merge_food$value < 0.01] <- "<1% abundance"
#instantiate color brewer and axes tick mark amount
colpal<- colorRampPalette(brewer.pal(12,"Set3"))(500)
colpal<- sample(colpal,500, replace = FALSE)
tick_label <- seq(1:17)
ggplot(merge_food, aes(x = StudyDayNo, y = value, fill = rn)) +
geom_bar(stat = "identity") +
scale_x_discrete(drop = FALSE,labels=c(tick_label)) +
scale_fill_manual(values =colpal)+
theme_classic(base_family = "Helvetica") +
theme(strip.text.y = element_text(angle = 0, size = 8, face = "italic", family = "Helvetica"),
axis.text.x = element_text( hjust = 1, family = "Helvetica"),
plot.title =  element_text(hjust = 0.5, family = "Helvetica"),
strip.background = element_rect(color = "grey")) +
guides(fill = guide_legend(reverse = TRUE,
keywidth = 1,
keyheight = 1,
ncol = 1,
title= "Bacterial Species")) +
labs(y="Relative Abundance",x="Study Day Number")+
ggtitle("Main foods within your gut per day")
View(sub_food)
View(sub_foodsp)
sub_foodmap <- merged_food[merged_food$UserName == id,] #sub food variable allows us to access one subject at a time (like submap)
sub_food <- food_map[(colnames(food_map) %in% sub_foodmap[,"variable"])]#sub food variable looks at each subject individually
View(sub_food)
sub_foodmap <- merged_food[merged_food$UserName == id,] #sub food variable allows us to access one subject at a time (like submap)
sub_food <- food_map[(colnames(food_map) %in% sub_foodmap[,"variable"])]#sub food variable looks at each subject individually
sub_foodsp <- setDT(sub_food, keep.rownames = TRUE) #make rownames first column of frame
View(sub_food)
sub_food <- food_map[(colnames(food_map) %in% sub_foodmap[,"variable"])]#sub food variable looks at each subject individually
View(sub_food)
