#merge the two to create the mapping file
map <-  merge(x=nutrition_table, y=SampleID_map, by= "X.SampleID")
#read in the food table and assign it to pertinent variable
food_map <-  read.table("raw/mct.food.otu.txt", sep = "\t", header = TRUE, comment = "")
#### Read in taxa table ####
taxa <- read.delim("raw/youbet.txt", row =1)
#### Summarizing ####
split <- strsplit(rownames(taxa),";")                               # Split and rejoin on lv7
taxaStrings <- sapply(split,function(x) paste(x[1:7],collapse=";")) # level 7 is species, 8 is strain
taxa <- rowsum(taxa,taxaStrings)                                    # Collapse by taxonomy name
#### Manicure the samplenames, grab latest (mct study only and only when re-running things from a new taxa table)
#colnames(taxa) = gsub(".S[0-9]+.R1.001","",colnames(taxa));      # Clean old plate IDs
#taxa = taxa[,order(colnames(taxa))];              # Sort nicely by sample ID
#taxa = taxa[,-(grep("L0",colnames(taxa))-1)];     # Keep new runs only
#colnames(taxa) = gsub(".S[0-9]+.L001.R1.001","",colnames(taxa)); # Clean new plate IDs
#### Massaging ####
taxa = taxa[,colSums(taxa)>=20000]                  #use taxa var to create OTU table (counts)
staxa = taxa                                         #staxa is utilized for relative abundances, taxa for counts
staxa = sweep(staxa,2,colSums(staxa),'/');           # Normalize
staxa = staxa[order(rowMeans(staxa),decreasing=F),]; # Sort by avg. abundance
staxa = staxa[rowMeans(staxa) >= 0.0001,];            # Drop rare taxa (abundance)
staxa = staxa[rowSums(staxa > 0) > 10,];             # Drop rare taxa (prevalence)
colnames(map)[2] <- "UserName" #Change col name from UserName.x to UserName - compatibility purposes
colnames(map)[3] <- "StudyDayNo" #Change col name from StudyDayNo.x to StudyDayNo - compatibility purposes
View(food_map)
dim(food_map)
food_map[582]
view(food_map)
View(food_map)
View(food_map)
View(food_map[,1000:1500])
View(food_map[,1000:1482])
View(food_map[,1000:1400])
colnames(food_map)
food_map$taxonomy
food_map[,taxonomy]
food_map[taxonomy,]
food_map$taxonomy
dim(food_map)
foodmap[,582]
food_map[,582]
rownames(food_map) <- food_map$taxonomy
View(food_map)
dim(food_map)
food_map$taxonomy <- NULL
dim(food_map)
food_map$X.FOODID <- NULL #removing food names column
dim(food_map)
View(map)
display.brewer.all()
colnames(map)[2] <- "UserName" #Change col name from UserName.x to UserName - compatibility purposes
colnames(map)[3] <- "StudyDayNo" #Change col name from StudyDayNo.x to StudyDayNo - compatibility purposes
for (id in unique(map$UserName)){
submap <- map[map$UserName == id,] #create submap variable we can use to iterate through
subtaxa <- staxa[(colnames(staxa) %in% submap[,"X.SampleID"])] #create subtaxa variable - looks at each subject individually
subtaxasp <- setDT(subtaxa, keep.rownames=TRUE)
subtaxaalpha <- taxa[(colnames(taxa) %in% submap[,"X.SampleID"])] #subtaxa variable used for alpha diversity
betataxa<- staxa[(colnames(staxa) %in% map[,"X.SampleID"])] #Create table with just taxa and subjects
betataxa <- t(betataxa) #transpose
render(input = "lib/MCTS_pdf_mcb_7_3.Rmd",output_file = paste0('report.', id, '.pdf'),"pdf_document",
output_dir = "output/7.18.new.output")
}
for (id in unique(map$UserName)){
submap <- map[map$UserName == id,] #create submap variable we can use to iterate through
subtaxa <- staxa[(colnames(staxa) %in% submap[,"X.SampleID"])] #create subtaxa variable - looks at each subject individually
subtaxasp <- setDT(subtaxa, keep.rownames=TRUE)
subtaxaalpha <- taxa[(colnames(taxa) %in% submap[,"X.SampleID"])] #subtaxa variable used for alpha diversity
betataxa<- staxa[(colnames(staxa) %in% map[,"X.SampleID"])] #Create table with just taxa and subjects
betataxa <- t(betataxa) #transpose
render(input = "lib/MCTS_pdf_mcb_7_3.Rmd",output_file = paste0('report.', id, '.pdf'),"pdf_document",
output_dir = "output/7.18.new.output")
}
display.brewer.all()
colpal<- colorRampPalette(brewer.pal(5,"Set3"))(20)
meltdf<- melt(subtaxasp)
#merge to get access to Day var
mergedf<- merge(x=meltdf, y=map, by.x = "variable", by.y= "X.SampleID", all.x=TRUE)
#convert our dataframe species (rn) column to a character
mergedf$rn <- as.character(mergedf$rn)
#series of gsub commands meant to neaten and clarify legend content
mergedf$rn <- gsub(".*s__", "", mergedf$rn)
mergedf$rn <- gsub("\\[", "",mergedf$rn)
mergedf$rn <- gsub("\\]", "",mergedf$rn)
mergedf$rn <- gsub("_", " ",mergedf$rn)
#create <10% abundance category
mergedf$rn[mergedf$value < 0.07] <- "<7% abundance"
#instantiate color brewer and axes tick mark amount
colpal<- colorRampPalette(brewer.pal(5,"Set3"))(20)
#colpal<- sample(colpal,37, replace = FALSE)
tick_label <- seq(1:17)
ggplot(mergedf, aes(x = StudyDayNo, y = value, fill = rn)) +
geom_bar(stat = "identity") +
scale_x_discrete(drop = FALSE,labels=c(tick_label)) +
scale_fill_manual(values =colpal)+
theme_classic(base_family = "Helvetica") +
theme(strip.text.y = element_text(angle = 0, size = 8, face = "italic", family = "Helvetica"),
axis.text.x = element_text( hjust = 1, family = "Helvetica"),
plot.title =  element_text(hjust = 0.5, family = "Helvetica"),
strip.background = element_rect(color = "grey")) +
guides(fill = guide_legend(reverse = TRUE,
keywidth = 1,
keyheight = 1,
ncol = 1,
title= "Bacterial Species")) +
labs(y="Relative Abundance",x="Study Day Number")+
ggtitle("Main species within your gut per day")
meltdf<- melt(subtaxasp)
#merge to get access to Day var
mergedf<- merge(x=meltdf, y=map, by.x = "variable", by.y= "X.SampleID", all.x=TRUE)
#convert our dataframe species (rn) column to a character
mergedf$rn <- as.character(mergedf$rn)
#series of gsub commands meant to neaten and clarify legend content
mergedf$rn <- gsub(".*s__", "", mergedf$rn)
mergedf$rn <- gsub("\\[", "",mergedf$rn)
mergedf$rn <- gsub("\\]", "",mergedf$rn)
mergedf$rn <- gsub("_", " ",mergedf$rn)
#create <10% abundance category
mergedf$rn[mergedf$value < 0.07] <- "<7% abundance"
#instantiate color brewer and axes tick mark amount
colpal<- colorRampPalette(brewer.pal(5,"Set3"))(20)
#colpal<- sample(colpal,37, replace = FALSE)
tick_label <- seq(1:17)
ggplot(mergedf, aes(x = StudyDayNo, y = value, fill = rn)) +
geom_bar(stat = "identity") +
scale_x_discrete(drop = FALSE,labels=c(tick_label)) +
scale_fill_manual(values =colpal)+
theme_classic(base_family = "Helvetica") +
theme(strip.text.y = element_text(angle = 0, size = 8, face = "italic", family = "Helvetica"),
axis.text.x = element_text( hjust = 1, family = "Helvetica"),
plot.title =  element_text(hjust = 0.5, family = "Helvetica"),
strip.background = element_rect(color = "grey")) +
guides(fill = guide_legend(reverse = TRUE,
keywidth = 1,
keyheight = 1,
ncol = 1,
title= "Bacterial Species")) +
labs(y="Relative Abundance",x="Study Day Number")+
ggtitle("Main species within your gut per day")
meltdf<- melt(subtaxasp)
#merge to get access to Day var
mergedf<- merge(x=meltdf, y=map, by.x = "variable", by.y= "X.SampleID", all.x=TRUE)
#convert our dataframe species (rn) column to a character
mergedf$rn <- as.character(mergedf$rn)
#series of gsub commands meant to neaten and clarify legend content
mergedf$rn <- gsub(".*s__", "", mergedf$rn)
mergedf$rn <- gsub("\\[", "",mergedf$rn)
mergedf$rn <- gsub("\\]", "",mergedf$rn)
mergedf$rn <- gsub("_", " ",mergedf$rn)
#create <10% abundance category
mergedf$rn[mergedf$value < 0.07] <- "<7% abundance"
#instantiate color brewer and axes tick mark amount
colpal<- colorRampPalette(brewer.pal(5,"Set3"))(20)
#colpal<- sample(colpal,37, replace = FALSE)
tick_label <- seq(1:17)
ggplot(mergedf, aes(x = StudyDayNo, y = value, fill = rn)) +
geom_bar(stat = "identity") +
scale_x_discrete(drop = FALSE,labels=c(tick_label)) +
scale_fill_manual(values =colpal)+
theme_classic(base_family = "Helvetica") +
theme(strip.text.y = element_text(angle = 0, size = 8, face = "italic", family = "Helvetica"),
axis.text.x = element_text( hjust = 1, family = "Helvetica"),
plot.title =  element_text(hjust = 0.5, family = "Helvetica"),
strip.background = element_rect(color = "grey")) +
guides(fill = guide_legend(reverse = TRUE,
keywidth = 1,
keyheight = 1,
ncol = 1,
title= "Bacterial Species")) +
labs(y="Relative Abundance",x="Study Day Number")+
ggtitle("Main species within your gut per day")
for (id in unique(map$UserName)){
submap <- map[map$UserName == id,] #create submap variable we can use to iterate through
subtaxa <- staxa[(colnames(staxa) %in% submap[,"X.SampleID"])] #create subtaxa variable - looks at each subject individually
subtaxasp <- setDT(subtaxa, keep.rownames=TRUE)
subtaxaalpha <- taxa[(colnames(taxa) %in% submap[,"X.SampleID"])] #subtaxa variable used for alpha diversity
betataxa<- staxa[(colnames(staxa) %in% map[,"X.SampleID"])] #Create table with just taxa and subjects
betataxa <- t(betataxa) #transpose
render(input = "lib/MCTS_pdf_mcb_7_3.Rmd",output_file = paste0('report.', id, '.pdf'),"pdf_document",
output_dir = "output/7.20.output")
}
for (id in unique(map$UserName)){
submap <- map[map$UserName == id,] #create submap variable we can use to iterate through
subtaxa <- staxa[(colnames(staxa) %in% submap[,"X.SampleID"])] #create subtaxa variable - looks at each subject individually
subtaxasp <- setDT(subtaxa, keep.rownames=TRUE)
subtaxaalpha <- taxa[(colnames(taxa) %in% submap[,"X.SampleID"])] #subtaxa variable used for alpha diversity
betataxa<- staxa[(colnames(staxa) %in% map[,"X.SampleID"])] #Create table with just taxa and subjects
betataxa <- t(betataxa) #transpose
render(input = "lib/MCTS_pdf_mcb_7_3.Rmd",output_file = paste0('report.', id, '.pdf'),"pdf_document",
output_dir = "output/7.20.output")
}
ggplot(PCOA) +
geom_point(aes(x=PC1,y=PC2, col=UserName, shape=UserName, size=4),alpha=.085) + #gives axes and item of focus
labs(title=paste0(" Day-To-Day Variation in Beta Diversity of the Gut Microbiome - PCOA -  ", id) ) +
guides( colour = guide_legend(override.aes = list(size=5,alpha=1))) +
scale_shape_manual(values=shape_pal3) +
scale_color_manual(values=colpal)+
theme_classic(base_family = "Helvetica") +
theme(legend.position = "bottom", plot.title = element_text(size = 20, hjust = 0.5))
ggplot(PCOA) +
geom_point(aes(x=PC1,y=PC2, col=UserName, shape=UserName, size=4),alpha=.085) + #gives axes and item of focus
labs(title=paste0(" Day-To-Day Variation in Beta Diversity of the Gut Microbiome - PCOA -  ", id) ) +
guides( colour = guide_legend(override.aes = list(size=5,alpha=1))) +
scale_shape_manual(values=shape_pal3) +
scale_color_manual(values=colpal)+
theme_classic(base_family = "Helvetica") +
theme(legend.position = "bottom", plot.title = element_text(size = 20, hjust = 0.5))
for (id in unique(map$UserName)){
submap <- map[map$UserName == id,] #create submap variable we can use to iterate through
subtaxa <- staxa[(colnames(staxa) %in% submap[,"X.SampleID"])] #create subtaxa variable - looks at each subject individually
subtaxasp <- setDT(subtaxa, keep.rownames=TRUE)
subtaxaalpha <- taxa[(colnames(taxa) %in% submap[,"X.SampleID"])] #subtaxa variable used for alpha diversity
betataxa<- staxa[(colnames(staxa) %in% map[,"X.SampleID"])] #Create table with just taxa and subjects
betataxa <- t(betataxa) #transpose
render(input = "lib/MCTS_pdf_mcb_7_3.Rmd",output_file = paste0('report.', id, '.pdf'),"pdf_document",
output_dir = "output/7.20.output")
}
for (id in unique(map$UserName)){
submap <- map[map$UserName == id,] #create submap variable we can use to iterate through
subtaxa <- staxa[(colnames(staxa) %in% submap[,"X.SampleID"])] #create subtaxa variable - looks at each subject individually
subtaxasp <- setDT(subtaxa, keep.rownames=TRUE)
subtaxaalpha <- taxa[(colnames(taxa) %in% submap[,"X.SampleID"])] #subtaxa variable used for alpha diversity
betataxa<- staxa[(colnames(staxa) %in% map[,"X.SampleID"])] #Create table with just taxa and subjects
betataxa <- t(betataxa) #transpose
render(input = "lib/MCTS_pdf_mcb_7_3.Rmd",output_file = paste0('report.', id, '.pdf'),"pdf_document",
output_dir = "output/7.20.output")
}
for (id in unique(map$UserName)){
submap <- map[map$UserName == id,] #create submap variable we can use to iterate through
subtaxa <- staxa[(colnames(staxa) %in% submap[,"X.SampleID"])] #create subtaxa variable - looks at each subject individually
subtaxasp <- setDT(subtaxa, keep.rownames=TRUE)
subtaxaalpha <- taxa[(colnames(taxa) %in% submap[,"X.SampleID"])] #subtaxa variable used for alpha diversity
betataxa<- staxa[(colnames(staxa) %in% map[,"X.SampleID"])] #Create table with just taxa and subjects
betataxa <- t(betataxa) #transpose
render(input = "lib/MCTS_pdf_mcb_7_3.Rmd",output_file = paste0('report.', id, '.pdf'),"pdf_document",
output_dir = "output/7.20.output")
}
food_merge <-  merge(x=map, y=food_map, by= "UserName")
food_merge <-  merge(x=map, y=food_map, by= "X.SampleID")
test <- t(food_map)
View(taxa)
View(food_map)
yeah <- t(food_map)
View(yeah)
yeah2 <- setDT(yeah,keep.rownames= TRUE)
yeah <- t(food_map)
yeah2 <- setDT(yeah,keep.rownames= TRUE)
class(yeah)
yeah2 <- setDT(yeah,keep.rownames= TRUE)
A<- melt(food_map)
View(A)
mergetest<- merge(x=A, y=map, by.x = "variable", by.y= "X.SampleID", all.x=TRUE)
View(mergetest)
View(subtaxasp)
View(submap)
haha <- merged_food[merged_food$UserName == id,]
melted_food<- melt(food_map)
merged_food<- merge(x=melted_food, y=map, by.x = "variable", by.y= "X.SampleID", all.x=TRUE)
haha <- merged_food[merged_food$UserName == id,]
View(haha)
sub_food <- merged_food[merged_food$UserName == id,] #sub food variable allows us to access one subject at a time (like submap)
View(sub_food)
mergedf$rn
View(mergedf)
View(subtaxasp)
ggplot(sub_food, aes(x = StudyDayNo, y = value)) +
geom_bar(stat = "identity") +
scale_x_discrete(drop = FALSE,labels=c(tick_label)) +
scale_fill_manual(values =colpal)+
theme_classic(base_family = "Helvetica") +
theme(strip.text.y = element_text(angle = 0, size = 8, face = "italic", family = "Helvetica"),
axis.text.x = element_text( hjust = 1, family = "Helvetica"),
plot.title =  element_text(hjust = 0.5, family = "Helvetica"),
strip.background = element_rect(color = "grey")) +
guides(fill = guide_legend(reverse = TRUE,
keywidth = 1,
keyheight = 1,
ncol = 1,
title= "Bacterial Species")) +
labs(y="Relative Abundance",x="Study Day Number")+
ggtitle("Main species within your gut per day")
for (id in unique(map$UserName)){
submap <- map[map$UserName == id,] #create submap variable we can use to iterate through
sub_food <- merged_food[merged_food$UserName == id,] #sub food variable allows us to access one subject at a time (like submap)
subtaxa <- staxa[(colnames(staxa) %in% submap[,"X.SampleID"])] #create subtaxa variable - looks at each subject individually
subtaxasp <- setDT(subtaxa, keep.rownames=TRUE)
subtaxaalpha <- taxa[(colnames(taxa) %in% submap[,"X.SampleID"])] #subtaxa variable used for alpha diversity
betataxa<- staxa[(colnames(staxa) %in% map[,"X.SampleID"])] #Create table with just taxa and subjects
betataxa <- t(betataxa) #transpose
render(input = "lib/MCTS_pdf_mcb_7_3.Rmd",output_file = paste0('report.', id, '.pdf'),"pdf_document",
output_dir = "output/7.20.output")
}
View(subtaxa)
View(merged_food)
View(melted_food)
View(food_map)
food_map <- setDT(food_map, keep.rownames = TRUE)
View(food_map)
View(staxa)
food_map <-  read.table("raw/mct.food.otu.txt", sep = "\t", header = TRUE, comment = "")
#set the row names of the food map file to the taxonomy strings
rownames(food_map) <- food_map$taxonomy
#remove the taxonomy string column and the food names column (redundant)
food_map$taxonomy <- NULL #removing taxa string column
food_map$X.FOODID <- NULL #removing food names column
View(food_map)
View(merged_food)
sub_foodmap <- merged_food[merged_food$UserName == id,] #sub food variable allows us to access one subject at a time (like submap)
sub_foodsp <- setDT(food_map, keep.rownames = TRUE) #make rownames first column of frame
sub_food <- food_map[(colnames(food_map) %in% sub_foodmap[,"variable"])]#sub food variable looks at each subject individually
sub_food <- food_map[(colnames(food_map) %in% sub_foodmap[,"variable"])]#sub food variable looks at each subject individually
View(sub_foodmap)
submap <- map[map$UserName == id,] #create submap variable we can use to iterate through
subtaxa <- staxa[(colnames(staxa) %in% submap[,"X.SampleID"])] #create subtaxa variable - looks at each subject individually
subtaxasp <- setDT(subtaxa, keep.rownames=TRUE) #make rownames first column of frame
sub_foodmap <- merged_food[merged_food$UserName == id,] #sub food variable allows us to access one subject at a time (like submap)
sub_food <- food_map[(colnames(food_map) %in% sub_foodmap[,"variable"])]#sub food variable looks at each subject individually
map <-  merge(x=nutrition_table, y=SampleID_map, by= "X.SampleID")
#read in the food table and assign it to pertinent variable
food_map <-  read.table("raw/mct.food.otu.txt", sep = "\t", header = TRUE, comment = "")
#set the row names of the food map file to the taxonomy strings
rownames(food_map) <- food_map$taxonomy
#remove the taxonomy string column and the food names column (redundant)
food_map$taxonomy <- NULL #removing taxa string column
food_map$X.FOODID <- NULL #removing food names column
View(food_map)
sub_foodmap <- merged_food[merged_food$UserName == id,] #sub food variable allows us to access one subject at a time (like submap)
sub_food <- food_map[(colnames(food_map) %in% sub_foodmap[,"X.SampleID"])]#sub food variable looks at each subject individually
sub_food <- food_map[(colnames(food_map) %in% sub_foodmap[,"variable"])]#sub food variable looks at each subject individually
sub_foodsp <- setDT(food_map, keep.rownames = TRUE) #make rownames first column of frame
View(sub_foodsp)
sub_foodsp <- setDT(sub_food, keep.rownames = TRUE) #make rownames first column of frame
View(sub_foodmap)
View(sub_foodsp)
View(subtaxasp)
sub_food <- food_map[(colnames(food_map) %in% sub_foodmap[,"variable"])]#sub food variable looks at each subject individually
View(food_map)
View(staxa)
food_map <-  read.table("raw/mct.food.otu.txt", sep = "\t", header = TRUE, comment = "")
#set the row names of the food map file to the taxonomy strings
rownames(food_map) <- food_map$taxonomy
#remove the taxonomy string column and the food names column (redundant)
food_map$taxonomy <- NULL #removing taxa string column
food_map$X.FOODID <- NULL #removing food names column
sub_foodmap <- merged_food[merged_food$UserName == id,] #sub food variable allows us to access one subject at a time (like submap)
sub_food <- food_map[(colnames(food_map) %in% sub_foodmap[,"variable"])]#sub food variable looks at each subject individually
sub_foodsp <- setDT(sub_food, keep.rownames = TRUE) #make rownames first column of frame
View(food_map)
View(sub_foodsp)
View(sub_foodmap)
melt_food<- melt(sub_foodsp)
View(meltdf)
melt_food<- melt(sub_foodsp)
View(melt_food)
merge_food<- merge(x=melt_food, y=map, by.x = "variable", by.y= "X.SampleID", all.x=TRUE)
View(merge_food)
View(mergedf)
merge_food$rn <- as.character(merge_food$rn)
#series of gsub commands meant to neaten and clarify legend content
merge_food$rn <- gsub(".*s__", "", merge_food$rn)
merge_food$rn <- gsub("\\[", "",merge_food$rn)
merge_food$rn <- gsub("\\]", "",merge_food$rn)
merge_food$rn <- gsub("_", " ",merge_food$rn)
merge_food$rn[merge_food$value < 0.07] <- "<7% abundance"
colpal<- colorRampPalette(brewer.pal(9,"Set3"))(37)
colpal<- sample(colpal,37, replace = FALSE)
tick_label <- seq(1:17)
melt_food<- melt(sub_foodsp)
#merge to get access to Day var (differs from merged_food)
merge_food<- merge(x=melt_food, y=map, by.x = "variable", by.y= "X.SampleID", all.x=TRUE)
#convert our dataframe species (rn) column to a character
merge_food$rn <- as.character(merge_food$rn)
#series of gsub commands meant to neaten and clarify legend content
merge_food$rn <- gsub(".*s__", "", merge_food$rn)
merge_food$rn <- gsub("\\[", "",merge_food$rn)
merge_food$rn <- gsub("\\]", "",merge_food$rn)
merge_food$rn <- gsub("_", " ",merge_food$rn)
#create <7% abundance category
merge_food$rn[merge_food$value < 0.07] <- "<7% abundance"
#instantiate color brewer and axes tick mark amount
colpal<- colorRampPalette(brewer.pal(9,"Set3"))(37)
colpal<- sample(colpal,37, replace = FALSE)
tick_label <- seq(1:17)
ggplot(merge_food, aes(x = StudyDayNo, y = value, fill = rn)) +
geom_bar(stat = "identity") +
scale_x_discrete(drop = FALSE,labels=c(tick_label)) +
scale_fill_manual(values =colpal)+
theme_classic(base_family = "Helvetica") +
theme(strip.text.y = element_text(angle = 0, size = 8, face = "italic", family = "Helvetica"),
axis.text.x = element_text( hjust = 1, family = "Helvetica"),
plot.title =  element_text(hjust = 0.5, family = "Helvetica"),
strip.background = element_rect(color = "grey")) +
guides(fill = guide_legend(reverse = TRUE,
keywidth = 1,
keyheight = 1,
ncol = 1,
title= "Bacterial Species")) +
labs(y="Relative Abundance",x="Study Day Number")+
ggtitle("Main foods within your gut per day")
colnames(merge_food)[3]
colnames(merge_food)[4]
colnames(merge_food)[5]
colnames(merge_food)[4] <- "UserName" #Change col name from UserName.x to UserName - compatibility purposes
colnames(merge_food)[5] <- "StudyDayNo" #Change col name from StudyDayNo.x to StudyDayNo - compatibility purposes
colnames(merge_food)[4] <- "UserName" #Change col name from UserName.x to UserName - compatibility purposes
colnames(merge_food)[5]
colnames(merge_food)[4]
melt_food<- melt(sub_foodsp)
#merge to get access to Day var (differs from merged_food)
merge_food<- merge(x=melt_food, y=map, by.x = "variable", by.y= "X.SampleID", all.x=TRUE)
#rename columns to get rid of the .x following UserName and StudyDayNo
colnames(merge_food)[4] <- "UserName" #Change col name from UserName.x to UserName - compatibility purposes
colnames(merge_food)[5] <- "StudyDayNo" #Change col name from StudyDayNo.x to StudyDayNo - compatibility purposes
#convert our dataframe species (rn) column to a character
merge_food$rn <- as.character(merge_food$rn)
#series of gsub commands meant to neaten and clarify legend content
merge_food$rn <- gsub(".*s__", "", merge_food$rn)
merge_food$rn <- gsub("\\[", "",merge_food$rn)
merge_food$rn <- gsub("\\]", "",merge_food$rn)
merge_food$rn <- gsub("_", " ",merge_food$rn)
#create <7% abundance category
merge_food$rn[merge_food$value < 0.07] <- "<7% abundance"
#instantiate color brewer and axes tick mark amount
colpal<- colorRampPalette(brewer.pal(9,"Set3"))(37)
colpal<- sample(colpal,37, replace = FALSE)
tick_label <- seq(1:17)
ggplot(merge_food, aes(x = StudyDayNo, y = value, fill = rn)) +
geom_bar(stat = "identity") +
scale_x_discrete(drop = FALSE,labels=c(tick_label)) +
scale_fill_manual(values =colpal)+
theme_classic(base_family = "Helvetica") +
theme(strip.text.y = element_text(angle = 0, size = 8, face = "italic", family = "Helvetica"),
axis.text.x = element_text( hjust = 1, family = "Helvetica"),
plot.title =  element_text(hjust = 0.5, family = "Helvetica"),
strip.background = element_rect(color = "grey")) +
guides(fill = guide_legend(reverse = TRUE,
keywidth = 1,
keyheight = 1,
ncol = 1,
title= "Bacterial Species")) +
labs(y="Relative Abundance",x="Study Day Number")+
ggtitle("Main foods within your gut per day")
melt_food<- melt(sub_foodsp)
#merge to get access to Day var (differs from merged_food)
merge_food<- merge(x=melt_food, y=map, by.x = "variable", by.y= "X.SampleID", all.x=TRUE)
#rename columns to get rid of the .x following UserName and StudyDayNo
colnames(merge_food)[4] <- "UserName" #Change col name from UserName.x to UserName - compatibility purposes
colnames(merge_food)[5] <- "StudyDayNo" #Change col name from StudyDayNo.x to StudyDayNo - compatibility purposes
#convert our dataframe species (rn) column to a character
merge_food$rn <- as.character(merge_food$rn)
#series of gsub commands meant to neaten and clarify legend content
merge_food$rn <- gsub(".*s__", "", merge_food$rn)
merge_food$rn <- gsub("\\[", "",merge_food$rn)
merge_food$rn <- gsub("\\]", "",merge_food$rn)
merge_food$rn <- gsub("_", " ",merge_food$rn)
#create <7% abundance category
merge_food$rn[merge_food$value < 0.07] <- "<7% abundance"
#instantiate color brewer and axes tick mark amount
colpal<- colorRampPalette(brewer.pal(12,"Set3"))(95)
colpal<- sample(colpal,95, replace = FALSE)
tick_label <- seq(1:17)
ggplot(merge_food, aes(x = StudyDayNo, y = value, fill = rn)) +
geom_bar(stat = "identity") +
scale_x_discrete(drop = FALSE,labels=c(tick_label)) +
scale_fill_manual(values =colpal)+
theme_classic(base_family = "Helvetica") +
theme(strip.text.y = element_text(angle = 0, size = 8, face = "italic", family = "Helvetica"),
axis.text.x = element_text( hjust = 1, family = "Helvetica"),
plot.title =  element_text(hjust = 0.5, family = "Helvetica"),
strip.background = element_rect(color = "grey")) +
guides(fill = guide_legend(reverse = TRUE,
keywidth = 1,
keyheight = 1,
ncol = 1,
title= "Bacterial Species")) +
labs(y="Relative Abundance",x="Study Day Number")+
ggtitle("Main foods within your gut per day")
for (id in unique(map$UserName)){
#microbiome iteration
submap <- map[map$UserName == id,] #create submap variable we can use to iterate through
subtaxa <- staxa[(colnames(staxa) %in% submap[,"X.SampleID"])] #create subtaxa variable - looks at each subject individually
subtaxasp <- setDT(subtaxa, keep.rownames=TRUE) #make rownames first column of frame
#food iteration
sub_foodmap <- merged_food[merged_food$UserName == id,] #sub food variable allows us to access one subject at a time (like submap)
sub_food <- food_map[(colnames(food_map) %in% sub_foodmap[,"variable"])]#sub food variable looks at each subject individually
sub_foodsp <- setDT(sub_food, keep.rownames = TRUE) #make rownames first column of frame
#alpha diversity iteration
subtaxaalpha <- taxa[(colnames(taxa) %in% submap[,"X.SampleID"])] #subtaxa variable used for alpha diversity
#beta diversity iteration
betataxa<- staxa[(colnames(staxa) %in% map[,"X.SampleID"])] #Create table with just taxa and subjects
betataxa <- t(betataxa) #transpose
#rendering
render(input = "lib/MCTS_pdf_mcb_7_3.Rmd",output_file = paste0('report.', id, '.pdf'),"pdf_document",
output_dir = "output/7.20.output")
}
for (id in unique(map$UserName)){
#microbiome iteration
submap <- map[map$UserName == id,] #create submap variable we can use to iterate through
subtaxa <- staxa[(colnames(staxa) %in% submap[,"X.SampleID"])] #create subtaxa variable - looks at each subject individually
subtaxasp <- setDT(subtaxa, keep.rownames=TRUE) #make rownames first column of frame
#food iteration
sub_foodmap <- merged_food[merged_food$UserName == id,] #sub food variable allows us to access one subject at a time (like submap)
sub_food <- food_map[(colnames(food_map) %in% sub_foodmap[,"variable"])]#sub food variable looks at each subject individually
sub_foodsp <- setDT(sub_food, keep.rownames = TRUE) #make rownames first column of frame
#alpha diversity iteration
subtaxaalpha <- taxa[(colnames(taxa) %in% submap[,"X.SampleID"])] #subtaxa variable used for alpha diversity
#beta diversity iteration
betataxa<- staxa[(colnames(staxa) %in% map[,"X.SampleID"])] #Create table with just taxa and subjects
betataxa <- t(betataxa) #transpose
#rendering
render(input = "lib/MCTS_pdf_mcb_7_3.Rmd",output_file = paste0('report.', id, '.pdf'),"pdf_document",
output_dir = "output/7.20.output")
}
