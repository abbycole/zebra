geom_hline(size=.75, color="grey", yintercept = med)+
geom_hline(size=.75, color="blue", yintercept = q1)+
geom_hline(size=.75, color="blue", yintercept = q3)+
labs(x= "Study Day Number",y="Alpha Diversity (Shannon)")+
guides(fill=FALSE)+
ggtitle("Alpha diversity of your gut microbiome")
ggplot(merged_alpha, aes(x=StudyDayNo, y=alphad)) +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))+
scale_x_continuous(breaks = c(tick_label)) +
theme_classic() +
geom_smooth(color = "Black", fill = "#8DD3C7") +
geom_point() +
geom_hline(size=.75, color="grey", yintercept = med)+
geom_hline(size=.75, color="#FFEF6F", yintercept = q1)+
geom_hline(size=.75, color="blue", yintercept = q3)+
labs(x= "Study Day Number",y="Alpha Diversity (Shannon)")+
guides(fill=FALSE)+
ggtitle("Alpha diversity of your gut microbiome")
ggplot(merged_alpha, aes(x=StudyDayNo, y=alphad)) +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))+
scale_x_continuous(breaks = c(tick_label)) +
theme_classic() +
geom_smooth(color = "Black", fill = "#8DD3C7") +
geom_point() +
geom_hline(size=.75, color="grey", yintercept = med)+
geom_hline(size=.75, color="#E3D5DC", yintercept = q1)+
geom_hline(size=.75, color="blue", yintercept = q3)+
labs(x= "Study Day Number",y="Alpha Diversity (Shannon)")+
guides(fill=FALSE)+
ggtitle("Alpha diversity of your gut microbiome")
?geom_hline
ggplot(merged_alpha, aes(x=StudyDayNo, y=alphad)) +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))+
scale_x_continuous(breaks = c(tick_label)) +
theme_classic() +
geom_smooth(color = "Black", fill = "#8DD3C7") +
geom_point() +
geom_hline(size=.75, color="grey", yintercept = med, linetype = "dashed")+
geom_hline(size=.75, color="#E3D5DC", yintercept = q1)+
geom_hline(size=.75, color="blue", yintercept = q3)+
labs(x= "Study Day Number",y="Alpha Diversity (Shannon)")+
guides(fill=FALSE)+
ggtitle("Alpha diversity of your gut microbiome")
ggplot(merged_alpha, aes(x=StudyDayNo, y=alphad)) +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))+
scale_x_continuous(breaks = c(tick_label)) +
theme_classic() +
geom_smooth(color = "Black", fill = "#8DD3C7") +
geom_point() +
geom_hline(size=.75, color="grey", yintercept = med)+
geom_hline(size=.75, color="#E3D5DC", yintercept = q1, linetype = "dashed")+
geom_hline(size=.75, color="#E3D5DC", yintercept = q3, linetype = "dashed")+
labs(x= "Study Day Number",y="Alpha Diversity (Shannon)")+
guides(fill=FALSE)+
ggtitle("Alpha diversity of your gut microbiome")
ggplot(merged_alpha, aes(x=StudyDayNo, y=alphad)) +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))+
scale_x_continuous(breaks = c(tick_label)) +
theme_classic() +
geom_smooth(color = "Black", fill = "#8DD3C7") +
geom_point() +
geom_hline(size=.75, color="grey", yintercept = med)+
geom_hline(size=.75, color="#E3D5DC", yintercept = q1, linetype = "dashed")+
geom_hline(size=.75, color="#E3D5DC", yintercept = q3, linetype = "dashed")+
annotate(geom="text", label="Study Median",x=15,y=med, vjust=-1, size = 3) +
labs(x= "Study Day Number",y="Alpha Diversity (Shannon)")+
guides(fill=FALSE)+
ggtitle("Alpha diversity of your gut microbiome")
ggplot(merged_alpha, aes(x=StudyDayNo, y=alphad)) +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))+
scale_x_continuous(breaks = c(tick_label)) +
theme_classic() +
geom_smooth(color = "Black", fill = "#8DD3C7") +
geom_point() +
geom_hline(size=.75, color="grey", yintercept = med)+
geom_hline(size=.75, color="#E3D5DC", yintercept = q1, linetype = "dashed")+
geom_hline(size=.75, color="#E3D5DC", yintercept = q3, linetype = "dashed")+
annotate(geom="text", label="Study Median",x=15,y=med, vjust=-1, size = 3) +
annotate(geom="text", label="Study Median",x=15,y=q1, vjust=-1, size = 3) +
annotate(geom="text", label="Study Median",x=15,y=q3, vjust=-1, size = 3) +
labs(x= "Study Day Number",y="Alpha Diversity (Shannon)")+
guides(fill=FALSE)+
ggtitle("Alpha diversity of your gut microbiome")
ggplot(merged_alpha, aes(x=StudyDayNo, y=alphad)) +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))+
scale_x_continuous(breaks = c(tick_label)) +
theme_classic() +
geom_smooth(color = "Black", fill = "#8DD3C7") +
geom_point() +
geom_hline(size=.75, color="grey", yintercept = med)+
geom_hline(size=.75, color="#E3D5DC", yintercept = q1, linetype = "dashed")+
geom_hline(size=.75, color="#E3D5DC", yintercept = q3, linetype = "dashed")+
annotate(geom="text", label="Study Median",x=15,y=med, vjust=-1, size = 3) +
annotate(geom="text", label="25th percentile",x=15,y=q1, vjust=-1, size = 3) +
annotate(geom="text", label="75th percentile",x=15,y=q3, vjust=-1, size = 3) +
labs(x= "Study Day Number",y="Alpha Diversity (Shannon)")+
guides(fill=FALSE)+
ggtitle("Alpha diversity of your gut microbiome")
ggplot(merged_alpha, aes(x=StudyDayNo, y=alphad)) +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))+
scale_x_continuous(breaks = c(tick_label)) +
theme_classic() +
geom_smooth(color = "Black", fill = "#8DD3C7") +
geom_point() +
geom_hline(size=.75, color="grey", yintercept = med)+
geom_hline(size=.75, color="#E3D5DC", yintercept = q1, linetype = "dashed")+
geom_hline(size=.75, color="#E3D5DC", yintercept = q3, linetype = "dashed")+
annotate(geom="text", label="Median",x=15,y=med, vjust=-1, size = 3) +
annotate(geom="text", label="25th percentile",x=15,y=q1, vjust=-1, size = 3) +
annotate(geom="text", label="75th percentile",x=15,y=q3, vjust=-1, size = 3) +
labs(x= "Study Day Number",y="Alpha Diversity (Shannon)")+
guides(fill=FALSE)+
ggtitle("Alpha diversity of your gut microbiome")
```{r, warning=FALSE, message=FALSE, echo=FALSE, fig.width=6.5}
#transpose
subtaxaalpha <- t(subtaxaalpha)
taxalpha <- t(taxalpha)
#calculate alpha diversity and assign to variable alphad
alphad <- diversity(subtaxaalpha, index = "shannon", MARGIN = 1, base = exp(1))
alphad <- as.data.frame(alphad)
alphad <- rownames_to_column(alphad, var = "X.SampleID")
#calculate study alpha diversity and assign to variable studyalpha
studyalpha <- diversity(taxalpha, index = "shannon", MARGIN = 1, base = exp(1))
studyalpha <- as.data.frame(studyalpha)
studyalpha <- rownames_to_column(studyalpha, var = "X.SampleID")
#merge melted df with map to get access to StudyDay variable
merged_alpha<- merge(x=alphad, y=map, all.x=TRUE)
# make studydayno a continuous variable for plotting
merged_alpha$StudyDayNo <- as.numeric(merged_alpha$StudyDayNo)
# Find statistical artifacts for (shannon) alpha diversity for all subjects
med <- quantile(studyalpha$studyalpha)[3]
q1 <- quantile(studyalpha$studyalpha)[2] #25th percentile
q3 <- quantile(studyalpha$studyalpha)[4] #75th percentile
#make gg plot line graph of subject alpha diversity per day
ggplot(merged_alpha, aes(x=StudyDayNo, y=alphad)) +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))+
scale_x_continuous(breaks = c(tick_label)) +
theme_classic() +
geom_smooth(color = "Black", fill = "#8DD3C7") +
geom_point() +
geom_hline(size=.75, color="grey", yintercept = med)+
geom_hline(size=.75, color="#E3D5DC", yintercept = q1, linetype = "dashed")+
geom_hline(size=.75, color="#E3D5DC", yintercept = q3, linetype = "dashed")+
annotate(geom="text", label="Median",x=15,y=med, vjust=-1, size = 3) +
annotate(geom="text", label="25th percentile",x=15,y=q1, vjust=-1, size = 3) +
annotate(geom="text", label="75th percentile",x=15,y=q3, vjust=-1, size = 3) +
labs(x= "Study Day Number",y="Alpha Diversity (Shannon)")+
guides(fill=FALSE)+
ggtitle("Alpha diversity of your gut microbiome")
#transpose
subtaxaalpha <- t(subtaxaalpha)
taxalpha <- t(taxalpha)
#calculate alpha diversity and assign to variable alphad
alphad <- diversity(subtaxaalpha, index = "shannon", MARGIN = 1, base = exp(1))
alphad <- as.data.frame(alphad)
alphad <- rownames_to_column(alphad, var = "X.SampleID")
#calculate study alpha diversity and assign to variable studyalpha
studyalpha <- diversity(taxalpha, index = "shannon", MARGIN = 1, base = exp(1))
studyalpha <- as.data.frame(studyalpha)
studyalpha <- rownames_to_column(studyalpha, var = "X.SampleID")
#merge melted df with map to get access to StudyDay variable
merged_alpha<- merge(x=alphad, y=map, all.x=TRUE)
# make studydayno a continuous variable for plotting
merged_alpha$StudyDayNo <- as.numeric(merged_alpha$StudyDayNo)
# Find statistical artifacts for (shannon) alpha diversity for all subjects
med <- quantile(studyalpha$studyalpha)[3]
q1 <- quantile(studyalpha$studyalpha)[2] #25th percentile
q3 <- quantile(studyalpha$studyalpha)[4] #75th percentile
#make gg plot line graph of subject alpha diversity per day
ggplot(merged_alpha, aes(x=StudyDayNo, y=alphad)) +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))+
scale_x_continuous(breaks = c(tick_label)) +
theme_classic() +
geom_smooth(color = "Black", fill = "#8DD3C7") +
geom_point() +
geom_hline(size=.75, color="grey", yintercept = med)+
geom_hline(size=.75, color="#E3D5DC", yintercept = q1, linetype = "dashed")+
geom_hline(size=.75, color="#E3D5DC", yintercept = q3, linetype = "dashed")+
annotate(geom="text", label="Median",x=15,y=med, vjust=-1, size = 3) +
annotate(geom="text", label="25th percentile",x=15,y=q1, vjust=-1, size = 3) +
annotate(geom="text", label="75th percentile",x=15,y=q3, vjust=-1, size = 3) +
labs(x= "Study Day Number",y="Alpha Diversity (Shannon)")+
guides(fill=FALSE)+
ggtitle("Alpha diversity of your gut microbiome")
source('~/Documents/Projects/zebra/bin/makepdf.R', echo=TRUE)
#transpose
subtaxaalpha <- t(subtaxaalpha)
taxalpha <- t(taxalpha)
#calculate alpha diversity and assign to variable alphad
alphad <- diversity(subtaxaalpha, index = "shannon", MARGIN = 1, base = exp(1))
alphad <- as.data.frame(alphad)
alphad <- rownames_to_column(alphad, var = "X.SampleID")
#calculate study alpha diversity and assign to variable studyalpha
studyalpha <- diversity(taxalpha, index = "shannon", MARGIN = 1, base = exp(1))
studyalpha <- as.data.frame(studyalpha)
studyalpha <- rownames_to_column(studyalpha, var = "X.SampleID")
#merge melted df with map to get access to StudyDay variable
merged_alpha<- merge(x=alphad, y=map, all.x=TRUE)
# make studydayno a continuous variable for plotting
merged_alpha$StudyDayNo <- as.numeric(merged_alpha$StudyDayNo)
# Find statistical artifacts for (shannon) alpha diversity for all subjects
med <- quantile(studyalpha$studyalpha)[3]
q1 <- quantile(studyalpha$studyalpha)[2] #25th percentile
q3 <- quantile(studyalpha$studyalpha)[4] #75th percentile
#make gg plot line graph of subject alpha diversity per day
ggplot(merged_alpha, aes(x=StudyDayNo, y=alphad)) +
theme(plot.title = element_text(hjust = 1),
axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))+
scale_x_continuous(breaks = c(tick_label)) +
theme_classic() +
geom_smooth(color = "Black", fill = "#8DD3C7") +
geom_point() +
geom_hline(size=.75, color="grey", yintercept = med)+
geom_hline(size=.75, color="#E3D5DC", yintercept = q1, linetype = "dashed")+
geom_hline(size=.75, color="#E3D5DC", yintercept = q3, linetype = "dashed")+
annotate(geom="text", label="Median",x=15,y=med, vjust=-1, size = 3) +
annotate(geom="text", label="25th percentile",x=15,y=q1, vjust=-1, size = 3) +
annotate(geom="text", label="75th percentile",x=15,y=q3, vjust=-1, size = 3) +
labs(x= "Study Day Number",y="Alpha Diversity (Shannon)")+
guides(fill=FALSE)+
ggtitle("Alpha diversity of your gut microbiome")
ggplot(merged_alpha, aes(x=StudyDayNo, y=alphad)) +
theme(plot.title = element_text(hjust = -.5),
axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))+
scale_x_continuous(breaks = c(tick_label)) +
theme_classic() +
geom_smooth(color = "Black", fill = "#8DD3C7") +
geom_point() +
geom_hline(size=.75, color="grey", yintercept = med)+
geom_hline(size=.75, color="#E3D5DC", yintercept = q1, linetype = "dashed")+
geom_hline(size=.75, color="#E3D5DC", yintercept = q3, linetype = "dashed")+
annotate(geom="text", label="Median",x=15,y=med, vjust=-1, size = 3) +
annotate(geom="text", label="25th percentile",x=15,y=q1, vjust=-1, size = 3) +
annotate(geom="text", label="75th percentile",x=15,y=q3, vjust=-1, size = 3) +
labs(x= "Study Day Number",y="Alpha Diversity (Shannon)")+
guides(fill=FALSE)+
ggtitle("Alpha diversity of your gut microbiome")
#transpose
subtaxaalpha <- t(subtaxaalpha)
taxalpha <- t(taxalpha)
#calculate alpha diversity and assign to variable alphad
alphad <- diversity(subtaxaalpha, index = "shannon", MARGIN = 1, base = exp(1))
alphad <- as.data.frame(alphad)
alphad <- rownames_to_column(alphad, var = "X.SampleID")
#calculate study alpha diversity and assign to variable studyalpha
studyalpha <- diversity(taxalpha, index = "shannon", MARGIN = 1, base = exp(1))
studyalpha <- as.data.frame(studyalpha)
studyalpha <- rownames_to_column(studyalpha, var = "X.SampleID")
#merge melted df with map to get access to StudyDay variable
merged_alpha<- merge(x=alphad, y=map, all.x=TRUE)
# make studydayno a continuous variable for plotting
merged_alpha$StudyDayNo <- as.numeric(merged_alpha$StudyDayNo)
# Find statistical artifacts for (shannon) alpha diversity for all subjects
med <- quantile(studyalpha$studyalpha)[3]
q1 <- quantile(studyalpha$studyalpha)[2] #25th percentile
q3 <- quantile(studyalpha$studyalpha)[4] #75th percentile
#make gg plot line graph of subject alpha diversity per day
ggplot(merged_alpha, aes(x=StudyDayNo, y=alphad)) +
scale_x_continuous(breaks = c(tick_label)) +
theme_classic() +
geom_smooth(color = "Black", fill = "#8DD3C7") +
geom_point() +
geom_hline(size=.75, color="grey", yintercept = med)+
geom_hline(size=.75, color="#E3D5DC", yintercept = q1, linetype = "dashed")+
geom_hline(size=.75, color="#E3D5DC", yintercept = q3, linetype = "dashed")+
annotate(geom="text", label="Median",x=15,y=med, vjust=-1, size = 3) +
annotate(geom="text", label="25th percentile",x=15,y=q1, vjust=-1, size = 3) +
annotate(geom="text", label="75th percentile",x=15,y=q3, vjust=-1, size = 3) +
labs(x= "Study Day Number",y="Alpha Diversity (Shannon)")+
guides(fill=FALSE)+
ggtitle("Alpha diversity of your gut microbiome")+
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))+
ggplot(merged_alpha, aes(x=StudyDayNo, y=alphad)) +
scale_x_continuous(breaks = c(tick_label)) +
theme_classic() +
geom_smooth(color = "Black", fill = "#8DD3C7") +
geom_point() +
geom_hline(size=.75, color="grey", yintercept = med)+
geom_hline(size=.75, color="#E3D5DC", yintercept = q1, linetype = "dashed")+
geom_hline(size=.75, color="#E3D5DC", yintercept = q3, linetype = "dashed")+
annotate(geom="text", label="Median",x=15,y=med, vjust=-1, size = 3) +
annotate(geom="text", label="25th percentile",x=15,y=q1, vjust=-1, size = 3) +
annotate(geom="text", label="75th percentile",x=15,y=q3, vjust=-1, size = 3) +
labs(x= "Study Day Number",y="Alpha Diversity (Shannon)")+
guides(fill=FALSE)+
ggtitle("Alpha diversity of your gut microbiome")+
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
source('~/Documents/Projects/zebra/bin/makepdf.R', echo=TRUE)
require(rmarkdown)
require(knitr)
require(tidyverse)
require(stringr)
require(dplyr)
require(reshape2)
opts_knit$set(root.dir = "/Users/abby/Documents/Projects/MCTs/")
opts_chunk$set(echo = TRUE, fig.path = "Figs_sigs/", dev = c("png", "pdf"), dpi = 300)
map_sample <- read.table("Data/Master map/SampleID_map.txt", sep = "\t", header = T, comment = "")
map_username <- read.table("Data/Master map/UserName_map.txt", sep = "\t", header = T, comment = "")
map_sample$StudyDate <- as.Date.factor(map_sample$StudyDate, format = "%m/%d/%y")
# Significant samples from the procrustes tests
# MCTs04, MCTs07, MCTs09, MCTs10, MCTs15, MCTs18, MCTs19, MCTs20, MCTs21, MCTs22, MCTs23, MCTs27, MCTs33, MCTs34, MCTs36
sigs <- c("MCTs04", "MCTs07", "MCTs09", "MCTs10", "MCTs15", "MCTs18", "MCTs19", "MCTs20", "MCTs21", "MCTs22", "MCTs23", "MCTs27", "MCTs33", "MCTs34", "MCTs36")
map_username$Procrustes <- ifelse(map_username$UserName %in% sigs, "sig", "ns")
tax <- read.delim("Data/OTUs/re-picked/youbet.txt", row = 1)
# This has the new samples instead of the bad plate
# Drop samples with less than 20000 reads
tax <- tax[,colSums(tax)>20000]
# Summarizing at different levels - makes changes to everything downstream
split <- strsplit(rownames(tax),";")             # Split and rejoin on lv7 to get species level
taxaStrings <- sapply(split,function(x) paste(x[1:7],collapse=";"))
tax <- rowsum(tax,taxaStrings)              # Collapse by taxonomy name
# Normalize
tax <- sweep(tax, 2, colSums(tax), "/")
# Sort by average abundance
tax <- tax[order(rowMeans(tax),decreasing=T),]
# Drop low abundance taxa
tax <- tax[rowMeans(tax) >= 0.001,]
# Drop low prevalance taxa
tax <- tax[rowSums(tax > 0) > 20,]
food <- read.table("Data/Master diet/mct.food.otu.txt", header = T, sep = "\t", comment = "")
food_taxa <- read.table("Data/Master diet/mct.taxonomy.txt", header = T, sep = "\t", comment = "")
# find descriptions of water
water <- food_taxa %>% filter(FoodID != "92410110"&
FoodID != "92410210"&
FoodID != "92410250"&
FoodID != "94000100"&
FoodID != "94100100"&
FoodID != "94100200" &
FoodID != "94100300" &
FoodID != "94210100" &
FoodID != "94210200" &
FoodID != "94210300" &
FoodID != "94220200" &
FoodID != "94300100")
#remove water
food_taxa <- food_taxa %>% filter(taxonomy %in% water$taxonomy)
# subset to remove water from the food table
food <- food[food$X.FOODID %in% food_taxa$Main.food.description,]
# clean up environment
rm(water)
# normalize the values
#food[,2:581] <- sweep(food[,2:581], 2, colSums(food[,2:581]), "/")
# multiply by a factor
#food[,2:581] <- food[,2:581]*10000
# round the food values (must subset to avoid the taxonomy column at the end)
#food[,2:581] <- round(food[,2:581], 1)
# fix nameing of first column to use with QIIME
colnames(food)[1] <- "#FoodID"
# move #FoodID to rownames
rownames(food) <- food$`#FoodID`
# remove blanks
map_sample <- map_sample %>% filter(Study.Status != "Blank")
# remove dropouts
map_sample <- map_sample %>% filter(Study.Status != "Dropped")
# remove soylent
map_sample <- map_sample %>% filter(UserName != "MCTs11", UserName != "MCTs12")
# Identify bad diet samples
outliers = c("MCT.f.0021", "MCT.f.0044", "MCT.f.0050", "MCT.f.0056", "MCT.f.0058", "MCT.f.0060", "MCT.f.0076", "MCT.f.0116", "MCT.f.0465", "MCT.f.0486", "MCT.f.0601")
# remove bad diet samples
map_sample <- map_sample %>% filter(!(X.SampleID %in% outliers))
# set map to only contain samples with corresponding taxa data
map_sample <- map_sample[map_sample$X.SampleID %in% colnames(tax),]
# and food data
map_sample <- map_sample[map_sample$X.SampleID %in% colnames(food),]
# set taxa to only contain samples with corresponding map data
tax <- tax[, colnames(tax) %in% map_sample$X.SampleID]
# same for food
food <- food[,colnames(food) %in% colnames(tax)]
# final count is 469 matched samples
#### Food collapse by username (mean) ####
# initiate the dataframe with the correct information
food_smry <- data.frame(matrix(nrow=nrow(food), ncol=0))
rownames(food_smry) <- rownames(food)
#loop through and summarize by username
for (i in unique(map_sample$UserName)){
subgroup <- map_sample[map_sample$UserName == i,]
foodsub <- food[,colnames(food) %in% subgroup$X.SampleID]
tmp <- as.data.frame(rowSums(foodsub))                    # need to choose if means or sums is better for analysis
colnames(tmp) <- i
food_smry <- cbind(food_smry,tmp)
}
#### Taxa collapse by username (sum) ####
# initiate the dataframe with the correct information
tax_smry <- data.frame(matrix(nrow=nrow(tax), ncol=0))
rownames(tax_smry) <- rownames(tax)
#loop through and summarize by username
for (i in unique(map_sample$UserName)){
subgroup <- map_sample[map_sample$UserName == i,]
taxsub <- tax[,colnames(tax) %in% subgroup$X.SampleID]
tmp <- as.data.frame(rowSums(taxsub))                    # need to choose if means or sums is better for analysis
colnames(tmp) <- i
tax_smry <- cbind(tax_smry,tmp)
}
# renormalize the tax_smry
# tax_smry <- sweep(tax_smry, 2, colSums(tax_smry), '/')
# set map to the same variables in the food_smry df
map_test <- map_username[map_username$UserName %in% colnames(tax_smry), ]
# Summarizing at different levels - makes changes to everything downstream
split <- strsplit(rownames(tax_smry),";")             # Split and rejoin on lv7 to get species level
taxaStrings <- sapply(split,function(x) paste(x[1:7],collapse=";"))
tax_smry <- rowsum(tax_smry,taxaStrings)              # Collapse by taxonomy name
pvals = apply(tax_smry, 1, function(x) {kruskal.test(x, as.factor(map_test$Procrustes))$p.val})
qvals <- p.adjust(pvals, 'fdr')
# print the lowest 10 q-values
sort(qvals)[1:10]
qvals <- 0.25
qvals <- p.adjust(pvals, 'fdr')
qvals <- qvals[<0.25]
qvals <- qvals<0.25
qvals <- p.adjust(pvals, 'fdr')
qvals <- qvals[qvals<0.25]
sort(qvals)[1:10]
qvals
# set map to the same variables in the food_smry df
map_test <- map_username[map_username$UserName %in% colnames(food_smry), ]
# food taxa formating before merge
food_taxa <- food_taxa %>% select(Main.food.description, taxonomy)
food_taxa <- column_to_rownames(food_taxa, var = "Main.food.description")
# get taxonomy labels for food
food_smry <- merge(food_smry, food_taxa, by = 0)
# move taxonomy to rownames
food_smry <- column_to_rownames(food_smry, var = "taxonomy")
# remove the list of foods currently called "Row.names"
food_smry <- food_smry %>% select(-Row.names)
# collapse the food at a higher level
# Summarizing at different levels - makes changes to everything downstream
split <- strsplit(rownames(food_smry),";")             # Split and rejoin on lv7 to get species level
foodStrings <- sapply(split,function(x) paste(x[1:3],collapse=";"))
food_smry <- rowsum(food_smry,foodStrings)              # Collapse by taxonomy name
pvals = apply(food_smry, 1, function(x) {kruskal.test(x, as.factor(map_test$Procrustes))$p.val})
qvals <- p.adjust(pvals, 'fdr')
# print the lowest 10 q-values
sort(qvals)[1:10]
nutr <- read.table("Data/Master diet/Totals_to_use.txt", sep = "\t", header = T, comment = "")
nutr <- read.table("Data/Master diet/Totals_to_use.txt", sep = "\t", header = T, comment = "")
require(rmarkdown)
require(knitr)
require(tidyverse)
require(stringr)
require(dplyr)
require(reshape2)
opts_knit$set(root.dir = "/Users/abby/Documents/Projects/MCTs/")
opts_chunk$set(echo = TRUE, fig.path = "Figs_sigs/", dev = c("png", "pdf"), dpi = 300)
require(rmarkdown)
require(knitr)
require(tidyverse)
require(stringr)
require(dplyr)
require(reshape2)
opts_knit$set(root.dir = "/Users/abby/Documents/Projects/MCTs/")
opts_chunk$set(echo = TRUE, fig.path = "Figs_sigs/", dev = c("png", "pdf"), dpi = 300)
map_sample <- read.table("Data/Master map/SampleID_map.txt", sep = "\t", header = T, comment = "")
map_username <- read.table("Data/Master map/UserName_map.txt", sep = "\t", header = T, comment = "")
map_sample$StudyDate <- as.Date.factor(map_sample$StudyDate, format = "%m/%d/%y")
# Significant samples from the procrustes tests
# MCTs04, MCTs07, MCTs09, MCTs10, MCTs15, MCTs18, MCTs19, MCTs20, MCTs21, MCTs22, MCTs23, MCTs27, MCTs33, MCTs34, MCTs36
sigs <- c("MCTs04", "MCTs07", "MCTs09", "MCTs10", "MCTs15", "MCTs18", "MCTs19", "MCTs20", "MCTs21", "MCTs22", "MCTs23", "MCTs27", "MCTs33", "MCTs34", "MCTs36")
map_username$Procrustes <- ifelse(map_username$UserName %in% sigs, "sig", "ns")
nutr <- read.table("Data/Master diet/Totals_to_use.txt", sep = "\t", header = T, comment = "")
nutr_smry <- data.frame(matrix(nrow=(ncol(nutr)-4), ncol=0))  # just the numeric/continuous variables
rownames(nutr_smry) <- colnames(nutr)[5: ncol(nutr)]
for (i in unique(map_sample$UserName)){
subgroup <- map_sample[map_sample$UserName == i,]
nutrsub <- nutr[nutr$X.SampleID %in% subgroup$X.SampleID,]
nutrsub <- nutrsub %>% select(-X.SampleID, -UserName, -StudyDayNo, -RecordDayNo)
tmp <- as.data.frame(colMeans(nutrsub))                    # need to choose if means or sums is better for analysis
colnames(tmp) <- i
nutr_smry <- cbind(nutr_smry,tmp)
}
for (i in unique(map_sample$UserName)){
subgroup <- map_sample[map_sample$UserName == i,]
nutrsub <- nutr[nutr$X.SampleID %in% subgroup$X.SampleID,]
nutrsub <- nutrsub %>% select(-X.SampleID, -UserName, -StudyDayNo, -RecordDayNo)
tmp <- as.data.frame(colMeans(nutrsub))                    # need to choose if means or sums is better for analysis
colnames(tmp) <- i
nutr_smry <- cbind(nutr_smry,tmp)
}
nutr_smry <- nutr_smry[,colnames(nutr_smry) %in% map_test$UserName]
pvals = apply(nutr_smry, 1, function(x) {kruskal.test(x, as.factor(map_test$Procrustes))$p.val})
nutr <- read.table("Data/Master diet/Totals_to_use.txt", sep = "\t", header = T, comment = "")
#### Nutr collapse by username (mean) ####
# initiate the dataframe with the correct information
nutr_smry <- data.frame(matrix(nrow=(ncol(nutr)-4), ncol=0))  # just the numeric/continuous variables
rownames(nutr_smry) <- colnames(nutr)[5: ncol(nutr)]
#loop through and summarize by username
for (i in unique(map_sample$UserName)){
subgroup <- map_sample[map_sample$UserName == i,]
nutrsub <- nutr[nutr$X.SampleID %in% subgroup$X.SampleID,]
nutrsub <- nutrsub %>% select(-X.SampleID, -UserName, -StudyDayNo, -RecordDayNo)
tmp <- as.data.frame(colMeans(nutrsub))                    # need to choose if means or sums is better for analysis
colnames(tmp) <- i
nutr_smry <- cbind(nutr_smry,tmp)
}
# subset to just the values we need
nutr_smry <- nutr_smry[,colnames(nutr_smry) %in% map_test$UserName]
# test!
pvals = apply(nutr_smry, 1, function(x) {kruskal.test(x, as.factor(map_test$Procrustes))$p.val})
qvals <- p.adjust(pvals, 'fdr')
# print the lowest 10 q-values
sort(qvals)[1:10]
