my_char <- "My", "name", "is"
my_char <- c("My","name","is")
my_char
paste(my_char, collapse = " ")
my_name(c(my_char, "Arzang"))
my_name<- c(my_char, "Arzang")
my_name
paste(my_char, collapse = " ")
paste(my_name, collapse = " ")
paste("Hello","world", sep=" ")
paste("Hello","world!", sep=" ")
paste(1:3, c("x"."y","z"), sep="")
paste(c(1:3), c("x"."y","z"), sep="")
paste(1:3, c("x""y","z"), sep="")
paste(1:3, c("x","y","z"), sep="")
paste(1:3, c("x", "y", "z"), sep = "")
(1:3, c("X", "Y", "Z"), sep = "")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep ="-")
x <- c(44,NA,5,NA)
x * 3
y <- rnorm(1000)
z <- rep(NA,1000)
my_data <- sample(c(y,z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum==1
s
s
?
quit
info()
sum(my_na==1)
sum(my_na)
my_data
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x > 0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo =11, bar =2, norf =NA)
vect
names(vect)
vect2 <- c(11,2,Na)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo", "bar", "norf"
)
identical(vect1,vect2)
identical(vect,vect2)
vect["bar"]
vect[c("foo"),"bar"]
vect[c("foo", "bar")]
library(swirl)
swirl()
info()
main()
ls
swirl
swirl()
sswirl())
swirl()
library(swirl)
swirl()
source('C:/Users/arzan/Desktop/Bioinformatics/MCT/GIT/zebra/bin/makepdf.R')
colpal<- colorRampPalette(brewer.pal(9,"Set3"))(37)
colpal<- sample(colpal,37, replace = FALSE)
tick_label <- seq(1:17)
#Study average for individual's fiber intake
fiber_average <-round(mean(subnutr$FIBE),2)
fiber_rec <- round(14*mean(subnutr$KCAL)/1000)
p <- ggplot(subnutr,aes(x = StudyDayNo,y = FIBE)) +
geom_bar(aes(fill = colpal[1]),stat = "identity",position = "dodge") + scale_x_discrete(labels = abbreviate)+
geom_hline(size=.75,col="red",yintercept = fiber_rec) + #Recommended fiber level
geom_hline(size=.75,col="gold",yintercept = fiber_average)+  #Recommended fiber level
annotate(geom="text", label=h,x=1,y=25)
p + guides(fill=F) +
theme_classic(base_family = "Helvetica")+
theme(plot.title = element_text(hjust = 0.5)) +
scale_x_discrete(labels=c(tick_label))+
scale_fill_manual(values = colpal)+
labs(x="Study Day Number", y= "Fiber in grams")+
ggtitle("Daily Fiber Intake")
p <- ggplot(subnutr,aes(x = StudyDayNo,y = FIBE)) +
geom_bar(aes(fill = colpal[1]),stat = "identity",position = "dodge") + scale_x_discrete(labels = abbreviate)+
geom_hline(size=.75,col="red",yintercept = fiber_rec) + #Recommended fiber level
geom_hline(size=.75,col="gold",yintercept = fiber_average)+  #Recommended fiber level
annotate(geom="text", label="hi",x=1,y=25)+
p + guides(fill=F) +
theme_classic(base_family = "Helvetica")+
theme(plot.title = element_text(hjust = 0.5)) +
scale_x_discrete(labels=c(tick_label))+
scale_fill_manual(values = colpal)+
labs(x="Study Day Number", y= "Fiber in grams")+
ggtitle("Daily Fiber Intake")
p <- ggplot(subnutr,aes(x = StudyDayNo,y = FIBE)) +
geom_bar(aes(fill = colpal[1]),stat = "identity",position = "dodge") + scale_x_discrete(labels = abbreviate)+
geom_hline(size=.75,col="red",yintercept = fiber_rec) + #Recommended fiber level
geom_hline(size=.75,col="gold",yintercept = fiber_average)+  #Recommended fiber level
annotate(geom="text", label="hi",x=1,y=25)+
p + guides(fill=F) +
theme_classic(base_family = "Helvetica")+
theme(plot.title = element_text(hjust = 0.5)) +
scale_x_discrete(labels=c(tick_label))+
scale_fill_manual(values = colpal)+
labs(x="Study Day Number", y= "Fiber in grams")+
ggtitle("Daily Fiber Intake")
p <- ggplot(subnutr,aes(x = StudyDayNo,y = FIBE)) +
geom_bar(aes(fill = colpal[1]),stat = "identity",position = "dodge") + scale_x_discrete(labels = abbreviate)+
geom_hline(size=.75,col="red",yintercept = fiber_rec) + #Recommended fiber level
geom_hline(size=.75,col="gold",yintercept = fiber_average)+  #Recommended fiber level
annotate(geom="text", label="hi",x=1,y=25)+
p + guides(fill=F) +
theme_classic(base_family = "Helvetica")+
theme(plot.title = element_text(hjust = 0.5)) +
scale_x_discrete(labels=c(tick_label))+
scale_fill_manual(values = colpal)+
labs(x="Study Day Number", y= "Fiber in grams")+
ggtitle("Daily Fiber Intake")
p <- ggplot(subnutr,aes(x = StudyDayNo,y = FIBE)) +
geom_bar(aes(fill = colpal[1]),stat = "identity",position = "dodge") + scale_x_discrete(labels = abbreviate)+
geom_hline(size=.75,col="red",yintercept = fiber_rec) + #Recommended fiber level
geom_hline(size=.75,col="gold",yintercept = fiber_average)+  #Recommended fiber level
annotate(geom="text", label="hi",x=1,y=25)
p <- ggplot(subnutr,aes(x = StudyDayNo,y = FIBE)) +
geom_bar(aes(fill = colpal[1]),stat = "identity",position = "dodge") + scale_x_discrete(labels = abbreviate)+
geom_hline(size=.75,col="red",yintercept = fiber_rec) + #Recommended fiber level
geom_hline(size=.75,col="gold",yintercept = fiber_average)+  #Recommended fiber level
annotate(geom="text", label="hi",x=1,y=25)
p + guides(fill=F) +
theme_classic(base_family = "Helvetica")+
theme(plot.title = element_text(hjust = 0.5)) +
scale_x_discrete(labels=c(tick_label))+
scale_fill_manual(values = colpal)+
labs(x="Study Day Number", y= "Fiber in grams")+
ggtitle("Daily Fiber Intake")
p <- ggplot(subnutr,aes(x = StudyDayNo,y = FIBE)) +
geom_bar(aes(fill = colpal[1]),stat = "identity",position = "dodge") + scale_x_discrete(labels = abbreviate)+
geom_hline(size=.75,col="red",yintercept = fiber_rec) + #Recommended fiber level
geom_hline(size=.75,col="gold",yintercept = fiber_average)+  #Recommended fiber level
annotate(geom="text", label="Recommended Daily Fiber Intake Level",x=0,y=fiber_rec)+
annotate(geom="text", label="Your Average Daily Fiber Intake Level",x=0,y=fiber_average)
p + guides(fill=F) +
theme_classic(base_family = "Helvetica")+
theme(plot.title = element_text(hjust = 0.5)) +
scale_x_discrete(labels=c(tick_label))+
scale_fill_manual(values = colpal)+
labs(x="Study Day Number", y= "Fiber in grams")+
ggtitle("Daily Fiber Intake")
p <- ggplot(subnutr,aes(x = StudyDayNo,y = FIBE)) +
geom_bar(aes(fill = colpal[1]),stat = "identity",position = "dodge") + scale_x_discrete(labels = abbreviate)+
geom_hline(size=.75,col="red",yintercept = fiber_rec) + #Recommended fiber level
geom_hline(size=.75,col="gold",yintercept = fiber_average)+  #Recommended fiber level
annotate(geom="text", label="Recommended Daily Fiber Intake Level",x=0,y=fiber_rec, vjust=-1, hjust=5)+
annotate(geom="text", label="Your Average Daily Fiber Intake Level",x=0,y=fiber_average,  vjust=-1, hjust=5)
p + guides(fill=F) +
theme_classic(base_family = "Helvetica")+
theme(plot.title = element_text(hjust = 0.5)) +
scale_x_discrete(labels=c(tick_label))+
scale_fill_manual(values = colpal)+
labs(x="Study Day Number", y= "Fiber in grams")+
ggtitle("Daily Fiber Intake")
p <- ggplot(subnutr,aes(x = StudyDayNo,y = FIBE)) +
geom_bar(aes(fill = colpal[1]),stat = "identity",position = "dodge") + scale_x_discrete(labels = abbreviate)+
geom_hline(size=.75,col="red",yintercept = fiber_rec) + #Recommended fiber level
geom_hline(size=.75,col="gold",yintercept = fiber_average)+  #Recommended fiber level
annotate(geom="text", label="Recommended Daily Fiber Intake Level",x=0,y=fiber_rec, vjust=-1, hjust=1)+
annotate(geom="text", label="Your Average Daily Fiber Intake Level",x=0,y=fiber_average,  vjust=-1, hjust=1)
p + guides(fill=F) +
theme_classic(base_family = "Helvetica")+
theme(plot.title = element_text(hjust = 0.5)) +
scale_x_discrete(labels=c(tick_label))+
scale_fill_manual(values = colpal)+
labs(x="Study Day Number", y= "Fiber in grams")+
ggtitle("Daily Fiber Intake")
p <- ggplot(subnutr,aes(x = StudyDayNo,y = FIBE)) +
geom_bar(aes(fill = colpal[1]),stat = "identity",position = "dodge") + scale_x_discrete(labels = abbreviate)+
geom_hline(size=.75,col="red",yintercept = fiber_rec) + #Recommended fiber level
geom_hline(size=.75,col="gold",yintercept = fiber_average)+  #Recommended fiber level
annotate(geom="text", label="Recommended Daily Fiber Intake Level",x=0,y=fiber_rec, vjust=-1, hjust=-1)+
annotate(geom="text", label="Your Average Daily Fiber Intake Level",x=0,y=fiber_average,  vjust=-1, hjust=-1)
p + guides(fill=F) +
theme_classic(base_family = "Helvetica")+
theme(plot.title = element_text(hjust = 0.5)) +
scale_x_discrete(labels=c(tick_label))+
scale_fill_manual(values = colpal)+
labs(x="Study Day Number", y= "Fiber in grams")+
ggtitle("Daily Fiber Intake")
p <- ggplot(subnutr,aes(x = StudyDayNo,y = FIBE)) +
geom_bar(aes(fill = colpal[1]),stat = "identity",position = "dodge") + scale_x_discrete(labels = abbreviate)+
geom_hline(size=.75,col="red",yintercept = fiber_rec) + #Recommended fiber level
geom_hline(size=.75,col="gold",yintercept = fiber_average)+  #Recommended fiber level
annotate(geom="text", label="Recommended Daily Fiber Intake Level",x=0,y=fiber_rec, vjust=-1, hjust=-2)+
annotate(geom="text", label="Your Average Daily Fiber Intake Level",x=0,y=fiber_average,  vjust=-1, hjust=-2)
p + guides(fill=F) +
theme_classic(base_family = "Helvetica")+
theme(plot.title = element_text(hjust = 0.5)) +
scale_x_discrete(labels=c(tick_label))+
scale_fill_manual(values = colpal)+
labs(x="Study Day Number", y= "Fiber in grams")+
ggtitle("Daily Fiber Intake")
colpal<- colorRampPalette(brewer.pal(9,"Set3"))(37)
colpal<- sample(colpal,37, replace = FALSE)
tick_label <- seq(1:17)
#Study average for individual's fiber intake
fiber_average <-round(mean(subnutr$FIBE),2)
fiber_rec <- round(14*mean(subnutr$KCAL)/1000)
p <- ggplot(subnutr,aes(x = StudyDayNo,y = FIBE)) +
geom_bar(aes(fill = colpal[1]),stat = "identity",position = "dodge") + scale_x_discrete(labels = abbreviate)+
geom_hline(size=.75,col="red",yintercept = fiber_rec) + #Recommended fiber level
geom_hline(size=.75,col="gold",yintercept = fiber_average)+  #Recommended fiber level
annotate(geom="text", label="Recommended Daily Fiber Intake Level",x=0,y=fiber_rec, vjust=-1, hjust=-2.7)+
annotate(geom="text", label="Your Average Daily Fiber Intake Level",x=0,y=fiber_average,  vjust=-1, hjust=-2.7)
p + guides(fill=F) +
theme_classic(base_family = "Helvetica")+
theme(plot.title = element_text(hjust = 0.5)) +
scale_x_discrete(labels=c(tick_label))+
scale_fill_manual(values = colpal)+
labs(x="Study Day Number", y= "Fiber in grams")+
ggtitle("Daily Fiber Intake")
p <- ggplot(subnutr,aes(x = StudyDayNo,y = FIBE)) +
geom_bar(aes(fill = colpal[1]),stat = "identity",position = "dodge") + scale_x_discrete(labels = abbreviate)+
geom_hline(size=.75,col="red",yintercept = fiber_rec) + #Recommended fiber level
geom_hline(size=.75,col="gold",yintercept = fiber_average)+  #Recommended fiber level
annotate(geom="text", label="Recommended Daily Fiber Intake Level",x=0,y=fiber_rec, vjust=-1, hjust=-2.5)+
annotate(geom="text", label="Your Average Daily Fiber Intake Level",x=0,y=fiber_average,  vjust=-1, hjust=-2.5)
p + guides(fill=F) +
theme_classic(base_family = "Helvetica")+
theme(plot.title = element_text(hjust = 0.5)) +
scale_x_discrete(labels=c(tick_label))+
scale_fill_manual(values = colpal)+
labs(x="Study Day Number", y= "Fiber in grams")+
ggtitle("Daily Fiber Intake")
merged_alpha
subtaxaalpha <- t(subtaxaalpha)
#calculate alpha diversity and assign to variable alphad
alphad <- diversity(subtaxaalpha, index = "shannon", MARGIN = 1, base = exp(1))
alphad <- as.data.frame(alphad)
alphad <- rownames_to_column(alphad, var = "X.SampleID")
#merge melted df with map to get access to StudyDay variable
merged_alpha<- merge(x=alphad, y=map, all.x=TRUE)
# make studydayno a continuous variable for plotting
merged_alpha$StudyDayNo <- as.numeric(merged_alpha$StudyDayNo)
#make gg plot line graph of subject alpha diversity per day
ggplot(merged_alpha, aes(x=StudyDayNo, y=alphad)) +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))+
scale_x_continuous(breaks = c(tick_label)) +
theme_classic() +
geom_smooth(color = "Black", fill = "#8DD3C7") +
geom_point() +
labs(x= "Study Day Number",y="Alpha Diversity (Shannon)")+
guides(fill=FALSE)+
ggtitle("Alpha diversity of your gut microbiome")
merged_alpha
alphad
subtaxaalpha
View(subtaxaalpha)
View(submap)
taxalpha <- taxa[(colnames(taxa) %in% map[,"X.SampleID"])] #matrix utilized to calculate study average alpha div.
View(taxalpha)
taxalpha <- t(taxalpha)
studyalpha <- diversity(taxalpha, index = "shannon", MARGIN = 1, base = exp(1))
studyalpha <- as.data.frame(studyalpha)
studyalpha <- rownames_to_column(studyalpha, var = "X.SampleID")
View(studyalpha)
View(alphad)
merged_alpha<- merge(x=alphad, y=map, all.x=TRUE)
mean(studyalpha$studyalpha)
studyalphamean <- mean(studyalpha$studyalpha)
quartile(studyalpha$studyalpha)
quantile(studyalpha$studyalpha)
ggplot(merged_alpha, aes(x=StudyDayNo, y=alphad)) +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))+
scale_x_continuous(breaks = c(tick_label)) +
theme_classic() +
geom_smooth(color = "Black", fill = "#8DD3C7") +
geom_point() +
geom_hline(yintercept = studyalphamean)
labs(x= "Study Day Number",y="Alpha Diversity (Shannon)")+
guides(fill=FALSE)+
ggtitle("Alpha diversity of your gut microbiome")
ggplot(merged_alpha, aes(x=StudyDayNo, y=alphad)) +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))+
scale_x_continuous(breaks = c(tick_label)) +
theme_classic() +
geom_smooth(color = "Black", fill = "#8DD3C7") +
geom_point() +
geom_hline(yintercept = studyalphamean)+
labs(x= "Study Day Number",y="Alpha Diversity (Shannon)")+
guides(fill=FALSE)+
ggtitle("Alpha diversity of your gut microbiome")
ggplot(merged_alpha, aes(x=StudyDayNo, y=alphad)) +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))+
scale_x_continuous(breaks = c(tick_label)) +
theme_classic() +
geom_smooth(color = "Black", fill = "#8DD3C7") +
geom_point() +
geom_hline(size=.75, color="blue", yintercept = studyalphamean)+
labs(x= "Study Day Number",y="Alpha Diversity (Shannon)")+
guides(fill=FALSE)+
ggtitle("Alpha diversity of your gut microbiome")
studyalphamean
summary(studyalphamean)
studyalphamean <- as.numeric(studyalphamean)
studyalphamean
ggplot(merged_alpha, aes(x=StudyDayNo, y=alphad)) +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))+
scale_x_continuous(breaks = c(tick_label)) +
theme_classic() +
geom_smooth(color = "Black", fill = "#8DD3C7") +
geom_point() +
geom_hline(size=.75, color="blue", yintercept = studyalphamean)+
labs(x= "Study Day Number",y="Alpha Diversity (Shannon)")+
guides(fill=FALSE)+
ggtitle("Alpha diversity of your gut microbiome")
ggplot(merged_alpha, aes(x=StudyDayNo, y=alphad)) +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))+
scale_x_continuous(breaks = c(tick_label)) +
theme_classic() +
geom_smooth(color = "Black", fill = "#8DD3C7") +
geom_point() +
#geom_hline(size=.75, color="blue", yintercept = studyalphamean)+
geom_hline(size=.75,col="gold",yintercept = fiber_average)+  #Recommended fiber level
labs(x= "Study Day Number",y="Alpha Diversity (Shannon)")+
guides(fill=FALSE)+
ggtitle("Alpha diversity of your gut microbiome")
ggplot(merged_alpha, aes(x=StudyDayNo, y=alphad)) +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))+
scale_x_continuous(breaks = c(tick_label)) +
theme_classic() +
geom_smooth(color = "Black", fill = "#8DD3C7") +
geom_point() +
#geom_hline(size=.75, color="blue", yintercept = studyalphamean)+
#geom_hline(size=.75,col="gold",yintercept = fiber_average)+  #Recommended fiber level
labs(x= "Study Day Number",y="Alpha Diversity (Shannon)")+
guides(fill=FALSE)+
ggtitle("Alpha diversity of your gut microbiome")
subtaxaalpha <- t(subtaxaalpha)
taxalpha <- t(taxalpha)
#calculate alpha diversity and assign to variable alphad
alphad <- diversity(subtaxaalpha, index = "shannon", MARGIN = 1, base = exp(1))
alphad <- as.data.frame(alphad)
alphad <- rownames_to_column(alphad, var = "X.SampleID")
#calculate study alpha diversity and assign to variable studyalpha
studyalpha <- diversity(taxalpha, index = "shannon", MARGIN = 1, base = exp(1))
studyalpha <- as.data.frame(studyalpha)
studyalpha <- rownames_to_column(studyalpha, var = "X.SampleID")
#merge melted df with map to get access to StudyDay variable
merged_alpha<- merge(x=alphad, y=map, all.x=TRUE)
# make studydayno a continuous variable for plotting
merged_alpha$StudyDayNo <- as.numeric(merged_alpha$StudyDayNo)
# Find statistical artifacts for (shannon) alpha diversity for all subjects
studyalphamean <- mean(studyalpha$studyalpha)
studyalphamean <- as.numeric(studyalphamean)
#make gg plot line graph of subject alpha diversity per day
ggplot(merged_alpha, aes(x=StudyDayNo, y=alphad)) +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))+
scale_x_continuous(breaks = c(tick_label)) +
theme_classic() +
geom_smooth(color = "Black", fill = "#8DD3C7") +
geom_point() +
#geom_hline(size=.75, color="blue", yintercept = studyalphamean)+
#geom_hline(size=.75,col="gold",yintercept = fiber_average)+  #Recommended fiber level
labs(x= "Study Day Number",y="Alpha Diversity (Shannon)")+
guides(fill=FALSE)+
ggtitle("Alpha diversity of your gut microbiome")
#Load packages required for the project
library(rmarkdown)
library(knitr)
library(ggplot2)
library(reshape2)
library(tibble)
library(data.table)
library(vegan)
library(ape)
library(RColorBrewer)
library(dplyr)
#library(extrafont)
####Pre Processing####
#set to working directory to project zebra directory
#setwd("/Users/abby/Documents/Projects/zebra/")
setwd("C:/Users/arzan/Desktop/Bioinformatics/MCT/GIT/zebra")
#Read in sampleID and nutrition files and assign them to pertinent variables
nutrition_table <- read.table("raw/Totals_to_use.txt", sep = "\t", header = TRUE, comment = "")
#Remove outlier nutr variables
outliers = c("MCT.f.0021", "MCT.f.0044", "MCT.f.0050", "MCT.f.0056", "MCT.f.0058", "MCT.f.0060", "MCT.f.0076", "MCT.f.0116", "MCT.f.0465", "MCT.f.0486", "MCT.f.0601")
nutrition_table <- nutrition_table[!(nutrition_table$X.SampleID %in% outliers),]
#Load the maps
SampleID_map <- read.table("raw/SampleID_map.txt", sep = "\t", header = TRUE, comment = "")
#Drop blanks from map
# drop the blank samples
SampleID_map <- SampleID_map[grep("Blank", SampleID_map$X.SampleID, invert = TRUE),]
UserName_map <- read.table("raw/UserName_map.txt", sep = "\t", header = TRUE, comment = "")
#merge the two to create the mapping file
#map <-  merge(x=nutrition_table, y=SampleID_map, by= "X.SampleID")
# create REE and TEE variables
map <- SampleID_map %>% mutate(REE = ifelse(Gender=="M", (10*Weight+6.25*Height-5*Age+5),
ifelse(Gender=="F", (10*Weight+6.25*Height-5*Age-161),
NA)),
TEE = REE*Activity.Factor) # calculate TEE with activity factor
# make sure studydayno is a factor for later plotting
map$StudyDayNo <- as.factor(map$StudyDayNo)
#read in the food table and assign it to pertinent variable
food_map <-  read.table("raw/mct.food.otu.txt", sep = "\t", header = TRUE, comment = "")
# read in the food taxonomy mapping file
food_taxa <- read.table("raw/mct.taxonomy.txt", sep = "\t", header = TRUE, comment = "")
# remove water from the food_map df
# find descriptions of water
water <- food_taxa %>% filter(FoodID != "92410110" &
FoodID != "92410210"&
FoodID != "92410250"&
FoodID != "94000100"&
FoodID != "94100100"&
FoodID != "94100200" &
FoodID != "94100300" &
FoodID != "94210100" &
FoodID != "94210200" &
FoodID != "94210300" &
FoodID != "94220200" &
FoodID != "94300100")
#remove water
food_taxa <- food_taxa %>% filter(taxonomy %in% water$taxonomy)
# subset to remove water from the food table
food_map <- food_map[food_map$X.FOODID %in% food_taxa$Main.food.description,]
# clean up environment
rm(water)
#set the row names of the food map file to the taxonomy strings
rownames(food_map) <- food_map$taxonomy
#remove the taxonomy string column and the food names column (redundant)
food_map$taxonomy <- NULL #removing taxa string column
food_map$X.FOODID <- NULL #removing food names column
#drop outlier nutrition samples from food_map
food_map <- food_map[,!(colnames(food_map) %in% outliers)]
# collapse by food level
# Summarizing at different levels - makes changes to everything downstream
split <- strsplit(rownames(food_map),";")             # Split and rejoin on lv7 to get species level
foodStrings <- sapply(split,function(x) paste(x[1:1],collapse=";"))
food_map <- rowsum(food_map,foodStrings)
# make food relative abundance
food_map <- sweep(food_map, 2, colSums(food_map), "/")
#Bring food taxa strings from row names to first column using setDT. Food_map is now analagous to subtaxasp
#food_map <- setDT(food_map, keep.rownames = TRUE)
#melt food_map to create a data drame called melted_food to merge by SampleIDs
melted_food<- melt(food_map)
#merge melted_food and map by variable (SampleID -- called variable in melted food file - so we use by.x)
merged_food<- merge(x=melted_food, y=map, by.x = "variable", by.y= "X.SampleID", all.x=TRUE)
colnames(merged_food)[3] <- "UserName" #Change col name from UserName.x to UserName - compatibility purposes
colnames(merged_food)[4] <- "StudyDayNo" #Change col name from StudyDayNo.x to StudyDayNo - compatibility purposes
#### Read in taxa table ####
taxa <- read.delim("raw/youbet.txt", row =1)
#### Summarizing ####
split <- strsplit(rownames(taxa),";")                               # Split and rejoin on lv7
taxaStrings <- sapply(split,function(x) paste(x[1:7],collapse=";")) # level 7 is species, 8 is strain
taxa <- rowsum(taxa,taxaStrings)                                    # Collapse by taxonomy name
#### Manicure the samplenames, grab latest (mct study only and only when re-running things from a new taxa table)
#colnames(taxa) = gsub(".S[0-9]+.R1.001","",colnames(taxa));      # Clean old plate IDs
#taxa = taxa[,order(colnames(taxa))];              # Sort nicely by sample ID
#taxa = taxa[,-(grep("L0",colnames(taxa))-1)];     # Keep new runs only
#colnames(taxa) = gsub(".S[0-9]+.L001.R1.001","",colnames(taxa)); # Clean new plate IDs
#### Massaging ####
taxa = taxa[,colSums(taxa)>=20000]                  #use taxa var to create OTU table (counts)
staxa = taxa                                         #staxa is utilized for relative abundances, taxa for counts
staxa = sweep(staxa,2,colSums(staxa),'/');           # Normalize
staxa = staxa[order(rowMeans(staxa),decreasing=F),]; # Sort by avg. abundance
staxa = staxa[rowMeans(staxa) >= 0.0001,];            # Drop rare taxa (abundance)
staxa = staxa[rowSums(staxa > 0) > 10,];             # Drop rare taxa (prevalence)
###Instantiate Plots###
colnames(map)[2] <- "UserName" #Change col name from UserName.x to UserName - compatibility purposes
colnames(map)[3] <- "StudyDayNo" #Change col name from StudyDayNo.x to StudyDayNo - compatibility purposes
for (id in unique(map$UserName)){
#microbiome iteration
submap <- map[map$UserName == id,] #create submap variable we can use to iterate through
subnutr <- nutrition_table[nutrition_table$UserName == id,]
subtaxa <- staxa[(colnames(staxa) %in% submap[,"X.SampleID"])] #create subtaxa variable - looks at each subject individually
# sort the subtaxa df by abundance
subtaxa <- subtaxa[order(rowMeans(subtaxa), decreasing = TRUE),]
subtaxasp <- setDT(subtaxa, keep.rownames=TRUE) #make rownames first column of frame
#food iteration
macro_totals <-  round(mean(subnutr$PROT),2) +  round(mean(subnutr$TFAT),2) + round(mean(subnutr$CARB),2)
sub_foodmap <- merged_food[merged_food$UserName == id,] #sub food variable allows us to access one subject at a time (like submap)
sub_food <- food_map[(colnames(food_map) %in% sub_foodmap[,"variable"])]#sub food variable looks at each subject individually
sub_foodsp <- setDT(sub_food, keep.rownames = TRUE) #make rownames first column of frame
#alpha diversity iteration
subtaxaalpha <- taxa[(colnames(taxa) %in% submap[,"X.SampleID"])] #subtaxa variable used for alpha diversity
taxalpha <- taxa[(colnames(taxa) %in% map[,"X.SampleID"])] #matrix utilized to calculate study average alpha div.
#beta diversity iteration
betataxa<- staxa[(colnames(staxa) %in% map[,"X.SampleID"])] #Create table with just taxa and subjects
betataxa <- t(betataxa) #transpose
#blood draw values
subblood <- UserName_map[UserName_map$UserName == id,]
#rendering
render(input = "lib/mypdf.Rmd",output_file = paste0('report.', id, '.pdf'),"pdf_document",
output_dir = "output/output")
}
