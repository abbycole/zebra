setwd("/Users/abby/Documents/Projects/zebra/")
#setwd("C:/Users/arzan/Desktop/Bioinformatics/MCT/GIT/zebra")
#Read in sampleID and nutrition files and assign them to pertinent variables
nutrition_table <- read.table("raw/Totals_to_use.txt", sep = "\t", header = TRUE, comment = "")
#Remove outlier nutr variables
outliers = c("MCT.f.0021", "MCT.f.0044", "MCT.f.0050", "MCT.f.0056", "MCT.f.0058", "MCT.f.0060", "MCT.f.0076", "MCT.f.0116", "MCT.f.0465", "MCT.f.0486", "MCT.f.0601")
nutrition_table <- nutrition_table[!(nutrition_table$X.SampleID %in% outliers),]
#Load the maps
SampleID_map <- read.table("raw/SampleID_map.txt", sep = "\t", header = TRUE, comment = "")
#Drop blanks from map
# drop the blank samples
SampleID_map <- SampleID_map[grep("Blank", SampleID_map$X.SampleID, invert = TRUE),]
UserName_map <- read.table("raw/UserName_map.txt", sep = "\t", header = TRUE, comment = "")
#merge the two to create the mapping file
#map <-  merge(x=nutrition_table, y=SampleID_map, by= "X.SampleID")
# create REE and TEE variables
map <- SampleID_map %>% mutate(REE = ifelse(Gender=="M", (10*Weight+6.25*Height-5*Age+5),
ifelse(Gender=="F", (10*Weight+6.25*Height-5*Age-161),
NA)),
TEE = REE*Activity.Factor) # calculate TEE with activity factor
# make sure studydayno is a factor for later plotting
map$StudyDayNo <- as.factor(map$StudyDayNo)
#read in the food table and assign it to pertinent variable
#food_map <-  read.table("raw/mct.food.otu.txt", sep = "\t", header = TRUE, comment = "")
# changed to use dehydrated food weights
food_map <-  read.table("raw/mct.dhydrt.otu.txt", sep = "\t", header = TRUE, comment = "")
# read in the food taxonomy mapping file
food_taxa <- read.table("raw/mct.taxonomy.txt", sep = "\t", header = TRUE, comment = "")
# # remove water from the food_map df
# # find descriptions of water
# water <- food_taxa %>% filter(FoodID != "92410110" &
#                                 FoodID != "92410210"&
#                                 FoodID != "92410250"&
#                                 FoodID != "94000100"&
#                                 FoodID != "94100100"&
#                                 FoodID != "94100200" &
#                                 FoodID != "94100300" &
#                                 FoodID != "94210100" &
#                                 FoodID != "94210200" &
#                                 FoodID != "94210300" &
#                                 FoodID != "94220200" &
#                                 FoodID != "94300100")
#
# #remove water
# food_taxa <- food_taxa %>% filter(taxonomy %in% water$taxonomy)
#
# # subset to remove water from the food table
# food_map <- food_map[food_map$X.FOODID %in% food_taxa$Main.food.description,]
#
# # clean up environment
# rm(water)
#set the row names of the food map file to the taxonomy strings
rownames(food_map) <- food_map$taxonomy
#remove the taxonomy string column and the food names column (redundant)
food_map$taxonomy <- NULL #removing taxa string column
food_map$X.FOODID <- NULL #removing food names column
#drop outlier nutrition samples from food_map
food_map <- food_map[,!(colnames(food_map) %in% outliers)]
# collapse by food level
# Summarizing at different levels - makes changes to everything downstream
split <- strsplit(rownames(food_map),";")             # Split and rejoin on lv7 to get species level
foodStrings <- sapply(split,function(x) paste(x[1:1],collapse=";"))
food_map <- rowsum(food_map,foodStrings)
# make food relative abundance
food_map <- sweep(food_map, 2, colSums(food_map), "/")
#Bring food taxa strings from row names to first column using setDT. Food_map is now analagous to subtaxasp
#food_map <- setDT(food_map, keep.rownames = TRUE)
#melt food_map to create a data drame called melted_food to merge by SampleIDs
melted_food<- melt(food_map)
#merge melted_food and map by variable (SampleID -- called variable in melted food file - so we use by.x)
merged_food<- merge(x=melted_food, y=map, by.x = "variable", by.y= "X.SampleID", all.x=TRUE)
colnames(merged_food)[3] <- "UserName" #Change col name from UserName.x to UserName - compatibility purposes
colnames(merged_food)[4] <- "StudyDayNo" #Change col name from StudyDayNo.x to StudyDayNo - compatibility purposes
#### Read in taxa table ####
taxa <- read.delim("raw/youbet.txt", row =1)
#### Summarizing ####
split <- strsplit(rownames(taxa),";")                               # Split and rejoin on lv7
taxaStrings <- sapply(split,function(x) paste(x[1:7],collapse=";")) # level 7 is species, 8 is strain
taxa <- rowsum(taxa,taxaStrings)                                    # Collapse by taxonomy name
#### Manicure the samplenames, grab latest (mct study only and only when re-running things from a new taxa table)
#colnames(taxa) = gsub(".S[0-9]+.R1.001","",colnames(taxa));      # Clean old plate IDs
#taxa = taxa[,order(colnames(taxa))];              # Sort nicely by sample ID
#taxa = taxa[,-(grep("L0",colnames(taxa))-1)];     # Keep new runs only
#colnames(taxa) = gsub(".S[0-9]+.L001.R1.001","",colnames(taxa)); # Clean new plate IDs
#### Massaging ####
taxa = taxa[,colSums(taxa)>=20000]                  #use taxa var to create OTU table (counts)
staxa = taxa                                         #staxa is utilized for relative abundances, taxa for counts
staxa = sweep(staxa,2,colSums(staxa),'/');           # Normalize
staxa = staxa[order(rowMeans(staxa),decreasing=F),]; # Sort by avg. abundance
staxa = staxa[rowMeans(staxa) >= 0.0001,];            # Drop rare taxa (abundance)
staxa = staxa[rowSums(staxa > 0) > 10,];             # Drop rare taxa (prevalence)
###phylum level taxa ###
ptaxa = taxa
split <- strsplit(rownames(ptaxa),";")                               # Split and rejoin on lv7
ptaxaStrings <- sapply(split,function(x) paste(x[1:2],collapse=";")) # level 7 is species, 8 is strain
ptaxa <- rowsum(ptaxa,ptaxaStrings)                                    # Collapse by taxonomy name
ptaxa = sweep(ptaxa,2,colSums(ptaxa),'/')
ptaxa = ptaxa[order(rowMeans(ptaxa),decreasing=T),]
#selet top four
ptaxa <- ptaxa[1:4,]
#traspose to add to map for later use
ptaxa <- t(ptaxa)
colnames(ptaxa) <- gsub(".*p__?", "", colnames(ptaxa))
ptaxa <- as.data.frame(ptaxa)
ptaxa <- rownames_to_column(ptaxa, "X.SampleID")
###genus level taxa ###
gtaxa = taxa
splitg <- strsplit(rownames(gtaxa),";")                               # Split and rejoin on lv7
gtaxaStrings <- sapply(splitg,function(x) paste(x[1:6],collapse=";")) # level 7 is species, 8 is strain
gtaxa <- rowsum(gtaxa,gtaxaStrings)                                    # Collapse by taxonomy name
gtaxa = sweep(gtaxa,2,colSums(gtaxa),'/')
gtaxa = gtaxa[order(rowMeans(gtaxa),decreasing=T),]
#selet top four
gtaxa <- gtaxa[1:4,]
#traspose to add to map for later use
gtaxa <- t(gtaxa)
#colnames(sptaxa) <- gsub("^.*\\.","", colnames(sptaxa) )
colnames(gtaxa) <- gsub(".*;g__?", "", colnames(gtaxa))
colnames(gtaxa) <- gsub("_", "", colnames(gtaxa))
colnames(gtaxa) <- gsub(";.*","",colnames(gtaxa))
myrownames <- rownames(gtaxa)
gtaxa <- apply(gtaxa, 2, function(x) cut(x, breaks = seq(0, max(x), length.out = 15)))
rownames(gtaxa) <- myrownames
gtaxa <- as.data.frame(gtaxa)
gtaxa <- rownames_to_column(gtaxa, "X.SampleID")
###Instantiate Plots###
colnames(map)[2] <- "UserName" #Change col name from UserName.x to UserName - compatibility purposes
colnames(map)[3] <- "StudyDayNo" #Change col name from StudyDayNo.x to StudyDayNo - compatibility purposes
# add realative abundace of phylum taxa to the map for plotting
map <- left_join(map,ptaxa)
# add realative abundace of species taxa to the map for plotting
map <- left_join(map,gtaxa, by = "X.SampleID")
id = "MCTs33"
#microbiome iteration
submap <- map[map$UserName == id,] #create submap variable we can use to iterate through
subnutr <- nutrition_table[nutrition_table$UserName == id,]
subtaxa <- staxa[(colnames(staxa) %in% submap[,"X.SampleID"])] #create subtaxa variable - looks at each subject individually
# sort the subtaxa df by abundance
subtaxa <- subtaxa[order(rowMeans(subtaxa), decreasing = TRUE),]
subtaxasp <- setDT(subtaxa, keep.rownames=TRUE) #make rownames first column of frame
#food iteration
macro_totals <-  round(mean(subnutr$PROT),2) +  round(mean(subnutr$TFAT),2) + round(mean(subnutr$CARB),2)
sub_foodmap <- merged_food[merged_food$UserName == id,] #sub food variable allows us to access one subject at a time (like submap)
sub_food <- food_map[(colnames(food_map) %in% sub_foodmap[,"variable"])]#sub food variable looks at each subject individually
sub_foodsp <- setDT(sub_food, keep.rownames = TRUE) #make rownames first column of frame
#alpha diversity iteration
subtaxaalpha <- taxa[(colnames(taxa) %in% submap[,"X.SampleID"])] #subtaxa variable used for alpha diversity
taxalpha <- taxa[(colnames(taxa) %in% map[,"X.SampleID"])] #matrix utilized to calculate study average alpha div.
#beta diversity iteration
betataxa<- staxa[(colnames(staxa) %in% map[,"X.SampleID"])] #Create table with just taxa and subjects
betataxa <- t(betataxa) #transpose
#blood draw values
subblood <- UserName_map[UserName_map$UserName == id,]
long_plot <- subnutr %>% select(X.SampleID, KCAL, PROT, TFAT, CARB, UserName)
long_plot$PROT <- long_plot$PROT*4/long_plot$KCAL
long_plot$TFAT <- long_plot$TFAT*9/long_plot$KCAL
long_plot$CARB <- long_plot$CARB*4/long_plot$KCAL
long_plot <- melt(long_plot, id.vars = c("X.SampleID", "UserName", "KCAL"),
measure.vars = c("PROT", "TFAT", "CARB"),
variable.name = "Macro", value.name = "PCT")
#instantiate color brewer and axis tick mark amount
colpal <- colorRampPalette(brewer.pal(9,"Set3"))(3)
colpal <- sample(colpal,3,replace = FALSE)
tick_label <- seq(1:17)
# plot kcal filled with % protein, fat, and carb
ggplot(long_plot, aes(x = X.SampleID, y = KCAL*PCT, fill = Macro)) +
geom_bar(stat = "identity") +
theme_classic() +
scale_fill_manual(values=colpal, labels = c("Protein", "Total Fat", "Carbohydrate"))+
#scale_fill_brewer(palette = colpal) +
scale_x_discrete(labels=c(tick_label))+
labs(fill = "Macronutrient\nDistribution", y = "Daily reported intake (Kcal)", x = "Study Day Number") +
theme(
#axis.title.x =element_text(family = "Helvetica"), axis.title.y =element_text(family = "Helvetica"),
plot.title = element_text(hjust = 0.5))
#instantiate color brewer and axis tick mark amounts
colpal<- colorRampPalette(brewer.pal(9,"Set3"))(37)
colpal<- sample(colpal,37, replace = FALSE)
tick_label <- seq(1:17)
#Study average for individual's fiber intake
fiber_average <-round(mean(subnutr$FIBE),2)
fiber_rec <- round(14*mean(subnutr$KCAL)/1000)
p <- ggplot(subnutr,aes(x = StudyDayNo,y = FIBE)) +
geom_bar(aes(fill = colpal[1]),stat = "identity",position = "dodge") + scale_x_discrete(labels = abbreviate)+
geom_hline(size=.75,col="red",yintercept = fiber_rec) + #Recommended fiber level
geom_hline(size=.75,col="gold",yintercept = fiber_average) +  #Recommended fiber level
annotate(geom="text", label="Recommended Intake Level",x=15,y=fiber_rec, vjust=-1, size = 3) +
annotate(geom="text", label="Your Average Intake Level",x=15,y=fiber_average,  vjust=-1, size =3)
p + guides(fill=F) +
theme_classic(base_family = "Helvetica")+
theme(plot.title = element_text(hjust = 0.5)) +
scale_x_discrete(labels=c(tick_label))+
scale_fill_manual(values = colpal)+
labs(x="Study Day Number", y= "Fiber in grams")+
ggtitle("Daily Fiber Intake")
# make ggplot bar chart of top 10 most abundant species per day
#melt sub_foodsp to get our dataframe in the long format for future usage (differs from melted_food)
melt_food<- melt(sub_foodsp)
#merge to get access to Day var (differs from merged_food)
merge_food<- merge(x=melt_food, y=map, by.x = "variable", by.y= "X.SampleID", all.x=TRUE)
#rename columns to get rid of the .x following UserName and StudyDayNo
colnames(merge_food)[4] <- "UserName" #Change col name from UserName.x to UserName - compatibility purposes
colnames(merge_food)[5] <- "StudyDayNo" #Change col name from StudyDayNo.x to StudyDayNo - compatibility purposes
#convert our dataframe species (rn) column to a character
merge_food$rn <- as.character(merge_food$rn)
#series of gsub commands meant to neaten and clarify legend content
merge_food$rn <- gsub(".*s__", "", merge_food$rn)
merge_food$rn <- gsub("\\[", "",merge_food$rn)
merge_food$rn <- gsub("\\]", "",merge_food$rn)
merge_food$rn <- gsub("_", " ",merge_food$rn)
merge_food$rn <- gsub("L1", "",merge_food$rn)
#instantiate color brewer and axes tick mark amount
colpal <- colorRampPalette(brewer.pal(8,"Set3"))
colpal <- sample(colpal(length(unique(merge_food$rn))))
#made StudyDayNo a factor in the map, so don't need to use the tick labels
ggplot(merge_food, aes(x = StudyDayNo, y = value, fill = rn)) +
geom_bar(stat = "identity") +
scale_x_discrete(drop = FALSE) +
scale_fill_manual(values =colpal)+
theme_classic(base_family = "Helvetica") +
theme(axis.text.x = element_text( hjust = 0.5, family = "Helvetica"),
plot.title =  element_text(hjust = 0.5, family = "Helvetica"),
strip.background = element_rect(color = "grey")) +
guides(fill = guide_legend(reverse = FALSE,
keywidth = 1,
keyheight = 1,
ncol = 1,
title= "Food Group")) +
labs(y="Relative Abundance",x="Study Day Number")+
ggtitle("Food groups consumed each day")
# make ggplot bar chart of top 10 most abundant species per day
#melt subtaxasp to get our dataframe in the long format for future usage
meltdf<- melt(subtaxasp)
#merge to get access to Day var
mergedf<- merge(x=meltdf, y=map, by.x = "variable", by.y= "X.SampleID", all.x=TRUE)
#convert our dataframe species (rn) column to a character
mergedf$rn <- as.character(mergedf$rn)
#series of gsub commands meant to neaten and clarify legend content
mergedf$rn <- gsub(".*s__", "", mergedf$rn)
mergedf$rn <- gsub("\\[", "",mergedf$rn)
mergedf$rn <- gsub("\\]", "",mergedf$rn)
mergedf$rn <- gsub("_", " ",mergedf$rn)
#create small abundance category
mergedf$rn[mergedf$value < 0.025] <- "<2.5% abundance"
mergedf <- mergedf %>% group_by(StudyDayNo, rn) %>% summarise(newvalue = sum(value))
#instantiate color brewer and axes tick mark amount
colpal<- colorRampPalette(brewer.pal(12,"Set3"))
colpal<- sample(colpal(length(unique(mergedf$rn))))
ggplot(mergedf, aes(x = StudyDayNo, y = newvalue, fill = rn)) +
geom_bar(stat = "identity") +
scale_x_discrete(drop = FALSE) +
scale_fill_manual(values =colpal)+
theme_classic(base_family = "Helvetica") +
theme(axis.text.x = element_text( hjust = 0.5, family = "Helvetica"),
plot.title =  element_text(hjust = 0.5, family = "Helvetica"),
strip.background = element_rect(color = "grey")) +
guides(fill = guide_legend(reverse = FALSE,
keywidth = 1,
keyheight = 1,
ncol = 1,
title= "Bacterial Species")) +
labs(y="Relative Abundance",x="Study Day Number")+
ggtitle("Bacterial species in your gut each day")
#transpose
subtaxaalpha <- t(subtaxaalpha)
taxalpha <- t(taxalpha)
#calculate alpha diversity and assign to variable alphad
alphad <- diversity(subtaxaalpha, index = "shannon", MARGIN = 1, base = exp(1))
alphad <- as.data.frame(alphad)
alphad <- rownames_to_column(alphad, var = "X.SampleID")
#calculate study alpha diversity and assign to variable studyalpha
studyalpha <- diversity(taxalpha, index = "shannon", MARGIN = 1, base = exp(1))
studyalpha <- as.data.frame(studyalpha)
studyalpha <- rownames_to_column(studyalpha, var = "X.SampleID")
#merge melted df with map to get access to StudyDay variable
merged_alpha<- merge(x=alphad, y=map, all.x=TRUE)
# make studydayno a continuous variable for plotting
merged_alpha$StudyDayNo <- as.numeric(merged_alpha$StudyDayNo)
# Find statistical artifacts for (shannon) alpha diversity for all subjects
med <- quantile(studyalpha$studyalpha)[3]
q1 <- quantile(studyalpha$studyalpha)[2] #25th percentile
q3 <- quantile(studyalpha$studyalpha)[4] #75th percentile
#make gg plot line graph of subject alpha diversity per day
ggplot(merged_alpha, aes(x=StudyDayNo, y=alphad)) +
scale_x_continuous(breaks = c(tick_label)) +
theme_classic() +
geom_smooth(color = "Black", fill = "#8DD3C7") +
geom_point() +
geom_hline(size=.75, color="grey", yintercept = med)+
geom_hline(size=.75, color="#E3D5DC", yintercept = q1, linetype = "dashed")+
geom_hline(size=.75, color="#E3D5DC", yintercept = q3, linetype = "dashed")+
annotate(geom="text", label="Median",x=15,y=med, vjust=-1, size = 3) +
annotate(geom="text", label="25th percentile",x=15,y=q1, vjust=-1, size = 3) +
annotate(geom="text", label="75th percentile",x=15,y=q3, vjust=-1, size = 3) +
labs(x= "Study Day Number",y="Alpha Diversity (Shannon)")+
guides(fill=FALSE)+
ggtitle("Alpha diversity of your gut microbiome")+
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
#create PCOA plot of beta diversities of pertinent subjects
betad<-vegdist(betataxa, method="bray", binary=FALSE, diag=FALSE, upper=FALSE,
na.rm = FALSE)
#betad as matrix
betad <- as.matrix(dist(betad))
#column name is "IDs"
IDs <-colnames(betad)
# Run the pcoa() function on the beta diversity table, and store the vectors generated as a dataframe
PCOA <- data.frame(pcoa(betad)$vectors)
#create vector with placeholders
new_names <- rep("",ncol(PCOA))
#create for loop which gives column names (currently named "axis") the name of PC1, PC2, PC3.. so forth
#Each column for the PCOA matrix is a new PC (number).
for(i in 1:ncol(PCOA)){
new_names[i] <- paste("PC",i,sep="")
}
#code above uses a for loop - from the range of 1 to the number of columns in the PCOA
#matrix, the for loop accesses the new name variable and names it PC + i (which is 1,2,3  depending on column
#as indicated by for loop - for loop increases in increments of 1 (i goes up by 1) and goes thru columns)
#new_names (PC1, PC2, etc..) replace the current colnames
names(PCOA) <- new_names
#creates column that is sampleID
PCOA$X.SampleID <- IDs
#merge map and PCOA by SampleID - select both lines and run together - won't work otherwise
PCOA <- merge(PCOA, map, by = 'X.SampleID')
#### Plot PCOA ####
#instantiate shape and color palettes
# shape_pal <- c(1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8)
# shape_pal2 <- c(1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3)
# shape_pal3 <- c(15,19,17,18,15,19,17,18,15,19,17,18,15,19,17,18,15,19,17,18,15,19,17,18,15,19,17,18,15,19,17,18,15,19,17,18,15,19,17,18)
colpal<- colorRampPalette(brewer.pal(12,"Set3"))
colpal<- sample(colpal(length(unique(PCOA$UserName))))
id <- gsub("_", " ",id)
# make a variable for self/other to use for plotting
PCOA <- PCOA %>% mutate(User = ifelse(UserName == id, "self", "other"))
# sort data frame so that the values matching id are at the bottom and plotted last
PCOA <- PCOA[order(PCOA$User),]
ggplot(PCOA, aes(x = PC1, y = PC2, group = User)) +
geom_point(aes(fill = UserName, color = ifelse(PCOA$UserName %in% id == TRUE, "you","z")),
alpha=1, pch = 21, size = 5) +
scale_fill_manual(breaks = id, values = colpal) +
scale_color_manual(values = c("black", "grey")) +
scale_shape_manual(values = shape_pal3) +
stat_ellipse(color = "dark grey", type = "norm", linetype = 2, level = 0.95) +
labs(title=paste0("Beta diversity of your gut microbiome - PCoA -  ", id)) +
guides(fill = guide_legend(override.aes = list(alpha=1)), size = FALSE, col = FALSE) +
#guides(size = FALSE, fill = FALSE) +
theme_classic(base_family = "Helvetica") +
theme(plot.title = element_text(size = 14, hjust = 0.5),
legend.position = "bottom")
colpal<- colorRampPalette(brewer.pal(11,"Spectral"))(15) #spectral progression
colpal
rev(colpal)
colpal <- rev(colpal)
cc <- scales::seq_gradient_pal("blue", "red", "Lab")(seq(0,1,length.out=20))
Bactr <- ggplot(PCOA, aes(x = PC1, y = PC2, group = User)) +
geom_point(aes(fill = Bacteroides, color = ifelse(PCOA$UserName %in% id == TRUE, "you","z")),
alpha=1, pch = 21, size = 5) +
scale_fill_manual(values = colpal, guides(fill="")) +
scale_color_manual(values = c("black", "dark grey")) +
stat_ellipse(color = "dark grey", type = "norm", linetype = 2, level = 0.95) +
labs(title="Relative Abundance of Prevotella ") +
guides(fill = guide_legend(override.aes = list(alpha=1)), size = FALSE, col = FALSE) +
theme_classic(base_family = "Helvetica") +
theme(plot.title = element_text(size = 14, hjust = 0.5),
legend.position = "bottom")
Para <- ggplot(PCOA, aes(x = PC1, y = PC2, group = User)) +
geom_point(aes(fill = Parabacteroides, color = ifelse(PCOA$UserName %in% id == TRUE, "you","z")),
alpha=1, pch = 21, size = 5) +
scale_fill_manual(values = colpal, guides(fill="")) +
scale_color_manual(values = c("black", "dark grey")) +
stat_ellipse(color = "dark grey", type = "norm", linetype = 2, level = 0.95) +
labs(title="Relative Abundance of Parabacteriodes") +
guides(fill = guide_legend(override.aes = list(alpha=1)), size = FALSE, col = FALSE) +
theme_classic(base_family = "Helvetica") +
theme(plot.title = element_text(size = 14, hjust = 0.5),
legend.position = "bottom")
Alis <- ggplot(PCOA, aes(x = PC1, y = PC2, group = User)) +
geom_point(aes(fill = Alistipes, color = ifelse(PCOA$UserName %in% id == TRUE, "you","z")),
alpha=1, pch = 21, size = 5) +
scale_fill_manual(values = colpal, guides(fill="")) +
scale_color_manual(values = c("black", "dark grey")) +
stat_ellipse(color = "dark grey", type = "norm", linetype = 2, level = 0.95) +
labs(title="Relative Abundance of Alstipes") +
guides(fill = guide_legend(override.aes = list(alpha=1)), size = FALSE, col = FALSE) +
theme_classic(base_family = "Helvetica") +
theme(plot.title = element_text(size = 14, hjust = 0.5),
legend.position = "bottom")
Prevo <- ggplot(PCOA, aes(x = PC1, y = PC2, group = User)) +
geom_point(aes(fill = Prevotella, color = ifelse(PCOA$UserName %in% id == TRUE, "you","z")),
alpha=1, pch = 21, size = 5) +
scale_fill_manual(values = colpal, guides(fill="")) +
scale_color_manual(values = c("black", "dark grey")) +
stat_ellipse(color = "dark grey", type = "norm", linetype = 2, level = 0.95) +
labs(title="Relative Abundance of Prevotella") +
guides(fill = guide_legend(override.aes = list(alpha=1)), size = FALSE, col = FALSE) +
theme_classic(base_family = "Helvetica") +
theme(plot.title = element_text(size = 14, hjust = 0.5),
legend.position = "bottom")
plot_grid(Bactr, Para, Alis, Prevo, nrow = 2, ncol = 2 )
#rendering
render(input = "lib/mypdf.Rmd",output_file = paste0('report.', id, '.pdf'),"pdf_document",
output_dir = "output/output")
source('~/Documents/Projects/zebra/bin/makepdf.R', echo=TRUE)
grad1<- c("#FFFFCC", "#FFF7B9","#FFEFA6","#FEE794","#FEDF83","#FED471","#FEC45F","#FEB44E","#FDA446","#FD943F","#FC7F38","#FC6530","#FA4B29","#F03523","#E51F1D","#D7111F","#C70623","#B30026","#990026","#800026")
grad2<- c("#deebf7", "#9ecae1", "#3182bd")
grad3<- c("#e5f5e0", "#a1d99b", "#31a354")
grad4<- c("#efedf5", "#bcbddc", "#756bb1")
#colpal<- colorRampPalette(brewer.pal(9,"YlOrRd"))(20) #color progression
colpal<- colorRampPalette(brewer.pal(11,"Spectral"))(15) #spectral progression
colpal <- rev(colpal)
cc <- scales::seq_gradient_pal("blue", "red", "Lab")(seq(0,1,length.out=20))
#colpal<- sample(colpal(length(unique(PCOA$UserName))))
Bactr <- ggplot(PCOA, aes(x = PC1, y = PC2, group = User)) +
geom_point(aes(fill = Bacteroides, color = ifelse(PCOA$UserName %in% id == TRUE, "you","z")),
alpha=1, pch = 21, size = 5) +
scale_fill_manual(values = colpal, guides(fill="")) +
scale_color_manual(values = c("black", "dark grey")) +
stat_ellipse(color = "dark grey", type = "norm", linetype = 2, level = 0.95) +
labs(title="Relative Abundance of Bacteroides") +
guides(fill = guide_legend(override.aes = list(alpha=1)), size = FALSE, col = FALSE) +
theme_classic(base_family = "Helvetica") +
theme(plot.title = element_text(size = 14, hjust = 0.5),
legend.position = "bottom")
Para <- ggplot(PCOA, aes(x = PC1, y = PC2, group = User)) +
geom_point(aes(fill = Parabacteroides, color = ifelse(PCOA$UserName %in% id == TRUE, "you","z")),
alpha=1, pch = 21, size = 5) +
scale_fill_manual(values = colpal, guides(fill="")) +
scale_color_manual(values = c("black", "dark grey")) +
stat_ellipse(color = "dark grey", type = "norm", linetype = 2, level = 0.95) +
labs(title="Relative Abundance of Parabacteriodes") +
guides(fill = guide_legend(override.aes = list(alpha=1)), size = FALSE, col = FALSE) +
theme_classic(base_family = "Helvetica") +
theme(plot.title = element_text(size = 14, hjust = 0.5),
legend.position = "bottom")
Alis <- ggplot(PCOA, aes(x = PC1, y = PC2, group = User)) +
geom_point(aes(fill = Alistipes, color = ifelse(PCOA$UserName %in% id == TRUE, "you","z")),
alpha=1, pch = 21, size = 5) +
scale_fill_manual(values = colpal, guides(fill="")) +
scale_color_manual(values = c("black", "dark grey")) +
stat_ellipse(color = "dark grey", type = "norm", linetype = 2, level = 0.95) +
labs(title="Relative Abundance of Alstipes") +
guides(fill = guide_legend(override.aes = list(alpha=1)), size = FALSE, col = FALSE) +
theme_classic(base_family = "Helvetica") +
theme(plot.title = element_text(size = 14, hjust = 0.5),
legend.position = "bottom")
Prevo <- ggplot(PCOA, aes(x = PC1, y = PC2, group = User)) +
geom_point(aes(fill = Prevotella, color = ifelse(PCOA$UserName %in% id == TRUE, "you","z")),
alpha=1, pch = 21, size = 5) +
scale_fill_manual(values = colpal, guides(fill="")) +
scale_color_manual(values = c("black", "dark grey")) +
stat_ellipse(color = "dark grey", type = "norm", linetype = 2, level = 0.95) +
labs(title="Relative Abundance of Prevotella") +
guides(fill = guide_legend(override.aes = list(alpha=1)), size = FALSE, col = FALSE) +
theme_classic(base_family = "Helvetica") +
theme(plot.title = element_text(size = 14, hjust = 0.5),
legend.position = "bottom")
plot_grid(Bactr, Para, Alis, Prevo, nrow = 2, ncol = 2 )
grad1<- c("#FFFFCC", "#FFF7B9","#FFEFA6","#FEE794","#FEDF83","#FED471","#FEC45F","#FEB44E","#FDA446","#FD943F","#FC7F38","#FC6530","#FA4B29","#F03523","#E51F1D","#D7111F","#C70623","#B30026","#990026","#800026")
grad2<- c("#deebf7", "#9ecae1", "#3182bd")
grad3<- c("#e5f5e0", "#a1d99b", "#31a354")
grad4<- c("#efedf5", "#bcbddc", "#756bb1")
#colpal<- colorRampPalette(brewer.pal(9,"YlOrRd"))(20) #color progression
colpal<- colorRampPalette(brewer.pal(11,"Spectral"))(15) #spectral progression
colpal <- rev(colpal)
cc <- scales::seq_gradient_pal("blue", "red", "Lab")(seq(0,1,length.out=20))
#colpal<- sample(colpal(length(unique(PCOA$UserName))))
Bactr <- ggplot(PCOA, aes(x = PC1, y = PC2, group = User)) +
geom_point(aes(fill = Bacteroides, color = ifelse(PCOA$UserName %in% id == TRUE, "you","z")),
alpha=1, pch = 21, size = 5) +
scale_fill_manual(values = colpal, guides(fill="")) +
scale_color_manual(values = c("black", "dark grey")) +
stat_ellipse(color = "dark grey", type = "norm", linetype = 2, level = 0.95) +
labs(title="Relative Abundance of Bacteroides") +
guides(fill = guide_legend(override.aes = list(alpha=1)), size = FALSE, col = FALSE) +
theme_classic(base_family = "Helvetica") +
theme(plot.title = element_text(size = 14, hjust = 0.5),
legend.position = "bottom")
Para <- ggplot(PCOA, aes(x = PC1, y = PC2, group = User)) +
geom_point(aes(fill = Parabacteroides, color = ifelse(PCOA$UserName %in% id == TRUE, "you","z")),
alpha=1, pch = 21, size = 5) +
scale_fill_manual(values = colpal, guides(fill="")) +
scale_color_manual(values = c("black", "dark grey")) +
stat_ellipse(color = "dark grey", type = "norm", linetype = 2, level = 0.95) +
labs(title="Relative Abundance of Parabacteriodes") +
guides(fill = guide_legend(override.aes = list(alpha=1)), size = FALSE, col = FALSE) +
theme_classic(base_family = "Helvetica") +
theme(plot.title = element_text(size = 14, hjust = 0.5),
legend.position = "bottom")
Alis <- ggplot(PCOA, aes(x = PC1, y = PC2, group = User)) +
geom_point(aes(fill = Alistipes, color = ifelse(PCOA$UserName %in% id == TRUE, "you","z")),
alpha=1, pch = 21, size = 5) +
scale_fill_manual(values = colpal, guides(fill="")) +
scale_color_manual(values = c("black", "dark grey")) +
stat_ellipse(color = "dark grey", type = "norm", linetype = 2, level = 0.95) +
labs(title="Relative Abundance of Alistipes") +
guides(fill = guide_legend(override.aes = list(alpha=1)), size = FALSE, col = FALSE) +
theme_classic(base_family = "Helvetica") +
theme(plot.title = element_text(size = 14, hjust = 0.5),
legend.position = "bottom")
Prevo <- ggplot(PCOA, aes(x = PC1, y = PC2, group = User)) +
geom_point(aes(fill = Prevotella, color = ifelse(PCOA$UserName %in% id == TRUE, "you","z")),
alpha=1, pch = 21, size = 5) +
scale_fill_manual(values = colpal, guides(fill="")) +
scale_color_manual(values = c("black", "dark grey")) +
stat_ellipse(color = "dark grey", type = "norm", linetype = 2, level = 0.95) +
labs(title="Relative Abundance of Prevotella") +
guides(fill = guide_legend(override.aes = list(alpha=1)), size = FALSE, col = FALSE) +
theme_classic(base_family = "Helvetica") +
theme(plot.title = element_text(size = 14, hjust = 0.5),
legend.position = "bottom")
plot_grid(Bactr, Para, Alis, Prevo, nrow = 2, ncol = 2 )
source('~/Documents/Projects/zebra/bin/makepdf.R', echo=TRUE)
