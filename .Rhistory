install.packages("swirl")
library("swirl", lib.loc="~/R/win-library/3.2")
swirl()
1
1
1
2
3
1
2
3
4
4
4
4
5
5
50
0
1
5 + 7
x <- 5 + 7
x
y <- x - 3
y
z(1.1, 9, 3.14)
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z * 2 + 100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div < z/my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1, 2, 3, 4) + c(0, 10, 100 )
z * 2 + 1000
my_div
swirl()
swirl()
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >- 6
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
c(my_char, Arzang)
my_name <- c(my_char, "Arzang")
my_name
paste(my_name, collapse = " ")
("Hello", "world!", sep = " ")
c("Hello", "world!", sep = " ")
paste("Hello", "world!", sep = " ")
paste("1:3", c("X", "Y", "Z"), sep = " ")
paste(1:3, c("X", "Y", "Z"), sep = " ")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, sep = "-")
paste(LETTERS, 1:4, sep = "-")
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class*my_vector
class(my_vector)
my_matrix <- my_vector
matrix()?
?
esc
matrix?
s
?
matrix()
?"matrix"
?matrix
play()
27/30
nxt()
my_matrix2 <- matrix(data= 1:20, nrow=4, ncol=5, byrow = FALSE, dimnames = NULL)
identical(my_matrix,my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(vector, my_matrix)
cbind(patients, my_matrix)
my_data(patients, my_matrix)
my_data <- (patients, my_matrix)
my_data <- (patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(cnames, my_data)
colnames()
colnames(cnames)
colnames(my_data) <- cnames
my_data
install.packages("rafalib")
library("rafalib")
install.packages("swirl")
library("swirl")
version
swirl()
5+7
x <- 5+ 7
x
y <- x-3
y
c(1.1,9,3.14)
z <- c(1.1,9,3.14)
?
end
?c
z
x <- (z,555,z)
x <- c(z,555,z)
c(z,555,z)
z * 2 + 100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1,2,3,4) + c(0,10,100)
z * 2 + 100
z * 2 + 1000
my_div
1:20
pi:10
15:1
?:
:?
"`"
?':'
seq(1,20)
seq(0,10,by=0.5)
seq(5,10,length=30)
my_seq <- seq(5,10,length=30)
length()
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0,1,2), times = 10)
rep(c(0,1,2), each = 10)
num_vect <- c(0.5,55,-10,6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- "My", "name", "is"
my_char <- c("My","name","is")
my_char
paste(my_char, collapse = " ")
my_name(c(my_char, "Arzang"))
my_name<- c(my_char, "Arzang")
my_name
paste(my_char, collapse = " ")
paste(my_name, collapse = " ")
paste("Hello","world", sep=" ")
paste("Hello","world!", sep=" ")
paste(1:3, c("x"."y","z"), sep="")
paste(c(1:3), c("x"."y","z"), sep="")
paste(1:3, c("x""y","z"), sep="")
paste(1:3, c("x","y","z"), sep="")
paste(1:3, c("x", "y", "z"), sep = "")
(1:3, c("X", "Y", "Z"), sep = "")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep ="-")
x <- c(44,NA,5,NA)
x * 3
y <- rnorm(1000)
z <- rep(NA,1000)
my_data <- sample(c(y,z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum==1
s
s
?
quit
info()
sum(my_na==1)
sum(my_na)
my_data
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x > 0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo =11, bar =2, norf =NA)
vect
names(vect)
vect2 <- c(11,2,Na)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo", "bar", "norf"
)
identical(vect1,vect2)
identical(vect,vect2)
vect["bar"]
vect[c("foo"),"bar"]
vect[c("foo", "bar")]
library(swirl)
swirl()
info()
main()
ls
swirl
swirl()
sswirl())
swirl()
library(swirl)
swirl()
library(rmarkdown)
library(knitr)
library(ggplot2)
library(reshape2)
library(tibble)
library(data.table)
library(vegan)
library(ape)
library(RColorBrewer)
library(dplyr)
library(cowplot)
setwd("C:/Users/arzan/Desktop/Bioinformatics/MCT/GIT/zebra")
nutrition_table <- read.table("raw/Totals_to_use.txt", sep = "\t", header = TRUE, comment = "")
outliers = c("MCT.f.0021", "MCT.f.0044", "MCT.f.0050", "MCT.f.0056", "MCT.f.0058", "MCT.f.0060", "MCT.f.0076", "MCT.f.0116", "MCT.f.0465", "MCT.f.0486", "MCT.f.0601")
nutrition_table <- nutrition_table[!(nutrition_table$X.SampleID %in% outliers),]
#Load the maps
SampleID_map <- read.table("raw/SampleID_map.txt", sep = "\t", header = TRUE, comment = "")
#Drop blanks from map
# drop the blank samples
SampleID_map <- SampleID_map[grep("Blank", SampleID_map$X.SampleID, invert = TRUE),]
UserName_map <- read.table("raw/UserName_map.txt", sep = "\t", header = TRUE, comment = "")
#merge the two to create the mapping file
#map <-  merge(x=nutrition_table, y=SampleID_map, by= "X.SampleID")
# create REE and TEE variables
map <- SampleID_map %>% mutate(REE = ifelse(Gender=="M", (10*Weight+6.25*Height-5*Age+5),
ifelse(Gender=="F", (10*Weight+6.25*Height-5*Age-161),
NA)),
TEE = REE*Activity.Factor) # calculate TEE with activity factor
# make sure studydayno is a factor for later plotting
map$StudyDayNo <- as.factor(map$StudyDayNo)
#read in the food table and assign it to pertinent variable
#food_map <-  read.table("raw/mct.food.otu.txt", sep = "\t", header = TRUE, comment = "")
# changed to use dehydrated food weights
food_map <-  read.table("raw/mct.dhydrt.otu.txt", sep = "\t", header = TRUE, comment = "")
# read in the food taxonomy mapping file
food_taxa <- read.table("raw/mct.taxonomy.txt", sep = "\t", header = TRUE, comment = "")
# # remove water from the food_map df
# # find descriptions of water
# water <- food_taxa %>% filter(FoodID != "92410110" &
#                                 FoodID != "92410210"&
#                                 FoodID != "92410250"&
#                                 FoodID != "94000100"&
#                                 FoodID != "94100100"&
#                                 FoodID != "94100200" &
#                                 FoodID != "94100300" &
#                                 FoodID != "94210100" &
#                                 FoodID != "94210200" &
#                                 FoodID != "94210300" &
#                                 FoodID != "94220200" &
#                                 FoodID != "94300100")
#
# #remove water
# food_taxa <- food_taxa %>% filter(taxonomy %in% water$taxonomy)
#
# # subset to remove water from the food table
# food_map <- food_map[food_map$X.FOODID %in% food_taxa$Main.food.description,]
#
# # clean up environment
# rm(water)
#set the row names of the food map file to the taxonomy strings
rownames(food_map) <- food_map$taxonomy
#remove the taxonomy string column and the food names column (redundant)
food_map$taxonomy <- NULL #removing taxa string column
food_map$X.FOODID <- NULL #removing food names column
#drop outlier nutrition samples from food_map
food_map <- food_map[,!(colnames(food_map) %in% outliers)]
# collapse by food level
# Summarizing at different levels - makes changes to everything downstream
split <- strsplit(rownames(food_map),";")             # Split and rejoin on lv7 to get species level
foodStrings <- sapply(split,function(x) paste(x[1:1],collapse=";"))
food_map <- rowsum(food_map,foodStrings)
# make food relative abundance
food_map <- sweep(food_map, 2, colSums(food_map), "/")
#Bring food taxa strings from row names to first column using setDT. Food_map is now analagous to subtaxasp
#food_map <- setDT(food_map, keep.rownames = TRUE)
#melt food_map to create a data drame called melted_food to merge by SampleIDs
melted_food<- melt(food_map)
#merge melted_food and map by variable (SampleID -- called variable in melted food file - so we use by.x)
merged_food<- merge(x=melted_food, y=map, by.x = "variable", by.y= "X.SampleID", all.x=TRUE)
colnames(merged_food)[3] <- "UserName" #Change col name from UserName.x to UserName - compatibility purposes
colnames(merged_food)[4] <- "StudyDayNo" #Change col name from StudyDayNo.x to StudyDayNo - compatibility purposes
#### Read in taxa table ####
taxa <- read.delim("raw/youbet.txt", row =1)
#### Summarizing ####
split <- strsplit(rownames(taxa),";")                               # Split and rejoin on lv7
taxaStrings <- sapply(split,function(x) paste(x[1:7],collapse=";")) # level 7 is species, 8 is strain
taxa <- rowsum(taxa,taxaStrings)                                    # Collapse by taxonomy name
#### Manicure the samplenames, grab latest (mct study only and only when re-running things from a new taxa table)
taxa = taxa[,colSums(taxa)>=20000]                  #use taxa var to create OTU table (counts)
staxa = taxa                                         #staxa is utilized for relative abundances, taxa for counts
staxa = sweep(staxa,2,colSums(staxa),'/');           # Normalize
staxa = staxa[order(rowMeans(staxa),decreasing=F),]; # Sort by avg. abundance
staxa = staxa[rowMeans(staxa) >= 0.0001,];            # Drop rare taxa (abundance)
staxa = staxa[rowSums(staxa > 0) > 10,];             # Drop rare taxa (prevalence)
###phylum level taxa ###
ptaxa = taxa
split <- strsplit(rownames(ptaxa),";")                               # Split and rejoin on lv7
ptaxaStrings <- sapply(split,function(x) paste(x[1:2],collapse=";")) # level 7 is species, 8 is strain
ptaxa <- rowsum(ptaxa,ptaxaStrings)                                    # Collapse by taxonomy name
ptaxa = sweep(ptaxa,2,colSums(ptaxa),'/')
ptaxa = ptaxa[order(rowMeans(ptaxa),decreasing=T),]
#selet top four
ptaxa <- ptaxa[1:4,]
#traspose to add to map for later use
ptaxa <- t(ptaxa)
colnames(ptaxa) <- gsub(".*p__?", "", colnames(ptaxa))
ptaxa <- as.data.frame(ptaxa)
ptaxa <- rownames_to_column(ptaxa, "X.SampleID")
###Instantiate Plots###
colnames(map)[2] <- "UserName" #Change col name from UserName.x to UserName - compatibility purposes
colnames(map)[3] <- "StudyDayNo" #Change col name from StudyDayNo.x to StudyDayNo - compatibility purposes
# add realative abundace of phylum taxa to the map for plotting
map <- left_join(map,ptaxa)
?left_join
for (id in unique(map$UserName)){
#microbiome iteration
submap <- map[map$UserName == id,] #create submap variable we can use to iterate through
subnutr <- nutrition_table[nutrition_table$UserName == id,]
subtaxa <- staxa[(colnames(staxa) %in% submap[,"X.SampleID"])] #create subtaxa variable - looks at each subject individually
# sort the subtaxa df by abundance
subtaxa <- subtaxa[order(rowMeans(subtaxa), decreasing = TRUE),]
subtaxasp <- setDT(subtaxa, keep.rownames=TRUE) #make rownames first column of frame
#food iteration
macro_totals <-  round(mean(subnutr$PROT),2) +  round(mean(subnutr$TFAT),2) + round(mean(subnutr$CARB),2)
sub_foodmap <- merged_food[merged_food$UserName == id,] #sub food variable allows us to access one subject at a time (like submap)
sub_food <- food_map[(colnames(food_map) %in% sub_foodmap[,"variable"])]#sub food variable looks at each subject individually
sub_foodsp <- setDT(sub_food, keep.rownames = TRUE) #make rownames first column of frame
#alpha diversity iteration
subtaxaalpha <- taxa[(colnames(taxa) %in% submap[,"X.SampleID"])] #subtaxa variable used for alpha diversity
taxalpha <- taxa[(colnames(taxa) %in% map[,"X.SampleID"])] #matrix utilized to calculate study average alpha div.
#beta diversity iteration
betataxa<- staxa[(colnames(staxa) %in% map[,"X.SampleID"])] #Create table with just taxa and subjects
betataxa <- t(betataxa) #transpose
#blood draw values
subblood <- UserName_map[UserName_map$UserName == id,]
#rendering
render(input = "lib/mypdf.Rmd",output_file = paste0('report.', id, '.pdf'),"pdf_document",
output_dir = "output/output")
}
plot_grid(Bact, Firm, Prot, Actin, nrow = 2, ncol = 2 )
install.packages(cowplot)
install.packages("cowplot")
install.packages("cowplot")
