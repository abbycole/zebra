setwd("/Users/abby/Documents/Projects/zebra/")
nutrition_table <- read.table("raw/Totals_to_use.txt", sep = "\t", header = TRUE, comment = "")
SampleID_map <- read.table("raw/SampleID_map.txt", sep = "\t", header = TRUE, comment = "")
map <-  merge(x=nutrition_table, y=SampleID_map, by= "X.SampleID")
food_map <-  read.table("raw/mct.food.otu.txt", sep = "\t", header = TRUE, comment = "")
rownames(food_map) <- food_map$taxonomy
food_map$taxonomy <- NULL #removing taxa string column
food_map$X.FOODID <- NULL #removing food names column
melted_food<- melt(food_map)
merged_food<- merge(x=melted_food, y=map, by.x = "variable", by.y= "X.SampleID", all.x=TRUE)
melted_food<- melt(food_map)
library(rmarkdown)
library(knitr)
library(ggplot2)
library(reshape2)
library(tibble)
library(data.table)
library(vegan)
library(ape)
library(RColorBrewer)
library(dplyr)
library(extrafont)
install.packages("extrafong")
setwd("/Users/abby/Documents/Projects/zebra/")
nutrition_table <- read.table("raw/Totals_to_use.txt", sep = "\t", header = TRUE, comment = "")
SampleID_map <- read.table("raw/SampleID_map.txt", sep = "\t", header = TRUE, comment = "")
map <-  merge(x=nutrition_table, y=SampleID_map, by= "X.SampleID")
food_map <-  read.table("raw/mct.food.otu.txt", sep = "\t", header = TRUE, comment = "")
rownames(food_map) <- food_map$taxonomy
food_map$taxonomy <- NULL #removing taxa string column
food_map$X.FOODID <- NULL #removing food names column
melted_food<- melt(food_map)
merged_food<- merge(x=melted_food, y=map, by.x = "variable", by.y= "X.SampleID", all.x=TRUE)
colnames(merged_food)[3] <- "UserName" #Change col name from UserName.x to UserName - compatibility purposes
colnames(merged_food)[4] <- "StudyDayNo" #Change col name from StudyDayNo.x to StudyDayNo - compatibility purposes
taxa <- read.delim("raw/youbet.txt", row =1)
split <- strsplit(rownames(taxa),";")                               # Split and rejoin on lv7
taxaStrings <- sapply(split,function(x) paste(x[1:7],collapse=";")) # level 7 is species, 8 is strain
taxa <- rowsum(taxa,taxaStrings)                                    # Collapse by taxonomy name
taxa = taxa[,colSums(taxa)>=20000]                  #use taxa var to create OTU table (counts)
staxa = taxa                                         #staxa is utilized for relative abundances, taxa for counts
staxa = sweep(staxa,2,colSums(staxa),'/');           # Normalize
staxa = staxa[order(rowMeans(staxa),decreasing=F),]; # Sort by avg. abundance
staxa = staxa[rowMeans(staxa) >= 0.0001,];            # Drop rare taxa (abundance)
staxa = staxa[rowSums(staxa > 0) > 10,];             # Drop rare taxa (prevalence)
colnames(map)[2] <- "UserName" #Change col name from UserName.x to UserName - compatibility purposes
colnames(map)[3] <- "StudyDayNo" #Change col name from StudyDayNo.x to StudyDayNo - compatibility purposes
id = "MCTs10"
submap <- map[map$UserName == id,] #create submap variable we can use to iterate through
subtaxa <- staxa[(colnames(staxa) %in% submap[,"X.SampleID"])] #create subtaxa variable - looks at each subject individually
subtaxasp <- setDT(subtaxa, keep.rownames=TRUE) #make rownames first column of frame
sub_foodmap <- merged_food[merged_food$UserName == id,] #sub food variable allows us to access one subject at a time (like submap)
sub_food <- food_map[(colnames(food_map) %in% sub_foodmap[,"variable"])]#sub food variable looks at each subject individually
sub_foodsp <- setDT(sub_food, keep.rownames = TRUE) #make rownames first column of frame
subtaxaalpha <- taxa[(colnames(taxa) %in% submap[,"X.SampleID"])] #subtaxa variable used for alpha diversity
betataxa<- staxa[(colnames(staxa) %in% map[,"X.SampleID"])] #Create table with just taxa and subjects
betataxa <- t(betataxa) #transpose
View(sub_foodsp)
View(sub_food)
View(sub_foodmap)
sub_foodmap <- merged_food[merged_food$UserName == id,] #sub food variable allows us to access one subject at a time (like submap)
sub_food <- food_map[(colnames(food_map) %in% sub_foodmap[,"variable"])]#sub food variable looks at each subject individually
sub_foodsp <- setDT(sub_food, keep.rownames = TRUE) #make rownames first column of frame
####Pre Processing####
#set to working directory to project zebra directory
setwd("/Users/abby/Documents/Projects/zebra/")
#Read in sampleID and nutrition files and assign them to pertinent variables
nutrition_table <- read.table("raw/Totals_to_use.txt", sep = "\t", header = TRUE, comment = "")
SampleID_map <- read.table("raw/SampleID_map.txt", sep = "\t", header = TRUE, comment = "")
#merge the two to create the mapping file
map <-  merge(x=nutrition_table, y=SampleID_map, by= "X.SampleID")
#read in the food table and assign it to pertinent variable
food_map <-  read.table("raw/mct.food.otu.txt", sep = "\t", header = TRUE, comment = "")
#set the row names of the food map file to the taxonomy strings
rownames(food_map) <- food_map$taxonomy
#remove the taxonomy string column and the food names column (redundant)
food_map$taxonomy <- NULL #removing taxa string column
food_map$X.FOODID <- NULL #removing food names column
#Bring food taxa strings from row names to first column using setDT. Food_map is now analagous to subtaxasp
#food_map <- setDT(food_map, keep.rownames = TRUE)
#melt food_map to create a data drame called melted_food to merge by SampleIDs
melted_food<- melt(food_map)
#merge melted_food and map by variable (SampleID -- called variable in melted food file - so we use by.x)
merged_food<- merge(x=melted_food, y=map, by.x = "variable", by.y= "X.SampleID", all.x=TRUE)
colnames(merged_food)[3] <- "UserName" #Change col name from UserName.x to UserName - compatibility purposes
colnames(merged_food)[4] <- "StudyDayNo" #Change col name from StudyDayNo.x to StudyDayNo - compatibility purposes
#### Read in taxa table ####
taxa <- read.delim("raw/youbet.txt", row =1)
#### Summarizing ####
split <- strsplit(rownames(taxa),";")                               # Split and rejoin on lv7
taxaStrings <- sapply(split,function(x) paste(x[1:7],collapse=";")) # level 7 is species, 8 is strain
taxa <- rowsum(taxa,taxaStrings)                                    # Collapse by taxonomy name
#### Manicure the samplenames, grab latest (mct study only and only when re-running things from a new taxa table)
#colnames(taxa) = gsub(".S[0-9]+.R1.001","",colnames(taxa));      # Clean old plate IDs
#taxa = taxa[,order(colnames(taxa))];              # Sort nicely by sample ID
#taxa = taxa[,-(grep("L0",colnames(taxa))-1)];     # Keep new runs only
#colnames(taxa) = gsub(".S[0-9]+.L001.R1.001","",colnames(taxa)); # Clean new plate IDs
#### Massaging ####
taxa = taxa[,colSums(taxa)>=20000]                  #use taxa var to create OTU table (counts)
staxa = taxa                                         #staxa is utilized for relative abundances, taxa for counts
staxa = sweep(staxa,2,colSums(staxa),'/');           # Normalize
staxa = staxa[order(rowMeans(staxa),decreasing=F),]; # Sort by avg. abundance
staxa = staxa[rowMeans(staxa) >= 0.0001,];            # Drop rare taxa (abundance)
staxa = staxa[rowSums(staxa > 0) > 10,];             # Drop rare taxa (prevalence)
###Instantiate Plots###
colnames(map)[2] <- "UserName" #Change col name from UserName.x to UserName - compatibility purposes
colnames(map)[3] <- "StudyDayNo" #Change col name from StudyDayNo.x to StudyDayNo - compatibility purposes
submap <- map[map$UserName == id,] #create submap variable we can use to iterate through
subtaxa <- staxa[(colnames(staxa) %in% submap[,"X.SampleID"])] #create subtaxa variable - looks at each subject individually
subtaxasp <- setDT(subtaxa, keep.rownames=TRUE) #make rownames first column of frame
#food iteration
sub_foodmap <- merged_food[merged_food$UserName == id,] #sub food variable allows us to access one subject at a time (like submap)
sub_food <- food_map[(colnames(food_map) %in% sub_foodmap[,"variable"])]#sub food variable looks at each subject individually
sub_foodsp <- setDT(sub_food, keep.rownames = TRUE) #make rownames first column of frame
#alpha diversity iteration
subtaxaalpha <- taxa[(colnames(taxa) %in% submap[,"X.SampleID"])] #subtaxa variable used for alpha diversity
#beta diversity iteration
betataxa<- staxa[(colnames(staxa) %in% map[,"X.SampleID"])] #Create table with just taxa and subjects
betataxa <- t(betataxa) #transpose
View(sub_foodsp)
View(sub_food)
sub_food <- food_map[(colnames(food_map) %in% sub_foodmap[,"variable"])]#sub food variable looks at each subject individually
View(sub_food)
View(food_map)
View(sub_food)
View(food_map)
food_taxa <- read.table("raw/mct.taxonomy.txt", sep = "\t", header = TRUE, comment = "")
View(food_taxa)
water <- food_taxa %>% filter(FoodID != "92410110" &
FoodID != "92410210"&
FoodID != "92410250"&
FoodID != "94000100"&
FoodID != "94100100"&
FoodID != "94100200" &
FoodID != "94100300" &
FoodID != "94210100" &
FoodID != "94210200" &
FoodID != "94210300" &
FoodID != "94220200" &
FoodID != "94300100")
View(water)
food_taxa <- food_taxa %>% filter(taxonomy %in% water$taxonomy)
food_map <- food_map[rownames(food_map) %in% food_taxa$taxonomy]
food_map <- food_map[rownames(food_map) %in% food_taxa$taxonomy,]
food_map <-  read.table("raw/mct.food.otu.txt", sep = "\t", header = TRUE, comment = "")
food_taxa <- read.table("raw/mct.taxonomy.txt", sep = "\t", header = TRUE, comment = "")
water <- food_taxa %>% filter(FoodID != "92410110" &
FoodID != "92410210"&
FoodID != "92410250"&
FoodID != "94000100"&
FoodID != "94100100"&
FoodID != "94100200" &
FoodID != "94100300" &
FoodID != "94210100" &
FoodID != "94210200" &
FoodID != "94210300" &
FoodID != "94220200" &
FoodID != "94300100")
food_taxa <- food_taxa %>% filter(taxonomy %in% water$taxonomy)
food_map <- food_map[rownames(food_map) %in% food_taxa$taxonomy,]
food_map <-  read.table("raw/mct.food.otu.txt", sep = "\t", header = TRUE, comment = "")
food_taxa <- read.table("raw/mct.taxonomy.txt", sep = "\t", header = TRUE, comment = "")
water <- food_taxa %>% filter(FoodID != "92410110" &
FoodID != "92410210"&
FoodID != "92410250"&
FoodID != "94000100"&
FoodID != "94100100"&
FoodID != "94100200" &
FoodID != "94100300" &
FoodID != "94210100" &
FoodID != "94210200" &
FoodID != "94210300" &
FoodID != "94220200" &
FoodID != "94300100")
food_taxa <- food_taxa %>% filter(taxonomy %in% water$taxonomy)
food_map <- food_map[rownames(food_map) %in% food_taxa$taxonomy,]
food_map <-  read.table("raw/mct.food.otu.txt", sep = "\t", header = TRUE, comment = "")
food_taxa <- read.table("raw/mct.taxonomy.txt", sep = "\t", header = TRUE, comment = "")
water <- food_taxa %>% filter(FoodID != "92410110" &
FoodID != "92410210"&
FoodID != "92410250"&
FoodID != "94000100"&
FoodID != "94100100"&
FoodID != "94100200" &
FoodID != "94100300" &
FoodID != "94210100" &
FoodID != "94210200" &
FoodID != "94210300" &
FoodID != "94220200" &
FoodID != "94300100")
food_taxa <- food_taxa %>% filter(taxonomy %in% water$taxonomy)
View(food_map)
View(food_map)
food_map <- food_map[food_map$X.FOODID %in% food_taxa$Main.food.description,]
food_map <-  read.table("raw/mct.food.otu.txt", sep = "\t", header = TRUE, comment = "")
food_taxa <- read.table("raw/mct.taxonomy.txt", sep = "\t", header = TRUE, comment = "")
water <- food_taxa %>% filter(FoodID != "92410110" &
FoodID != "92410210"&
FoodID != "92410250"&
FoodID != "94000100"&
FoodID != "94100100"&
FoodID != "94100200" &
FoodID != "94100300" &
FoodID != "94210100" &
FoodID != "94210200" &
FoodID != "94210300" &
FoodID != "94220200" &
FoodID != "94300100")
food_taxa <- food_taxa %>% filter(taxonomy %in% water$taxonomy)
food_map <- food_map[food_map$X.FOODID %in% food_taxa$Main.food.description,]
rm(water)
rownames(food_map) <- food_map$taxonomy
View(food_map)
food_map$taxonomy <- NULL #removing taxa string column
food_map$X.FOODID <- NULL #removing food names column
View(food_map)
sub_foodmap <- merged_food[merged_food$UserName == id,] #sub food variable allows us to access one subject at a time (like submap)
sub_food <- food_map[(colnames(food_map) %in% sub_foodmap[,"variable"])]#sub food variable looks at each subject individually
View(sub_food)
split <- strsplit(rownames(food_map),";")             # Split and rejoin on lv7 to get species level
split <- strsplit(rownames(food_map),";")             # Split and rejoin on lv7 to get species level
foodStrings <- sapply(split,function(x) paste(x[1:3],collapse=";"))
food_map <- rowsum(food_map,foodStrings)
View(food_map)
split <- strsplit(rownames(food_map),";")             # Split and rejoin on lv7 to get species level
foodStrings <- sapply(split,function(x) paste(x[1:1],collapse=";"))
food_map <- rowsum(food_map,foodStrings)
View(food_map)
sub_foodmap <- merged_food[merged_food$UserName == id,] #sub food variable allows us to access one subject at a time (like submap)
sub_food <- food_map[(colnames(food_map) %in% sub_foodmap[,"variable"])]#sub food variable looks at each subject individually
View(sub_food)
sub_foodsp <- setDT(sub_food, keep.rownames = TRUE) #make rownames first column of frame
View(sub_foodsp)
subtaxaalpha <- taxa[(colnames(taxa) %in% submap[,"X.SampleID"])] #subtaxa variable used for alpha diversity
source('~/Documents/Projects/zebra/bin/mac_version.R', echo=TRUE)
source('~/Documents/Projects/zebra/bin/mac_version.R', echo=TRUE)
meltdf<- melt(subtaxasp)
mergedf<- merge(x=meltdf, y=map, by.x = "variable", by.y= "X.SampleID", all.x=TRUE)
mergedf$rn <- as.character(mergedf$rn)
mergedf$rn <- gsub(".*s__", "", mergedf$rn)
mergedf$rn <- gsub("\\[", "",mergedf$rn)
mergedf$rn <- gsub("\\]", "",mergedf$rn)
mergedf$rn <- gsub("_", " ",mergedf$rn)
mergedf$rn[mergedf$value < 0.07] <- "<7% abundance"
View(mergedf)
mergedf <- mergeddf %>% groupby(StudyDayNo, rn) %>% summarise(newvalue = sum(Value))
mergedf <- mergedf %>% groupby(StudyDayNo, rn) %>% summarise(newvalue = sum(Value))
mergedf <- mergedf %>% group_by(StudyDayNo, rn) %>% summarise(newvalue = sum(Value))
mergedf <- mergedf %>% group_by(StudyDayNo, rn) %>% summarise(newvalue = sum(value))
View(mergedf)
ggplot(mergedf, aes(x = StudyDayNo, y = newvalue, fill = rn)) +
geom_bar(stat = "identity") +
scale_x_discrete(drop = FALSE,labels=c(tick_label)) +
scale_fill_manual(values =colpal)+
theme_classic(base_family = "Helvetica") +
theme(strip.text.y = element_text(angle = 0, size = 8, face = "italic", family = "Helvetica"),
axis.text.x = element_text( hjust = 1, family = "Helvetica"),
plot.title =  element_text(hjust = 0.5, family = "Helvetica"),
strip.background = element_rect(color = "grey")) +
guides(fill = guide_legend(reverse = TRUE,
keywidth = 1,
keyheight = 1,
ncol = 1,
title= "Bacterial Species")) +
labs(y="Relative Abundance",x="Study Day Number")+
ggtitle("Main species within your gut per day")
meltdf<- melt(subtaxasp)
mergedf<- merge(x=meltdf, y=map, by.x = "variable", by.y= "X.SampleID", all.x=TRUE)
mergedf$rn <- as.character(mergedf$rn)
mergedf$rn <- gsub(".*s__", "", mergedf$rn)
mergedf$rn <- gsub("\\[", "",mergedf$rn)
mergedf$rn <- gsub("\\]", "",mergedf$rn)
mergedf$rn <- gsub("_", " ",mergedf$rn)
mergedf$rn[mergedf$value < 0.05] <- "<5% abundance"
mergedf <- mergedf %>% group_by(StudyDayNo, rn) %>% summarise(newvalue = sum(value))
colpal<- colorRampPalette(brewer.pal(7,"Set3"))(20)
tick_label <- seq(1:17)
ggplot(mergedf, aes(x = StudyDayNo, y = newvalue, fill = rn)) +
geom_bar(stat = "identity") +
scale_x_discrete(drop = FALSE,labels=c(tick_label)) +
scale_fill_manual(values =colpal)+
theme_classic(base_family = "Helvetica") +
theme(strip.text.y = element_text(angle = 0, size = 8, face = "italic", family = "Helvetica"),
axis.text.x = element_text( hjust = 1, family = "Helvetica"),
plot.title =  element_text(hjust = 0.5, family = "Helvetica"),
strip.background = element_rect(color = "grey")) +
guides(fill = guide_legend(reverse = TRUE,
keywidth = 1,
keyheight = 1,
ncol = 1,
title= "Bacterial Species")) +
labs(y="Relative Abundance",x="Study Day Number")+
ggtitle("Main species within your gut per day")
meltdf<- melt(subtaxasp)
mergedf<- merge(x=meltdf, y=map, by.x = "variable", by.y= "X.SampleID", all.x=TRUE)
mergedf$rn <- as.character(mergedf$rn)
mergedf$rn <- gsub(".*s__", "", mergedf$rn)
mergedf$rn <- gsub("\\[", "",mergedf$rn)
mergedf$rn <- gsub("\\]", "",mergedf$rn)
mergedf$rn <- gsub("_", " ",mergedf$rn)
mergedf$rn[mergedf$value < 0.025] <- "<2.5% abundance"
mergedf <- mergedf %>% group_by(StudyDayNo, rn) %>% summarise(newvalue = sum(value))
colpal<- colorRampPalette(brewer.pal(7,"Set3"))(20)
tick_label <- seq(1:17)
ggplot(mergedf, aes(x = StudyDayNo, y = newvalue, fill = rn)) +
geom_bar(stat = "identity") +
scale_x_discrete(drop = FALSE,labels=c(tick_label)) +
scale_fill_manual(values =colpal)+
theme_classic(base_family = "Helvetica") +
theme(strip.text.y = element_text(angle = 0, size = 8, face = "italic", family = "Helvetica"),
axis.text.x = element_text( hjust = 1, family = "Helvetica"),
plot.title =  element_text(hjust = 0.5, family = "Helvetica"),
strip.background = element_rect(color = "grey")) +
guides(fill = guide_legend(reverse = TRUE,
keywidth = 1,
keyheight = 1,
ncol = 1,
title= "Bacterial Species")) +
labs(y="Relative Abundance",x="Study Day Number")+
ggtitle("Main species within your gut per day")
melt_food<- melt(sub_foodsp)
merge_food<- merge(x=melt_food, y=map, by.x = "variable", by.y= "X.SampleID", all.x=TRUE)
colnames(merge_food)[4] <- "UserName" #Change col name from UserName.x to UserName - compatibility purposes
colnames(merge_food)[5] <- "StudyDayNo" #Change col name from StudyDayNo.x to StudyDayNo - compatibility purposes
merge_food$rn <- as.character(merge_food$rn)
merge_food$rn <- gsub(".*s__", "", merge_food$rn)
merge_food$rn <- gsub("\\[", "",merge_food$rn)
merge_food$rn <- gsub("\\]", "",merge_food$rn)
merge_food$rn <- gsub("_", " ",merge_food$rn)
merge_food$rn[merge_food$value < 0.07] <- "<7% abundance"
colpal<- colorRampPalette(brewer.pal(12,"Set3"))(500)
colpal<- sample(colpal,500, replace = FALSE)
tick_label <- seq(1:17)
ggplot(merge_food, aes(x = StudyDayNo, y = value, fill = rn)) +
geom_bar(stat = "identity") +
scale_x_discrete(drop = FALSE,labels=c(tick_label)) +
scale_fill_manual(values =colpal)+
theme_classic(base_family = "Helvetica") +
theme(strip.text.y = element_text(angle = 0, size = 8, face = "italic", family = "Helvetica"),
axis.text.x = element_text( hjust = 1, family = "Helvetica"),
plot.title =  element_text(hjust = 0.5, family = "Helvetica"),
strip.background = element_rect(color = "grey")) +
guides(fill = guide_legend(reverse = TRUE,
keywidth = 1,
keyheight = 1,
ncol = 1,
title= "Bacterial Species")) +
labs(y="Relative Abundance",x="Study Day Number")+
ggtitle("Main foods within your gut per day")
sub_foodmap <- merged_food[merged_food$UserName == id,] #sub food variable allows us to access one subject at a time (like submap)
sub_food <- food_map[(colnames(food_map) %in% sub_foodmap[,"variable"])]#sub food variable looks at each subject individually
sub_foodsp <- setDT(sub_food, keep.rownames = TRUE) #make rownames first column of frame
View(food_map)
?sweep()
food_map <- sweep(food_map, 2, colSums(food_map), "/")
colSums(food_map)
sub_foodmap <- merged_food[merged_food$UserName == id,] #sub food variable allows us to access one subject at a time (like submap)
sub_food <- food_map[(colnames(food_map) %in% sub_foodmap[,"variable"])]#sub food variable looks at each subject individually
sub_foodsp <- setDT(sub_food, keep.rownames = TRUE) #make rownames first column of frame
melt_food<- melt(sub_foodsp)
merge_food<- merge(x=melt_food, y=map, by.x = "variable", by.y= "X.SampleID", all.x=TRUE)
colnames(merge_food)[4] <- "UserName" #Change col name from UserName.x to UserName - compatibility purposes
colnames(merge_food)[5] <- "StudyDayNo" #Change col name from StudyDayNo.x to StudyDayNo - compatibility purposes
merge_food$rn <- as.character(merge_food$rn)
merge_food$rn <- gsub(".*s__", "", merge_food$rn)
merge_food$rn <- gsub("\\[", "",merge_food$rn)
merge_food$rn <- gsub("\\]", "",merge_food$rn)
merge_food$rn <- gsub("_", " ",merge_food$rn)
colpal<- colorRampPalette(brewer.pal(12,"Set3"))(500)
colpal<- sample(colpal,500, replace = FALSE)
tick_label <- seq(1:17)
ggplot(merge_food, aes(x = StudyDayNo, y = value, fill = rn)) +
geom_bar(stat = "identity") +
scale_x_discrete(drop = FALSE,labels=c(tick_label)) +
scale_fill_manual(values =colpal)+
theme_classic(base_family = "Helvetica") +
theme(strip.text.y = element_text(angle = 0, size = 8, face = "italic", family = "Helvetica"),
axis.text.x = element_text( hjust = 1, family = "Helvetica"),
plot.title =  element_text(hjust = 0.5, family = "Helvetica"),
strip.background = element_rect(color = "grey")) +
guides(fill = guide_legend(reverse = TRUE,
keywidth = 1,
keyheight = 1,
ncol = 1,
title= "Bacterial Species")) +
labs(y="Relative Abundance",x="Study Day Number")+
ggtitle("Main foods within your gut per day")
View(merged_food)
View(melted_food)
meltdf<- melt(subtaxasp)
View(meltdf)
View(subtaxasp)
subtaxsp <- subtaxsp[order(rowMeans(subtaxsp)),]
subtaxasp <- subtaxasp[order(rowMeans(subtaxasp)),]
subtaxa <- subtaxa[order(rowMeans(subtaxa)),]
submap <- map[map$UserName == id,] #create submap variable we can use to iterate through
subtaxa <- staxa[(colnames(staxa) %in% submap[,"X.SampleID"])] #create subtaxa variable - looks at each subject individually
View(subtaxa)
subtaxa <- subtaxa[order(rowMeans(subtaxa)),]
subtaxasp <- setDT(subtaxa, keep.rownames=TRUE) #make rownames first column of frame
View(subtaxasp)
submap <- map[map$UserName == id,] #create submap variable we can use to iterate through
subtaxa <- staxa[(colnames(staxa) %in% submap[,"X.SampleID"])] #create subtaxa variable - looks at each subject individually
subtaxa <- subtaxa[order(rowMeans(subtaxa), decreasing = FALSE),]
View(subtaxa)
subtaxa <- subtaxa[order(rowMeans(subtaxa), decreasing = TRUE),]
View(subtaxa)
submap <- map[map$UserName == id,] #create submap variable we can use to iterate through
subtaxa <- staxa[(colnames(staxa) %in% submap[,"X.SampleID"])] #create subtaxa variable - looks at each subject individually
subtaxa <- subtaxa[order(rowMeans(subtaxa), decreasing = TRUE),]
subtaxasp <- setDT(subtaxa, keep.rownames=TRUE) #make rownames first column of frame
meltdf<- melt(subtaxasp)
mergedf<- merge(x=meltdf, y=map, by.x = "variable", by.y= "X.SampleID", all.x=TRUE)
mergedf$rn <- as.character(mergedf$rn)
mergedf$rn <- gsub(".*s__", "", mergedf$rn)
mergedf$rn <- gsub("\\[", "",mergedf$rn)
mergedf$rn <- gsub("\\]", "",mergedf$rn)
mergedf$rn <- gsub("_", " ",mergedf$rn)
mergedf$rn[mergedf$value < 0.025] <- "<2.5% abundance"
mergedf <- mergedf %>% group_by(StudyDayNo, rn) %>% summarise(newvalue = sum(value))
colpal<- colorRampPalette(brewer.pal(7,"Set3"))(20)
tick_label <- seq(1:17)
ggplot(mergedf, aes(x = StudyDayNo, y = newvalue, fill = rn)) +
geom_bar(stat = "identity") +
scale_x_discrete(drop = FALSE,labels=c(tick_label)) +
scale_fill_manual(values =colpal)+
theme_classic(base_family = "Helvetica") +
theme(strip.text.y = element_text(angle = 0, size = 8, face = "italic", family = "Helvetica"),
axis.text.x = element_text( hjust = 1, family = "Helvetica"),
plot.title =  element_text(hjust = 0.5, family = "Helvetica"),
strip.background = element_rect(color = "grey")) +
guides(fill = guide_legend(reverse = TRUE,
keywidth = 1,
keyheight = 1,
ncol = 1,
title= "Bacterial Species")) +
labs(y="Relative Abundance",x="Study Day Number")+
ggtitle("Main species within your gut per day")
ggplot(mergedf, aes(x = StudyDayNo, y = newvalue, fill = rn)) +
geom_bar(stat = "identity") +
scale_x_discrete(drop = FALSE,labels=c(tick_label)) +
scale_fill_manual(values =colpal)+
theme_classic(base_family = "Helvetica") +
theme(strip.text.y = element_text(angle = 0, size = 8, face = "italic", family = "Helvetica"),
axis.text.x = element_text( hjust = 1, family = "Helvetica"),
plot.title =  element_text(hjust = 0.5, family = "Helvetica"),
strip.background = element_rect(color = "grey")) +
guides(fill = guide_legend(reverse = FALSE,
keywidth = 1,
keyheight = 1,
ncol = 1,
title= "Bacterial Species")) +
labs(y="Relative Abundance",x="Study Day Number")+
ggtitle("Main species within your gut per day")
View(subtaxasp)
View(subtaxa)
View(meltdf)
class(meltdf$rn)
subtaxasp$rn <- as.factor(subtaxasp$rn)
meltdf<- melt(subtaxasp)
mergedf<- merge(x=meltdf, y=map, by.x = "variable", by.y= "X.SampleID", all.x=TRUE)
mergedf$rn <- as.character(mergedf$rn)
mergedf$rn <- gsub(".*s__", "", mergedf$rn)
mergedf$rn <- gsub("\\[", "",mergedf$rn)
mergedf$rn <- gsub("\\]", "",mergedf$rn)
mergedf$rn <- gsub("_", " ",mergedf$rn)
mergedf$rn[mergedf$value < 0.025] <- "<2.5% abundance"
mergedf <- mergedf %>% group_by(StudyDayNo, rn) %>% summarise(newvalue = sum(value))
colpal<- colorRampPalette(brewer.pal(7,"Set3"))(20)
tick_label <- seq(1:17)
ggplot(mergedf, aes(x = StudyDayNo, y = newvalue, fill = rn)) +
geom_bar(stat = "identity") +
scale_x_discrete(drop = FALSE,labels=c(tick_label)) +
scale_fill_manual(values =colpal)+
theme_classic(base_family = "Helvetica") +
theme(strip.text.y = element_text(angle = 0, size = 8, face = "italic", family = "Helvetica"),
axis.text.x = element_text( hjust = 1, family = "Helvetica"),
plot.title =  element_text(hjust = 0.5, family = "Helvetica"),
strip.background = element_rect(color = "grey")) +
guides(fill = guide_legend(reverse = FALSE,
keywidth = 1,
keyheight = 1,
ncol = 1,
title= "Bacterial Species")) +
labs(y="Relative Abundance",x="Study Day Number")+
ggtitle("Main species within your gut per day")
class(mergedf$rn)
meltdf<- melt(subtaxasp)
class(meltdf$rn)
mergedf<- merge(x=meltdf, y=map, by.x = "variable", by.y= "X.SampleID", all.x=TRUE)
meltdf<- melt(subtaxasp)
mergedf<- merge(x=meltdf, y=map, by.x = "variable", by.y= "X.SampleID", all.x=TRUE)
mergedf$rn <- as.character(mergedf$rn)
mergedf$rn <- gsub(".*s__", "", mergedf$rn)
mergedf$rn <- gsub("\\[", "",mergedf$rn)
mergedf$rn <- gsub("\\]", "",mergedf$rn)
mergedf$rn <- gsub("_", " ",mergedf$rn)
mergedf$rn[mergedf$value < 0.025] <- "<2.5% abundance"
mergedf <- mergedf %>% group_by(StudyDayNo, rn) %>% summarise(newvalue = sum(value))
View(mergedf)
